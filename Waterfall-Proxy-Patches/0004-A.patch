From 4ac9d078c135013dd798d3589346ded9bbb1e23b Mon Sep 17 00:00:00 2001
From: SeanMurillo <sean.d.murillo@gmail.com>
Date: Sat, 17 Dec 2022 23:44:32 -0500
Subject: [PATCH] A


diff --git a/README.md b/README.md
index 3e64158e..77864e52 100644
--- a/README.md
+++ b/README.md
@@ -23,4 +23,4 @@ Binaries
 --------
 Precompiled binaries are available for end users on [Jenkins](https://www.spigotmc.org/go/bungeecord-dl).
 
-(c) 2012-2021 SpigotMC Pty. Ltd.
+(c) 2012-2022 SpigotMC Pty. Ltd.
diff --git a/api/pom.xml b/api/pom.xml
index c47215fd..7595047a 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -4,42 +4,42 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-api</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-api</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-API</name>
+    <name>InfiniteBungee-API</name>
     <description>API implemented by the Elastic Portal Suite</description>
 
     <dependencies>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-chat</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-chat</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-config</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-config</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-event</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-event</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-protocol</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-protocol</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
@@ -52,35 +52,29 @@
         <dependency>
             <groupId>org.apache.maven</groupId>
             <artifactId>maven-resolver-provider</artifactId>
-            <version>3.8.1</version>
+            <version>3.8.5</version>
             <!-- not part of the API proper -->
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.maven.resolver</groupId>
             <artifactId>maven-resolver-connector-basic</artifactId>
-            <version>1.7.0</version>
+            <version>1.7.3</version>
             <!-- not part of the API proper -->
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.maven.resolver</groupId>
             <artifactId>maven-resolver-transport-http</artifactId>
-            <version>1.7.0</version>
+            <version>1.7.3</version>
             <!-- not part of the API proper -->
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.yaml</groupId>
             <artifactId>snakeyaml</artifactId>
-            <version>1.28</version>
+            <version>1.33</version>
             <scope>compile</scope>
         </dependency>
-        <!-- Waterfall - Add SLF4J -->
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>1.7.25</version>
-        </dependency>
     </dependencies>
 </project>
diff --git a/api/src/main/java/io/github/waterfallmc/waterfall/utils/Hex.java b/api/src/main/java/io/github/waterfallmc/waterfall/utils/Hex.java
index ece5f798..4a169ebc 100644
--- a/api/src/main/java/io/github/waterfallmc/waterfall/utils/Hex.java
+++ b/api/src/main/java/io/github/waterfallmc/waterfall/utils/Hex.java
@@ -37,7 +37,7 @@ public class Hex {
 
     public static void decode(CharSequence chars, int charOffset, byte[] dest, int offset, int length) {
         Objects.requireNonNull(chars, "Null chars");
-        Objects.requireNonNull(chars, "Null destination");
+        Objects.requireNonNull(dest, "Null destination");
         final int numChars = chars.length();
         if ((numChars & 0x01) != 0) {
             throw new IllegalArgumentException("Odd number of characters: " + numChars);
@@ -65,7 +65,7 @@ public class Hex {
 
     public static void encode(char[] chars, int charOffset, byte[] source, int offset, int length) {
         Objects.requireNonNull(chars, "Null chars");
-        Objects.requireNonNull(chars, "Null bytes");
+        Objects.requireNonNull(source, "Null bytes");
         if (offset < 0 || charOffset < 0 || length < 0 || length * 2 > chars.length - charOffset || length > source.length - offset) {
             throw new IndexOutOfBoundsException();
         } else if (length == 0) {
@@ -110,4 +110,4 @@ public class Hex {
         assert (b & 0xF) == b : "Out of range " + b;
         return ENCODE_TABLE[b];
     }
-}
\ No newline at end of file
+}
diff --git a/api/src/main/java/net/md_5/bungee/Util.java b/api/src/main/java/net/md_5/bungee/Util.java
index 77eb64a1..70bf87f7 100644
--- a/api/src/main/java/net/md_5/bungee/Util.java
+++ b/api/src/main/java/net/md_5/bungee/Util.java
@@ -8,6 +8,7 @@ import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.Locale;
 import java.util.UUID;
 
 import io.github.waterfallmc.waterfall.utils.Hex;
@@ -71,6 +72,17 @@ public class Util
         return Hex.encodeString(Ints.toByteArray(i));
     }
 
+    /**
+     * Formats an char as a unicode value.
+     *
+     * @param c the character to format
+     * @return the unicode representation of the character
+     */
+    public static String unicode(char c)
+    {
+        return "\\u" + String.format( "%04x", (int) c ).toUpperCase( Locale.ROOT );
+    }
+
     /**
      * Constructs a pretty one line version of a {@link Throwable}. Useful for
      * debugging.
@@ -79,11 +91,24 @@ public class Util
      * @return a string representing information about the {@link Throwable}
      */
     public static String exception(Throwable t)
+    {
+        return exception( t, true );
+    }
+
+    /**
+     * Constructs a pretty one line version of a {@link Throwable}. Useful for
+     * debugging.
+     *
+     * @param t the {@link Throwable} to format.
+     * @param includeLineNumbers whether to include line numbers
+     * @return a string representing information about the {@link Throwable}
+     */
+    public static String exception(Throwable t, boolean includeLineNumbers)
     {
         // TODO: We should use clear manually written exceptions
         StackTraceElement[] trace = t.getStackTrace();
         return t.getClass().getSimpleName() + " : " + t.getMessage()
-                + ( ( trace.length > 0 ) ? " @ " + t.getStackTrace()[0].getClassName() + ":" + t.getStackTrace()[0].getLineNumber() : "" );
+                + ( ( includeLineNumbers && trace.length > 0 ) ? " @ " + t.getStackTrace()[0].getClassName() + ":" + t.getStackTrace()[0].getLineNumber() : "" );
     }
 
     public static String csv(Iterable<?> objects)
diff --git a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
index 2adcd573..e99fe764 100644
--- a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
+++ b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
@@ -28,18 +28,13 @@ public abstract class AbstractReconnectHandler implements ReconnectHandler
 
     public static ServerInfo getForcedHost(PendingConnection con)
     {
-        if ( con.getVirtualHost() == null )
-        {
-            return null;
-        }
-
-        String forced = con.getListener().getForcedHosts().get( con.getVirtualHost().getHostString() );
+        String forced = ( con.getVirtualHost() == null ) ? null : con.getListener().getForcedHosts().get( con.getVirtualHost().getHostString() );
 
         if ( forced == null && con.getListener().isForceDefault() )
         {
             forced = con.getListener().getDefaultServer();
         }
-        return ProxyServer.getInstance().getServerInfo( forced );
+        return ( forced == null ) ? null : ProxyServer.getInstance().getServerInfo( forced );
     }
 
     protected abstract ServerInfo getStoredServer(ProxiedPlayer player);
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index d69463f0..469fe0e1 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -261,4 +261,18 @@ public interface ProxyConfig
      * @return {@code true} if tablist rewriting is disabled, {@code false} otherwise
      */
     boolean isDisableTabListRewrite();
+
+    /**
+     * Gets the maximum number of registered plugin channels for any connection.
+     *
+     * @return the configured limit
+     */
+    int getPluginChannelLimit();
+
+    /**
+     * Gets the maximum length for any plugin message channel identifier.
+     *
+     * @return the configured limit
+     */
+    int getPluginChannelNameLimit();
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
index c81b0a4e..d21370be 100644
--- a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
+++ b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
@@ -68,6 +68,14 @@ public class ServerConnectRequest
      */
     @Setter
     private boolean retry;
+    // Waterfall start
+    /**
+     * Should feedback from the request be sent to players, allows plugins
+     * to silently deal with the outcome on their own
+     */
+    @Setter
+    private boolean sendFeedback;
+    // Waterfall end
 
     /**
      * Class that sets default properties/adds methods to the lombok builder
@@ -77,5 +85,6 @@ public class ServerConnectRequest
     {
 
         private int connectTimeout = ProxyServer.getInstance().getConfig().getServerConnectTimeout();
+        private boolean isSendFeedback = true; // Waterfall # God. f##king. lombok.
     }
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 3dc32801..684eb883 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -57,7 +57,7 @@ public interface ProxiedPlayer extends Connection, CommandSender
     String getDisplayName();
 
     /**
-     * Sets this players display name to be used by bungeecord commands and plugins.
+     * Sets this player's display name to be used by proxy commands and plugins.
      *
      * @param name the name to set
      */
diff --git a/api/src/main/java/net/md_5/bungee/api/event/ProxyPingEvent.java b/api/src/main/java/net/md_5/bungee/api/event/ProxyPingEvent.java
index 4baa06a9..ddee993a 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/ProxyPingEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/ProxyPingEvent.java
@@ -8,7 +8,7 @@ import net.md_5.bungee.api.ServerPing;
 import net.md_5.bungee.api.connection.PendingConnection;
 
 /**
- * Called when the proxy is pinged with packet 0xFE from the server list.
+ * Called when the proxy is queried for status from the server list.
  */
 @Data
 @ToString(callSuper = false)
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 3d1e9a3a..9660234d 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -44,13 +44,6 @@ public class Plugin
         // init( proxy, description );
     }
 
-    // Waterfall start - Allow plugins to use SLF4J for logging
-    public org.slf4j.Logger getSLF4JLogger() {
-        return org.slf4j.LoggerFactory.getLogger(logger.getName());
-    }
-    // Waterfall end
-
-
     /**
      * Called when the plugin has just been loaded. Most of the proxy will not
      * be initialized, so only use it for registering
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index 75cf6e33..68157dd4 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -63,7 +63,13 @@ final class PluginClassloader extends URLClassLoader
     {
         try
         {
-            return super.loadClass( name, resolve );
+            Class<?> result = super.loadClass( name, resolve );
+
+            // SPIGOT-6749: Library classes will appear in the above, but we don't want to return them to other plugins
+            if ( checkOther || result.getClassLoader() == this )
+            {
+                return result;
+            }
         } catch ( ClassNotFoundException ex )
         {
         }
diff --git a/api/src/main/java/net/md_5/bungee/connection/LoginResult.java b/api/src/main/java/net/md_5/bungee/connection/LoginResult.java
index d2ba8a4f..5dc8a220 100644
--- a/api/src/main/java/net/md_5/bungee/connection/LoginResult.java
+++ b/api/src/main/java/net/md_5/bungee/connection/LoginResult.java
@@ -2,6 +2,7 @@ package net.md_5.bungee.connection;
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import net.md_5.bungee.protocol.Property;
 
 @Data
 @AllArgsConstructor
@@ -11,14 +12,4 @@ public class LoginResult
     private String id;
     private String name;
     private Property[] properties;
-
-    @Data
-    @AllArgsConstructor
-    public static class Property
-    {
-
-        private String name;
-        private String value;
-        private String signature;
-    }
 }
diff --git a/bootstrap/pom.xml b/bootstrap/pom.xml
index 139b7ac1..5284f375 100644
--- a/bootstrap/pom.xml
+++ b/bootstrap/pom.xml
@@ -4,19 +4,19 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-bootstrap</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-bootstrap</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Bootstrap</name>
-    <description>Java 1.6 loader for Travertine</description>
+    <name>InfiniteBungee-Bootstrap</name>
+    <description>Java 1.6 loader for InfiniteBungee</description>
 
     <properties>
         <maven.deploy.skip>true</maven.deploy.skip>
@@ -29,15 +29,15 @@
 
     <dependencies>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-proxy</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-proxy</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
     </dependencies>
 
     <build>
-        <finalName>Travertine</finalName>
+        <finalName>InfiniteBungee</finalName>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
diff --git a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
index 1f63a2c2..a4516ed9 100644
--- a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
+++ b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
@@ -7,7 +7,7 @@ public class Bootstrap
     {
         if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52.0 )
         {
-            System.err.println( "*** ERROR *** Travertine requires Java 8 or above to function! Please download and install it!" );
+            System.err.println( "*** ERROR *** Waterfall requires Java 8 or above to function! Please download and install it!" );
             System.out.println( "You can check your Java version with the command: java -version" );
             return;
         }
diff --git a/chat/pom.xml b/chat/pom.xml
index 6d0f5098..78f8938c 100644
--- a/chat/pom.xml
+++ b/chat/pom.xml
@@ -4,25 +4,25 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-chat</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-chat</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Chat</name>
-    <description>Minecraft JSON chat API intended for use with Travertine</description>
+    <name>InfiniteBungee-Chat</name>
+    <description>Minecraft JSON chat API intended for use with InfiniteBungee</description>
 
     <dependencies>
         <dependency>
             <groupId>com.google.code.gson</groupId>
             <artifactId>gson</artifactId>
-            <version>2.8.7</version> <!-- Waterfall - bump gson version -->
+            <version>2.10</version>
             <scope>compile</scope>
         </dependency>
     </dependencies>
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java b/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
index 60213def..ea183cdb 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
@@ -78,6 +78,12 @@ public abstract class BaseComponent
     @Getter
     private HoverEvent hoverEvent;
 
+    /**
+     * Whether this component rejects previous formatting
+     */
+    @Getter
+    private transient boolean reset;
+
     /**
      * Default constructor.
      *
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/ComponentBuilder.java b/chat/src/main/java/net/md_5/bungee/api/chat/ComponentBuilder.java
index a7e50537..bf990f1b 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/ComponentBuilder.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/ComponentBuilder.java
@@ -161,7 +161,7 @@ public final class ComponentBuilder
             previous = dummy;
             dummy = null;
         }
-        if ( previous != null )
+        if ( previous != null && !component.isReset() )
         {
             component.copyFormatting( previous, retention, false );
         }
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java b/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
index 1598dcc5..4371374a 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
@@ -44,7 +44,7 @@ public final class TextComponent extends BaseComponent
      */
     public static BaseComponent[] fromLegacyText(String message, ChatColor defaultColor)
     {
-        ArrayList<BaseComponent> components = new ArrayList<BaseComponent>();
+        ArrayList<BaseComponent> components = new ArrayList<>();
         StringBuilder builder = new StringBuilder();
         TextComponent component = new TextComponent();
         Matcher matcher = url.matcher( message );
@@ -111,15 +111,15 @@ public final class TextComponent extends BaseComponent
                 } else if ( format == ChatColor.MAGIC )
                 {
                     component.setObfuscated( true );
-                } else if ( format == ChatColor.RESET )
-                {
-                    format = defaultColor;
-                    component = new TextComponent();
-                    component.setColor( format );
                 } else
                 {
+                    if ( format == ChatColor.RESET )
+                    {
+                        format = defaultColor;
+                    }
                     component = new TextComponent();
                     component.setColor( format );
+                    component.setReset( true );
                 }
                 continue;
             }
@@ -230,6 +230,6 @@ public final class TextComponent extends BaseComponent
     @Override
     public String toString()
     {
-        return String.format( "TextComponent{text=%s, %s}", text, super.toString() );
+        return "TextComponent{text=" + text + ", " + super.toString() + '}';
     }
 }
diff --git a/chat/src/main/java/net/md_5/bungee/chat/BaseComponentSerializer.java b/chat/src/main/java/net/md_5/bungee/chat/BaseComponentSerializer.java
index fc9739a8..515e1585 100644
--- a/chat/src/main/java/net/md_5/bungee/chat/BaseComponentSerializer.java
+++ b/chat/src/main/java/net/md_5/bungee/chat/BaseComponentSerializer.java
@@ -85,7 +85,7 @@ public class BaseComponentSerializer
                     {
                         components = new BaseComponent[]
                         {
-                                context.deserialize( contents, BaseComponent.class )
+                            context.deserialize( contents, BaseComponent.class )
                         };
                     }
                     hoverEvent = new HoverEvent( action, components );
diff --git a/chat/src/test/java/net/md_5/bungee/api/chat/ComponentsTest.java b/chat/src/test/java/net/md_5/bungee/api/chat/ComponentsTest.java
index e8d65a54..d212d76c 100644
--- a/chat/src/test/java/net/md_5/bungee/api/chat/ComponentsTest.java
+++ b/chat/src/test/java/net/md_5/bungee/api/chat/ComponentsTest.java
@@ -592,7 +592,37 @@ public class ComponentsTest
         Assert.assertArrayEquals( hexColored, reColored );
     }
 
-    private String fromAndToLegacyText(String legacyText)
+    /**
+     * In legacy chat, colors and reset both reset all formatting.
+     * Make sure it works in combination with ComponentBuilder.
+     */
+    @Test
+    public void testLegacyResetInBuilder()
+    {
+        ComponentBuilder builder = new ComponentBuilder();
+        BaseComponent[] a = TextComponent.fromLegacyText( "§4§n44444§rdd§6§l6666" );
+
+        String expected = "{\"extra\":[{\"underlined\":true,\"color\":\"dark_red\",\"text\":\"44444\"},{\"color\":"
+                + "\"white\",\"text\":\"dd\"},{\"bold\":true,\"color\":\"gold\",\"text\":\"6666\"}],\"text\":\"\"}";
+        Assert.assertEquals( expected, ComponentSerializer.toString( a ) );
+
+        builder.append( a );
+
+        String test1 = ComponentSerializer.toString( builder.create() );
+        Assert.assertEquals( expected, test1 );
+
+        BaseComponent[] b = TextComponent.fromLegacyText( "§rrrrr" );
+        builder.append( b );
+
+        String test2 = ComponentSerializer.toString( builder.create() );
+        Assert.assertEquals(
+                "{\"extra\":[{\"underlined\":true,\"color\":\"dark_red\",\"text\":\"44444\"},"
+                        + "{\"color\":\"white\",\"text\":\"dd\"},{\"bold\":true,\"color\":\"gold\",\"text\":\"6666\"},"
+                        + "{\"color\":\"white\",\"text\":\"rrrr\"}],\"text\":\"\"}",
+                test2 );
+    }
+
+    private static String fromAndToLegacyText(String legacyText)
     {
         return BaseComponent.toLegacyText( TextComponent.fromLegacyText( legacyText ) );
     }
diff --git a/checkstyle.xml b/checkstyle.xml
index 9ac4e931..3acb90f5 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -33,6 +33,7 @@
 
         <!-- See http://checkstyle.sourceforge.net/config_filters.html -->
         <module name="SuppressionCommentFilter"/>
+        <module name="SuppressWarningsHolder"/>
 
         <!-- See http://checkstyle.sourceforge.net/config_imports.html -->
         <module name="AvoidStarImport"/>
@@ -54,11 +55,11 @@
         <module name="OperatorWrap"/>
         <module name="ParenPad">
             <property name="option" value="nospace"/>
-            <property name="tokens" value="ANNOTATION, CTOR_DEF, METHOD_DEF"/>
+            <property name="tokens" value="ANNOTATION, CTOR_DEF, METHOD_DEF, LAMBDA"/>
         </module>
         <module name="ParenPad">
             <property name="option" value="space"/>
-            <property name="tokens" value="ANNOTATION_FIELD_DEF, CTOR_CALL, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA"/>
+            <property name="tokens" value="ANNOTATION_FIELD_DEF, CTOR_CALL, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, RECORD_DEF"/>
         </module>
         <module name="SingleSpaceSeparator"/>
         <module name="TypecastParenPad"/>
@@ -84,4 +85,6 @@
         <module name="Indentation"/>
         <module name="UpperEll"/>
     </module>
+
+    <module name="SuppressWarningsFilter"/>
 </module>
diff --git a/config/pom.xml b/config/pom.xml
index 7cdcbd8b..af9cc709 100644
--- a/config/pom.xml
+++ b/config/pom.xml
@@ -4,32 +4,32 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-config</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-config</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Config</name>
-    <description>Generic java configuration API intended for use with Travertine</description>
+    <name>InfiniteBungee-Config</name>
+    <description>Generic java configuration API intended for use with InfiniteBungee</description>
 
     <dependencies>
         <dependency>
             <groupId>com.google.code.gson</groupId>
             <artifactId>gson</artifactId>
-            <version>2.8.0</version>
+            <version>2.10</version>
             <scope>compile</scope>
             <optional>true</optional>
         </dependency>
         <dependency>
             <groupId>org.yaml</groupId>
             <artifactId>snakeyaml</artifactId>
-            <version>1.27</version>
+            <version>1.33</version>
             <scope>compile</scope>
             <optional>true</optional>
         </dependency>
diff --git a/event/pom.xml b/event/pom.xml
index b1a990c9..7e924967 100644
--- a/event/pom.xml
+++ b/event/pom.xml
@@ -4,17 +4,17 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-event</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-event</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Event</name>
-    <description>Generic java event dispatching API intended for use with Travertine.</description>
+    <name>InfiniteBungee-Event</name>
+    <description>Generic java event dispatching API intended for use with InfiniteBungee.</description>
 </project>
diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index ac6b9758..1187acd0 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -43,6 +43,8 @@ public class EventBus
         {
             for ( EventHandlerMethod method : handlers )
             {
+                long start = System.nanoTime();
+
                 try
                 {
                     method.invoke( event );
@@ -58,6 +60,15 @@ public class EventBus
                     logger.log( Level.WARNING, msg, ex.getCause() );
                     if( exceptionHandler != null ) exceptionHandler.handleEventException( msg, event, method, ex ); //Waterfall - call passed exception handler
                 }
+
+                long elapsed = System.nanoTime() - start;
+                if ( elapsed > 50000000 )
+                {
+                    logger.log( Level.WARNING, "Plugin listener {0} took {1}ms to process event {2}!", new Object[]
+                    {
+                        method.getListener().getClass().getName(), elapsed / 1000000, event
+                    } );
+                }
             }
         }
     }
@@ -80,18 +91,8 @@ public class EventBus
                     } );
                     continue;
                 }
-                Map<Byte, Set<Method>> prioritiesMap = handler.get( params[0] );
-                if ( prioritiesMap == null )
-                {
-                    prioritiesMap = new HashMap<>();
-                    handler.put( params[0], prioritiesMap );
-                }
-                Set<Method> priority = prioritiesMap.get( annotation.priority() );
-                if ( priority == null )
-                {
-                    priority = new HashSet<>();
-                    prioritiesMap.put( annotation.priority(), priority );
-                }
+                Map<Byte, Set<Method>> prioritiesMap = handler.computeIfAbsent( params[0], k -> new HashMap<>() );
+                Set<Method> priority = prioritiesMap.computeIfAbsent( annotation.priority(), k -> new HashSet<>() );
                 priority.add( m );
             }
         }
@@ -106,20 +107,10 @@ public class EventBus
         {
             for ( Map.Entry<Class<?>, Map<Byte, Set<Method>>> e : handler.entrySet() )
             {
-                Map<Byte, Map<Object, Method[]>> prioritiesMap = byListenerAndPriority.get( e.getKey() );
-                if ( prioritiesMap == null )
-                {
-                    prioritiesMap = new HashMap<>();
-                    byListenerAndPriority.put( e.getKey(), prioritiesMap );
-                }
+                Map<Byte, Map<Object, Method[]>> prioritiesMap = byListenerAndPriority.computeIfAbsent( e.getKey(), k -> new HashMap<>() );
                 for ( Map.Entry<Byte, Set<Method>> entry : e.getValue().entrySet() )
                 {
-                    Map<Object, Method[]> currentPriorityMap = prioritiesMap.get( entry.getKey() );
-                    if ( currentPriorityMap == null )
-                    {
-                        currentPriorityMap = new HashMap<>();
-                        prioritiesMap.put( entry.getKey(), currentPriorityMap );
-                    }
+                    Map<Object, Method[]> currentPriorityMap = prioritiesMap.computeIfAbsent( entry.getKey(), k -> new HashMap<>() );
                     currentPriorityMap.put( listener, entry.getValue().toArray( new Method[ 0 ] ) );
                 }
                 bakeHandlers( e.getKey() );
diff --git a/log/pom.xml b/log/pom.xml
index 00f7b9c9..53086760 100644
--- a/log/pom.xml
+++ b/log/pom.xml
@@ -4,19 +4,19 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-log</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-log</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Log</name>
-    <description>Simplistic and performant java.util.Logger based logger and console API designed for use with Travertine and Minecraft related applications.</description>
+    <name>InfiniteBungee-Log</name>
+    <description>Simplistic and performant java.util.Logger based logger and console API designed for use with InfiniteBungee and Minecraft related applications.</description>
 
     <dependencies>
         <dependency>
@@ -26,8 +26,8 @@
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-chat</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-chat</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
diff --git a/log/src/main/java/net/md_5/bungee/log/BungeeLogger.java b/log/src/main/java/net/md_5/bungee/log/BungeeLogger.java
index c2062bf8..d7d2b6a9 100644
--- a/log/src/main/java/net/md_5/bungee/log/BungeeLogger.java
+++ b/log/src/main/java/net/md_5/bungee/log/BungeeLogger.java
@@ -13,19 +13,23 @@ public class BungeeLogger extends Logger
 
     private final LogDispatcher dispatcher = new LogDispatcher( this );
 
+    // CHECKSTYLE:OFF
     @SuppressWarnings(
             {
                 "CallToPrintStackTrace", "CallToThreadStartDuringObjectConstruction"
             })
+    // CHECKSTYLE:ON
     @SuppressFBWarnings("SC_START_IN_CTOR")
     public BungeeLogger(String loggerName, String filePattern, ConsoleReader reader)
     {
         super( loggerName, null );
         setLevel( Level.ALL );
+        setUseParentHandlers( false );
 
         try
         {
             FileHandler fileHandler = new FileHandler( filePattern, 1 << 24, 8, true );
+            fileHandler.setLevel( Level.parse( System.getProperty( "net.md_5.bungee.file-log-level", "INFO" ) ) );
             fileHandler.setFormatter( new ConciseFormatter( false ) );
             addHandler( fileHandler );
 
diff --git a/log/src/main/java/net/md_5/bungee/log/LogDispatcher.java b/log/src/main/java/net/md_5/bungee/log/LogDispatcher.java
index d8dcdc1e..d044b68f 100644
--- a/log/src/main/java/net/md_5/bungee/log/LogDispatcher.java
+++ b/log/src/main/java/net/md_5/bungee/log/LogDispatcher.java
@@ -12,7 +12,7 @@ public class LogDispatcher extends Thread
 
     public LogDispatcher(BungeeLogger logger)
     {
-        super( "Travertine Logger Thread" );
+        super( "InfiniteBungee Logger Thread" );
         this.logger = logger;
     }
 
diff --git a/log/src/main/java/net/md_5/bungee/log/LoggingForwardHandler.java b/log/src/main/java/net/md_5/bungee/log/LoggingForwardHandler.java
new file mode 100644
index 00000000..6974a7b3
--- /dev/null
+++ b/log/src/main/java/net/md_5/bungee/log/LoggingForwardHandler.java
@@ -0,0 +1,29 @@
+package net.md_5.bungee.log;
+
+import java.util.logging.Handler;
+import java.util.logging.LogRecord;
+import java.util.logging.Logger;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class LoggingForwardHandler extends Handler
+{
+
+    private final Logger logger;
+
+    @Override
+    public void publish(LogRecord record)
+    {
+        logger.log( record );
+    }
+
+    @Override
+    public void flush()
+    {
+    }
+
+    @Override
+    public void close() throws SecurityException
+    {
+    }
+}
diff --git a/log4j/pom.xml b/log4j/pom.xml
index 9fe7044f..eee281eb 100644
--- a/log4j/pom.xml
+++ b/log4j/pom.xml
@@ -3,22 +3,22 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-log4j</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-log4j</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Log</name>
-    <description>Simplistic and performant Log4j2 based logger and console API designed for use with Travertine and Minecraft related applications.</description>
+    <name>InfiniteBungee-Log</name>
+    <description>Simplistic and performant Log4j2 based logger and console API designed for use with InfiniteBungee and Minecraft related applications.</description>
 
     <properties>
-        <log4j2.version>2.14.0</log4j2.version>
+        <log4j2.version>2.17.2</log4j2.version>
     </properties>
 
     <dependencies>
@@ -38,36 +38,11 @@
             <artifactId>log4j-jul</artifactId>
             <version>${log4j2.version}</version>
         </dependency>
-        <dependency>
-            <groupId>org.apache.logging.log4j</groupId>
-            <artifactId>log4j-slf4j-impl</artifactId>
-            <version>${log4j2.version}</version>
-            <scope>runtime</scope>
-        </dependency>
         <dependency>
             <groupId>com.lmax</groupId>
             <artifactId>disruptor</artifactId>
-            <version>3.4.2</version>
+            <version>3.4.4</version>
             <scope>runtime</scope>
         </dependency>
-        <!-- Console improvements -->
-        <dependency>
-            <groupId>net.minecrell</groupId>
-            <artifactId>terminalconsoleappender</artifactId>
-            <version>1.0.0</version>
-        </dependency>
-        <dependency>
-            <groupId>net.java.dev.jna</groupId>
-            <artifactId>jna</artifactId>
-            <version>4.4.0</version>
-            <scope>runtime</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-chat</artifactId>
-            <version>${project.version}</version>
-            <scope>compile</scope>
-        </dependency>
     </dependencies>
 </project>
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
index a42d63fa..663bddec 100644
--- a/log4j/src/main/resources/log4j2.xml
+++ b/log4j/src/main/resources/log4j2.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<Configuration status="warn">
+<Configuration status="warn" shutdownHook="disable">
     <Appenders>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
diff --git a/module/cmd-alert/pom.xml b/module/cmd-alert/pom.xml
index 8eb06572..6ff939e8 100644
--- a/module/cmd-alert/pom.xml
+++ b/module/cmd-alert/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-cmd-alert</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-alert</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>cmd_alert</name>
diff --git a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
index 55d2f7b8..5e24c2c1 100644
--- a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
+++ b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
@@ -11,7 +11,7 @@ public class CommandAlert extends Command
 
     public CommandAlert()
     {
-        super( "alert", "bungeecord.command.alert" );
+        super( "alert", "infinitebungee.command.alert" );
     }
 
     @Override
diff --git a/module/cmd-find/pom.xml b/module/cmd-find/pom.xml
index 09e2835a..f7562482 100644
--- a/module/cmd-find/pom.xml
+++ b/module/cmd-find/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-cmd-find</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-find</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>cmd_find</name>
diff --git a/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java b/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
index 7ea239ac..0f9ba4a2 100644
--- a/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
+++ b/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
@@ -10,7 +10,7 @@ public class CommandFind extends PlayerCommand
 
     public CommandFind()
     {
-        super( "find", "bungeecord.command.find" );
+        super( "find", "infinitebungee.command.find" );
     }
 
     @Override
diff --git a/module/cmd-kick/nb-configuration.xml b/module/cmd-kick/nb-configuration.xml
new file mode 100644
index 00000000..7e465924
--- /dev/null
+++ b/module/cmd-kick/nb-configuration.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project-shared-configuration>
+    <!--
+    This file contains additional configuration written by modules in the NetBeans IDE.
+    The configuration is intended to be shared among all the users of project and
+    therefore it is assumed to be part of version control checkout.
+    Without this configuration present, some functionality in the IDE may be limited or fail altogether.
+    -->
+    <properties xmlns="http://www.netbeans.org/ns/maven-properties-data/1">
+        <!--
+        Properties that influence various parts of the IDE, especially code formatting and the like. 
+        You can copy and paste the single properties, into the pom.xml file and the IDE will pick them up.
+        That way multiple projects can share the same settings (useful for formatting rules for example).
+        Any value defined here will override the pom.xml file value but is only applicable to the current project.
+        -->
+        <org-netbeans-modules-editor-indent.CodeStyle.usedProfile>project</org-netbeans-modules-editor-indent.CodeStyle.usedProfile>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.classDeclBracePlacement>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.otherBracePlacement>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>NEW_LINE</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.methodDeclBracePlacement>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinMethodCallParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSwitchParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinCatchParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinTryParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinSynchronizedParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinArrayInitBrackets>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinWhileParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinIfParens>
+        <org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>true</org-netbeans-modules-editor-indent.text.x-java.CodeStyle.project.spaceWithinForParens>
+    </properties>
+</project-shared-configuration>
diff --git a/module/cmd-kick/pom.xml b/module/cmd-kick/pom.xml
new file mode 100644
index 00000000..9bfc7605
--- /dev/null
+++ b/module/cmd-kick/pom.xml
@@ -0,0 +1,20 @@
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-kick</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>cmd_kick</name>
+    <description>Provides the gkick command</description>
+</project>
diff --git a/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/CommandKick.java b/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/CommandKick.java
new file mode 100644
index 00000000..e5852a95
--- /dev/null
+++ b/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/CommandKick.java
@@ -0,0 +1,72 @@
+package net.md_5.bungee.module.cmd.kick;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableSet;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.api.plugin.TabExecutor;
+
+public class CommandKick extends Command implements TabExecutor
+{
+
+    public CommandKick()
+    {
+        super( "gkick", "infinitebungee.command.kick" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            sender.sendMessage( ProxyServer.getInstance().getTranslation( "username_needed" ) );
+        } else
+        {
+            ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
+
+            if ( player == null )
+            {
+                sender.sendMessage( TextComponent.fromLegacyText( ProxyServer.getInstance().getTranslation( "user_not_online" ) ) );
+                return;
+            }
+
+            if ( args.length == 1 )
+            {
+                player.disconnect( TextComponent.fromLegacyText( ProxyServer.getInstance().getTranslation( "kick_message" ) ) );
+            } else
+            {
+                String[] reason = new String[ args.length - 1 ];
+                System.arraycopy( args, 1, reason, 0, reason.length );
+                player.disconnect( TextComponent.fromLegacyText( ChatColor.translateAlternateColorCodes( '&', Joiner.on( ' ' ).join( reason ) ) ) );
+            }
+        }
+    }
+
+    @Override
+    public Iterable<String> onTabComplete(CommandSender sender, String[] args)
+    {
+        if ( args.length == 1 )
+        {
+            Set<String> matches = new HashSet<>();
+            String search = args[0].toLowerCase( Locale.ROOT );
+            for ( ProxiedPlayer player : ProxyServer.getInstance().getPlayers() )
+            {
+                if ( player.getName().toLowerCase( Locale.ROOT ).startsWith( search ) )
+                {
+                    matches.add( player.getName() );
+                }
+            }
+            return matches;
+        } else
+        {
+            return ImmutableSet.of();
+        }
+    }
+}
diff --git a/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/PluginKick.java b/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/PluginKick.java
new file mode 100644
index 00000000..82b2332b
--- /dev/null
+++ b/module/cmd-kick/src/main/java/net/md_5/bungee/module/cmd/kick/PluginKick.java
@@ -0,0 +1,13 @@
+package net.md_5.bungee.module.cmd.kick;
+
+import net.md_5.bungee.api.plugin.Plugin;
+
+public class PluginKick extends Plugin
+{
+
+    @Override
+    public void onEnable()
+    {
+        getProxy().getPluginManager().registerCommand( this, new CommandKick() );
+    }
+}
diff --git a/module/cmd-kick/src/main/resources/plugin.yml b/module/cmd-kick/src/main/resources/plugin.yml
new file mode 100644
index 00000000..142d6901
--- /dev/null
+++ b/module/cmd-kick/src/main/resources/plugin.yml
@@ -0,0 +1,5 @@
+name: ${project.name}
+main: net.md_5.bungee.module.cmd.kick.PluginKick
+version: ${describe}
+description: ${project.description}
+author: ${module.author}
diff --git a/module/cmd-list/pom.xml b/module/cmd-list/pom.xml
index 5d1ff042..1550611e 100644
--- a/module/cmd-list/pom.xml
+++ b/module/cmd-list/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-cmd-list</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-list</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>cmd_list</name>
diff --git a/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java b/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
index c2227110..69d453ba 100644
--- a/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
+++ b/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
@@ -19,7 +19,7 @@ public class CommandList extends Command
 
     public CommandList()
     {
-        super( "glist", "bungeecord.command.list" );
+        super( "glist", "infinitebungee.command.list" );
     }
 
     @Override
diff --git a/module/cmd-send/pom.xml b/module/cmd-send/pom.xml
index 1f6a7c68..1da489a6 100644
--- a/module/cmd-send/pom.xml
+++ b/module/cmd-send/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-cmd-send</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-send</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>cmd_send</name>
diff --git a/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java b/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
index f59f9457..eff20de1 100644
--- a/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
+++ b/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
@@ -93,7 +93,7 @@ public class CommandSend extends Command implements TabExecutor
 
     public CommandSend()
     {
-        super( "send", "bungeecord.command.send" );
+        super( "send", "infinitebungee.command.send" );
     }
 
     @Override
diff --git a/module/cmd-server/pom.xml b/module/cmd-server/pom.xml
index c353e829..1037d16e 100644
--- a/module/cmd-server/pom.xml
+++ b/module/cmd-server/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-cmd-server</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module-cmd-server</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>cmd_server</name>
diff --git a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
index 698b420f..a5b8a4c9 100644
--- a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
+++ b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
@@ -26,7 +26,7 @@ public class CommandServer extends Command implements TabExecutor
 
     public CommandServer()
     {
-        super( "server", "bungeecord.command.server" );
+        super( "server", "infinitebungee.command.server" );
     }
 
     @Override
diff --git a/module/pom.xml b/module/pom.xml
index ca0a9c87..d0e6d5c1 100644
--- a/module/pom.xml
+++ b/module/pom.xml
@@ -4,23 +4,24 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-module</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>pom</packaging>
 
-    <name>Travertine Modules</name>
-    <description>Parent project for all Travertine modules.</description>
+    <name>InfiniteBungee Modules</name>
+    <description>Parent project for all InfiniteBungee modules.</description>
 
     <modules>
         <module>cmd-alert</module>
         <module>cmd-find</module>
+        <module>cmd-kick</module>
         <module>cmd-list</module>
         <module>cmd-send</module>
         <module>cmd-server</module>
@@ -28,15 +29,15 @@
     </modules>
 
     <properties>
-        <module.author>WaterfallMC</module.author>
+        <module.author>InfiniteBungeeMC</module.author>
         <maven.deploy.skip>true</maven.deploy.skip>
         <maven.javadoc.skip>true</maven.javadoc.skip>
     </properties>
 
     <dependencies>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-api</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-api</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
diff --git a/module/reconnect-yaml/pom.xml b/module/reconnect-yaml/pom.xml
index d1a2d86c..4b3f42c9 100644
--- a/module/reconnect-yaml/pom.xml
+++ b/module/reconnect-yaml/pom.xml
@@ -4,15 +4,15 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-module</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-module</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-module-reconnect-yaml</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>net.md-5</groupId>
+    <artifactId>bungeecord-module-reconnect-yaml</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>reconnect_yaml</name>
diff --git a/native/compile-native.sh b/native/compile-native.sh
index bdd1cd6b..a50b52bf 100755
--- a/native/compile-native.sh
+++ b/native/compile-native.sh
@@ -1,17 +1,23 @@
 #!/bin/sh
 
+set -eu
+
+echo "Compiling mbedtls"
+(cd mbedtls && make no_test)
+
+echo "Compiling zlib"
+(cd zlib && CFLAGS=-fPIC ./configure --static && make)
+
 # Waterfall - rewrite below to extend platform support
 
 if [[ "$OSTYPE" == "darwin"* ]]; then
-  # brew install mbedtls zlib
   PREFIX="osx-"
-  CXX_ARGS="/usr/local/lib/libmbedcrypto.a -lz -I$JAVA_HOME/include/ -I$JAVA_HOME/include/darwin/ -I/usr/local/include -L/usr/local/lib"
+  CXX_ARGS="-I$JAVA_HOME/include/ -I$JAVA_HOME/include/darwin/"
 else
-  # apt-get install libmbedtls-dev zlib1g-dev
-  CXX_ARGS="-lcrypto -lz -I$JAVA_HOME/include/ -I$JAVA_HOME/include/linux/"
+  CXX_ARGS="-I$JAVA_HOME/include/ -I$JAVA_HOME/include/linux/ -Wl,--wrap=memcpy"
 fi
 
 CXX="g++ -shared -fPIC -O3 -Wall -Werror"
 
-$CXX src/main/c/NativeCipherImpl.cpp -o src/main/resources/${PREFIX}native-cipher.so $CXX_ARGS
-$CXX src/main/c/NativeCompressImpl.cpp -o src/main/resources/${PREFIX}native-compress.so $CXX_ARGS
+$CXX -Imbedtls/include src/main/c/NativeCipherImpl.cpp -o src/main/resources/${PREFIX:-}native-cipher.so mbedtls/library/libmbedcrypto.a $CXX_ARGS
+$CXX -Izlib src/main/c/NativeCompressImpl.cpp -o src/main/resources/${PREFIX:-}native-compress.so zlib/libz.a $CXX_ARGS
diff --git a/native/pom.xml b/native/pom.xml
index a2efb5e5..3b791ecd 100644
--- a/native/pom.xml
+++ b/native/pom.xml
@@ -4,19 +4,19 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-native</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-native</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Native</name>
-    <description>Optional native code to speed up and enhance Travertine functionality.</description>
+    <name>InfiniteBungee-Native</name>
+    <description>Optional native code to speed up and enhance InfiniteBungee functionality.</description>
 
     <dependencies>
         <dependency>
diff --git a/native/src/main/c/NativeCipherImpl.cpp b/native/src/main/c/NativeCipherImpl.cpp
index 0cedd7e5..42fdb540 100644
--- a/native/src/main/c/NativeCipherImpl.cpp
+++ b/native/src/main/c/NativeCipherImpl.cpp
@@ -1,14 +1,17 @@
-// Support for CentOS 6
-#if __linux__ // Waterfall
-__asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
-#endif // Waterfall
-
 #include <stdlib.h>
 #include <string.h>
 
 #include <mbedtls/aes.h>
 #include "net_md_5_bungee_jni_cipher_NativeCipherImpl.h"
 
+// Support for CentOS 6
+#if __linux__ // Waterfall
+__asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
+extern "C" void *__wrap_memcpy(void *dest, const void *src, size_t n) {
+    return memcpy(dest, src, n);
+}
+#endif // Waterfall
+
 typedef unsigned char byte;
 
 struct crypto_context {
diff --git a/native/src/main/c/NativeCompressImpl.cpp b/native/src/main/c/NativeCompressImpl.cpp
index 9bda6300..8fa0bd61 100644
--- a/native/src/main/c/NativeCompressImpl.cpp
+++ b/native/src/main/c/NativeCompressImpl.cpp
@@ -1,7 +1,17 @@
 #include <stdlib.h>
+#include <string.h>
+
 #include <zlib.h>
 #include "net_md_5_bungee_jni_zlib_NativeCompressImpl.h"
 
+// Support for CentOS 6
+#if __linux__ // Waterfall
+__asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
+extern "C" void *__wrap_memcpy(void *dest, const void *src, size_t n) {
+    return memcpy(dest, src, n);
+}
+#endif // Waterfall
+
 typedef unsigned char byte;
 
 static jfieldID consumedID;
diff --git a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
index a6d7cfb5..f4f6e6ab 100644
--- a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
+++ b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
@@ -6,18 +6,19 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.function.Supplier;
 import net.md_5.bungee.jni.cipher.BungeeCipher;
 
 public final class NativeCode<T>
 {
 
     private final String name;
-    private final Class<? extends T> javaImpl;
-    private final Class<? extends T> nativeImpl;
+    private final Supplier<? extends T> javaImpl;
+    private final Supplier<? extends T> nativeImpl;
     //
     private boolean loaded;
 
-    public NativeCode(String name, Class<? extends T> javaImpl, Class<? extends T> nativeImpl)
+    public NativeCode(String name, Supplier<? extends T> javaImpl, Supplier<? extends T> nativeImpl)
     {
         if ("Mac OS X".equals( System.getProperty( "os.name" ))) name = "osx-" + name; // Waterfall
         this.name = name;
@@ -27,13 +28,7 @@ public final class NativeCode<T>
 
     public T newInstance()
     {
-        try
-        {
-            return ( loaded ) ? nativeImpl.getDeclaredConstructor().newInstance() : javaImpl.getDeclaredConstructor().newInstance();
-        } catch ( ReflectiveOperationException ex )
-        {
-            throw new RuntimeException( "Error getting instance", ex );
-        }
+        return ( loaded ) ? nativeImpl.get() : javaImpl.get();
     }
 
     public boolean load()
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
index d211cef6..0e27c2d7 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
@@ -25,9 +25,15 @@ public class JavaCipher implements BungeeCipher
         }
     }
 
-    public JavaCipher() throws GeneralSecurityException
+    public JavaCipher()
     {
-        this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" );
+        try
+        {
+            this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" );
+        } catch ( GeneralSecurityException ex )
+        {
+            throw new RuntimeException( ex );
+        }
     }
 
     @Override
diff --git a/native/src/main/resources/native-cipher.so b/native/src/main/resources/native-cipher.so
index 8f1717b93ea68f729f13fb01fe636dbc80cdd001..573626fb15fdf9fd767dc58c0e85f2bad2e095df 100755
GIT binary patch
literal 36152
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

literal 31976
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

diff --git a/native/src/main/resources/native-compress.so b/native/src/main/resources/native-compress.so
index e83e4d2d9693c3a19cf40edb0dd4fe9fcf225b91..8fc5fef1ba55c8c5f6f8871351b4817684f6a735 100755
GIT binary patch
literal 113736
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
A;Q#;t

literal 80333
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
O<meXO9$4vpYyKOlg<|Fa

diff --git a/native/src/main/resources/osx-native-cipher.so b/native/src/main/resources/osx-native-cipher.so
index 4d7916066e78333aa659cd4ba491d94f26890893..9892237878bae2b320d0c6390d5049a91318c77d 100755
GIT binary patch
literal 69352
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

literal 24164
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
WEa4_m=QdHGy<ZGc=>C3tHuv9J&nfo+

diff --git a/native/src/main/resources/osx-native-compress.so b/native/src/main/resources/osx-native-compress.so
index 02c98d2c48097fdc3312534ee706b3905283eb45..425287b0077d924e0f54adf2d56cb3f5bc613305 100755
GIT binary patch
literal 138128
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
Oiut;*2I%DC`u_mwKH=^F

literal 9676
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
Bu)Y8Q

diff --git a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
index 72b81ab8..b67862ea 100644
--- a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
@@ -26,7 +26,7 @@ public class NativeCipherTest
     private final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
     private static final int BENCHMARK_COUNT = 4096;
     //
-    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new );
 
     @Test
     public void testNative() throws Exception
diff --git a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
index fde626b1..60b71a13 100644
--- a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
@@ -15,7 +15,7 @@ import org.junit.Test;
 public class NativeZlibTest
 {
 
-    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new );
 
     @Test
     public void doTest() throws DataFormatException
diff --git a/pom.xml b/pom.xml
index aa57fe03..9febb0bf 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,24 +4,24 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-super</artifactId>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-super</artifactId>
         <version>dev-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-parent</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-parent</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>pom</packaging>
 
-    <name>Travertine-Parent</name>
-    <description>Parent project for all Travertine modules.</description>
-    <url>https://github.com/PaperMC/Travertine</url>
+    <name>InfiniteBungee-Parent</name>
+    <description>Parent project for all InfiniteBungee modules.</description>
+    <url>https://github.com/InfiniteBungeeMC/InfiniteBungee</url>
     <inceptionYear>2015</inceptionYear>
     <organization>
-        <name>WaterfallMC</name>
-        <url>https://github.com/WaterfallMC</url>
+        <name>InfiniteBungeeMC</name>
+        <url>https://github.com/InfiniteBungeeMC</url>
     </organization>
     <licenses>
         <license>
@@ -66,13 +66,13 @@
     </modules>
 
     <scm>
-        <connection>scm:git:git@github.com:com:PaperMC/Travertine.git</connection>
-        <developerConnection>scm:git:git@github.com:PaperMC/Travertine.git</developerConnection>
-        <url>git@github.com:PaperMC/Travertine.git</url>
+        <connection>scm:git:git@github.com:com:InfiniteBungeeMC/InfiniteBungee.git</connection>
+        <developerConnection>scm:git:git@github.com:InfiniteBungeeMC/InfiniteBungee.git</developerConnection>
+        <url>git@github.com:InfiniteBungeeMC/InfiniteBungee.git</url>
     </scm>
     <issueManagement>
         <system>GitHub</system>
-        <url>https://github.com/PaperMC/Travertine/issues</url>
+        <url>https://github.com/PaperMC/InfiniteBungee/issues</url>
     </issueManagement>
 
     <distributionManagement>
@@ -88,8 +88,8 @@
 
     <properties>
         <build.number>unknown</build.number>
-        <lombok.version>1.18.20</lombok.version>
-        <netty.version>4.1.63.Final</netty.version>
+        <lombok.version>1.18.22</lombok.version>
+        <netty.version>4.1.85.Final</netty.version>
         <maven.compiler.source>1.8</maven.compiler.source>
         <maven.compiler.target>1.8</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -99,13 +99,13 @@
         <dependency>
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
-            <version>4.13.1</version>
+            <version>4.13.2</version>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>com.google.guava</groupId>
             <artifactId>guava</artifactId>
-            <version>21.0</version>
+            <version>31.1-jre</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
@@ -157,7 +157,7 @@
              <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-checkstyle-plugin</artifactId>
-                <version>3.1.1</version>
+                <version>3.1.2</version>
                 <executions>
                     <execution>
                         <phase>process-classes</phase>
@@ -175,7 +175,7 @@
                     <dependency>
                         <groupId>com.puppycrawl.tools</groupId>
                         <artifactId>checkstyle</artifactId>
-                        <version>8.36.2</version>
+                        <version>8.45.1</version>
                     </dependency>
                 </dependencies>
             </plugin>
@@ -183,7 +183,7 @@
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>animal-sniffer-maven-plugin</artifactId>
-                <version>1.19</version>
+                <version>1.20</version>
                 <executions>
                     <execution>
                         <phase>process-classes</phase>
@@ -316,6 +316,7 @@
                                     <!-- lombok does not add @return or @param which causes warnings, so ignore -->
                                     <doclint>none</doclint>
                                     <sourcepath>${project.build.directory}/delombok</sourcepath>
+                                    <additionalJOption>--no-module-directories</additionalJOption> <!-- InfiniteBungee -->
                                 </configuration>
                             </execution>
                         </executions>
@@ -347,7 +348,7 @@
                 </plugins>
             </build>
         </profile>
-        <!-- Waterfall Start -->
+        <!-- InfiniteBungee Start -->
         <profile>
             <id>deployment</id>
             <build>
@@ -396,8 +397,8 @@
                                 </goals>
                                 <inherited>false</inherited>
                                 <configuration>
-                                    <doctitle>Waterfall ${project.version} API</doctitle>
-                                    <windowtitle>Waterfall ${project.version} API</windowtitle>
+                                    <doctitle>InfiniteBungee ${project.version} API</doctitle>
+                                    <windowtitle>InfiniteBungee ${project.version} API</windowtitle>
                                     <sourcepath>
                                         api/target/generated-sources/delombok;
                                         chat/target/generated-sources/delombok
@@ -429,6 +430,6 @@
                 </plugins>
             </build>
         </profile>
-        <!-- Waterfall end -->
+        <!-- InfiniteBungee end -->
     </profiles>
 </project>
diff --git a/protocol/pom.xml b/protocol/pom.xml
index 993cbca9..14d6bcc6 100644
--- a/protocol/pom.xml
+++ b/protocol/pom.xml
@@ -4,19 +4,19 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-protocol</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-protocol</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Protocol</name>
-    <description>Minimal implementation of the Minecraft protocol for use in Travertine</description>
+    <name>InfiniteBungee-Protocol</name>
+    <description>Minimal implementation of the Minecraft protocol for use in InfiniteBungee</description>
 
     <!-- We really shouldn't depend on external repositories, but at least this is the Central staging one -->
     <repositories>
@@ -41,8 +41,8 @@
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-chat</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-chat</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
diff --git a/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java b/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java
deleted file mode 100644
index 90064112..00000000
--- a/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package io.github.waterfallmc.travertine.protocol;
-
-import com.google.common.base.Preconditions;
-import io.netty.buffer.ByteBuf;
-
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-public abstract class MultiVersionPacketV17 extends DefinedPacket
-{
-
-    protected void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        v17Read( buf );
-    }
-
-    @Override
-    public void read0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        switch ( protocolVersion )
-        {
-            case ProtocolConstants.MINECRAFT_1_7_2:
-            case ProtocolConstants.MINECRAFT_1_7_6:
-                v17Read(buf, direction, protocolVersion);
-                break;
-            default:
-                read(buf, direction, protocolVersion);
-                break;
-        }
-    }
-
-    protected void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        v17Write( buf );
-    }
-
-    @Override
-    public void write0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        switch ( protocolVersion )
-        {
-            case ProtocolConstants.MINECRAFT_1_7_2:
-            case ProtocolConstants.MINECRAFT_1_7_6:
-                v17Write(buf, direction, protocolVersion);
-                break;
-            default:
-                write(buf, direction, protocolVersion);
-                break;
-        }
-    }
-    protected void v17Read(ByteBuf buf)
-    {
-        throw new UnsupportedOperationException( "Packet must implement read method" );
-    }
-
-    protected void v17Write(ByteBuf buf)
-    {
-        throw new UnsupportedOperationException( "Packet must implement write method" );
-    }
-
-    public static void v17writeArray(byte[] b, ByteBuf buf, boolean allowExtended)
-    {
-        // (Integer.MAX_VALUE & 0x1FFF9A ) = 2097050 - Forge's current upper limit
-        if ( allowExtended )
-        {
-            Preconditions.checkArgument( b.length <= ( Integer.MAX_VALUE & 0x1FFF9A ), "Cannot send array longer than 2097050 (got %s bytes)", b.length );
-        } else
-        {
-            Preconditions.checkArgument( b.length <= Short.MAX_VALUE, "Cannot send array longer than Short.MAX_VALUE (got %s bytes)", b.length );
-        }
-        // Write a 2 or 3 byte number that represents the length of the packet. (3 byte "shorts" for Forge only)
-        // No vanilla packet should give a 3 byte packet, this method will still retain vanilla behaviour.
-        writeVarShort( buf, b.length );
-        buf.writeBytes( b );
-    }
-
-    public static byte[] v17readArray(ByteBuf buf)
-    {
-        // Read in a 2 or 3 byte number that represents the length of the packet. (3 byte "shorts" for Forge only)
-        // No vanilla packet should give a 3 byte packet, this method will still retain vanilla behaviour.
-        int len = readVarShort( buf );
-
-        // (Integer.MAX_VALUE & 0x1FFF9A ) = 2097050 - Forge's current upper limit
-        Preconditions.checkArgument( len <= ( Integer.MAX_VALUE & 0x1FFF9A ), "Cannot receive array longer than 2097050 (got %s bytes)", len );
-
-        byte[] ret = new byte[ len ];
-        buf.readBytes( ret );
-        return ret;
-    }
-}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index ee2317e8..0c334afc 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -3,6 +3,8 @@ package net.md_5.bungee.protocol;
 import net.md_5.bungee.protocol.packet.BossBar;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClearTitles;
+import net.md_5.bungee.protocol.packet.ClientChat;
+import net.md_5.bungee.protocol.packet.ClientCommand;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.ClientStatus;
 import net.md_5.bungee.protocol.packet.Commands;
@@ -25,15 +27,19 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
+import net.md_5.bungee.protocol.packet.PlayerListItemUpdate;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
 import net.md_5.bungee.protocol.packet.ScoreboardObjective;
 import net.md_5.bungee.protocol.packet.ScoreboardScore;
+import net.md_5.bungee.protocol.packet.ServerData;
 import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.StatusRequest;
 import net.md_5.bungee.protocol.packet.StatusResponse;
 import net.md_5.bungee.protocol.packet.Subtitle;
+import net.md_5.bungee.protocol.packet.SystemChat;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.protocol.packet.Team;
@@ -80,6 +86,18 @@ public abstract class AbstractPacketHandler
     {
     }
 
+    public void handle(ClientChat chat) throws Exception
+    {
+    }
+
+    public void handle(SystemChat chat) throws Exception
+    {
+    }
+
+    public void handle(ClientCommand command) throws Exception
+    {
+    }
+
     public void handle(Respawn respawn) throws Exception
     {
     }
@@ -100,6 +118,14 @@ public abstract class AbstractPacketHandler
     {
     }
 
+    public void handle(PlayerListItemRemove playerListItem) throws Exception
+    {
+    }
+
+    public void handle(PlayerListItemUpdate playerListItem) throws Exception
+    {
+    }
+
     public void handle(PlayerListHeaderFooter playerListHeaderFooter) throws Exception
     {
     }
@@ -196,6 +222,10 @@ public abstract class AbstractPacketHandler
     {
     }
 
+    public void handle(ServerData serverData) throws Exception
+    {
+    }
+
     // Waterfall start
     public void handle(EntityEffect entityEffect) throws Exception
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ChatChain.java b/protocol/src/main/java/net/md_5/bungee/protocol/ChatChain.java
new file mode 100644
index 00000000..7cc79e4f
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ChatChain.java
@@ -0,0 +1,82 @@
+package net.md_5.bungee.protocol;
+
+import com.google.common.base.Preconditions;
+import io.netty.buffer.ByteBuf;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.UUID;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class ChatChain extends DefinedPacket
+{
+
+    private List<ChainLink> seen;
+    private List<ChainLink> received;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        seen = readLinks( buf );
+        if ( buf.readBoolean() )
+        {
+            received = readLinks( buf );
+        }
+    }
+
+    private static List<ChainLink> readLinks(ByteBuf buf)
+    {
+        int cnt = readVarInt( buf );
+        Preconditions.checkArgument( cnt <= 5, "Too many entries" );
+        List<ChainLink> chain = new LinkedList<>();
+        for ( int i = 0; i < cnt; i++ )
+        {
+            chain.add( new ChainLink( readUUID( buf ), readArray( buf ) ) );
+        }
+        return chain;
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeLinks( seen, buf );
+        if ( received != null )
+        {
+            buf.writeBoolean( true );
+            writeLinks( received, buf );
+        } else
+        {
+            buf.writeBoolean( false );
+        }
+    }
+
+    private static void writeLinks(List<ChainLink> links, ByteBuf buf)
+    {
+        writeVarInt( links.size(), buf );
+        for ( ChainLink link : links )
+        {
+            writeUUID( link.sender, buf );
+            writeArray( link.signature, buf );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        throw new UnsupportedOperationException( "Not supported." );
+    }
+
+    @Data
+    public static class ChainLink
+    {
+
+        private final UUID sender;
+        private final byte[] signature;
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 93d17f6b..59f2cb73 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -9,6 +9,9 @@ import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.EnumSet;
 import java.util.List;
 import java.util.UUID;
 import lombok.RequiredArgsConstructor;
@@ -24,12 +27,22 @@ public abstract class DefinedPacket
     private static final BadPacketException NO_MORE_BYTES_EXCEPTION = new BadPacketException("No more bytes reading varint");
     public static void writeString(String s, ByteBuf buf)
     {
-        if ( s.length() > Short.MAX_VALUE )
+        writeString( s, buf, Short.MAX_VALUE );
+    }
+
+    public static void writeString(String s, ByteBuf buf, int maxLength)
+    {
+        if ( s.length() > maxLength )
         {
-            throw new OverflowPacketException( String.format( "Cannot send string longer than Short.MAX_VALUE (got %s characters)", s.length() ) );
+            throw new OverflowPacketException( "Cannot send string longer than " + maxLength + " (got " + s.length() + " characters)" );
         }
 
         byte[] b = s.getBytes( Charsets.UTF_8 );
+        if ( b.length > maxLength * 3 )
+        {
+            throw new OverflowPacketException( "Cannot send string longer than " + ( maxLength * 3 ) + " (got " + b.length + " bytes)" );
+        }
+
         writeVarInt( b.length, buf );
         buf.writeBytes( b );
     }
@@ -42,44 +55,29 @@ public abstract class DefinedPacket
     public static String readString(ByteBuf buf, int maxLen)
     {
         int len = readVarInt( buf );
-        if ( len > maxLen * 4 )
+        if ( len > maxLen * 3 )
         {
             if(!MinecraftDecoder.DEBUG) throw STRING_TOO_MANY_BYTES_EXCEPTION; // Waterfall start: Additional DoS mitigations
-            throw new OverflowPacketException( String.format( "Cannot receive string longer than %d (got %d bytes)", maxLen * 4, len ) );
+            throw new OverflowPacketException( "Cannot receive string longer than " + maxLen * 3 + " (got " + len + " bytes)" );
         }
 
-        byte[] b = new byte[ len ];
-        buf.readBytes( b );
+        String s = buf.toString( buf.readerIndex(), len, Charsets.UTF_8 );
+        buf.readerIndex( buf.readerIndex() + len );
 
-        String s = new String( b, Charsets.UTF_8 );
         if ( s.length() > maxLen )
         {
             if(!MinecraftDecoder.DEBUG) throw STRING_TOO_LONG_EXCEPTION; // Waterfall start: Additional DoS mitigations
-            throw new OverflowPacketException( String.format( "Cannot receive string longer than %d (got %d characters)", maxLen, s.length() ) );
+            throw new OverflowPacketException( "Cannot receive string longer than " + maxLen + " (got " + s.length() + " characters)" );
         }
 
         return s;
     }
 
-    // Waterfall start
-    public static void writeString(String s, final int maxLength, ByteBuf buf)
-    {
-        if ( s.length() > maxLength )
-        {
-            throw new OverflowPacketException( String.format( "Cannot send string longer than %s (got %s characters)", maxLength, s.length() ) );
-        }
-
-        byte[] b = s.getBytes( Charsets.UTF_8 );
-        writeVarInt( b.length, buf );
-        buf.writeBytes( b );
-    }
-    // Waterfall end
-
     public static void writeArray(byte[] b, ByteBuf buf)
     {
         if ( b.length > Short.MAX_VALUE )
         {
-            throw new OverflowPacketException( String.format( "Cannot send byte array longer than Short.MAX_VALUE (got %s bytes)", b.length ) );
+            throw new OverflowPacketException( "Cannot send byte array longer than Short.MAX_VALUE (got " + b.length + " bytes)" );
         }
         writeVarInt( b.length, buf );
         buf.writeBytes( b );
@@ -103,7 +101,7 @@ public abstract class DefinedPacket
         int len = readVarInt( buf );
         if ( len > limit )
         {
-            throw new OverflowPacketException( String.format( "Cannot receive byte array longer than %s (got %s bytes)", limit, len ) );
+            throw new OverflowPacketException( "Cannot receive byte array longer than " + limit + " (got " + len + " bytes)" );
         }
         byte[] ret = new byte[ len ];
         buf.readBytes( ret );
@@ -238,6 +236,73 @@ public abstract class DefinedPacket
         return new UUID( input.readLong(), input.readLong() );
     }
 
+    public static void writeProperties(Property[] properties, ByteBuf buf)
+    {
+        if ( properties == null )
+        {
+            writeVarInt( 0, buf );
+            return;
+        }
+
+        writeVarInt( properties.length, buf );
+        for ( Property prop : properties )
+        {
+            writeString( prop.getName(), buf );
+            writeString( prop.getValue(), buf );
+            if ( prop.getSignature() != null )
+            {
+                buf.writeBoolean( true );
+                writeString( prop.getSignature(), buf );
+            } else
+            {
+                buf.writeBoolean( false );
+            }
+        }
+    }
+
+    public static Property[] readProperties(ByteBuf buf)
+    {
+        Property[] properties = new Property[ DefinedPacket.readVarInt( buf ) ];
+        for ( int j = 0; j < properties.length; j++ )
+        {
+            String name = readString( buf );
+            String value = readString( buf );
+            if ( buf.readBoolean() )
+            {
+                properties[j] = new Property( name, value, DefinedPacket.readString( buf ) );
+            } else
+            {
+                properties[j] = new Property( name, value );
+            }
+        }
+
+        return properties;
+    }
+
+    public static void writePublicKey(PlayerPublicKey publicKey, ByteBuf buf)
+    {
+        if ( publicKey != null )
+        {
+            buf.writeBoolean( true );
+            buf.writeLong( publicKey.getExpiry() );
+            writeArray( publicKey.getKey(), buf );
+            writeArray( publicKey.getSignature(), buf );
+        } else
+        {
+            buf.writeBoolean( false );
+        }
+    }
+
+    public static PlayerPublicKey readPublicKey(ByteBuf buf)
+    {
+        if ( buf.readBoolean() )
+        {
+            return new PlayerPublicKey( buf.readLong(), readArray( buf, 512 ), readArray( buf, 4096 ) );
+        }
+
+        return null;
+    }
+
     public static Tag readTag(ByteBuf input)
     {
         Tag tag = NamedTag.read( new DataInputStream( new ByteBufInputStream( input ) ) );
@@ -256,6 +321,53 @@ public abstract class DefinedPacket
         }
     }
 
+    public static <E extends Enum<E>> void writeEnumSet(EnumSet<E> enumset, Class<E> oclass, ByteBuf buf)
+    {
+        E[] enums = oclass.getEnumConstants();
+        BitSet bits = new BitSet( enums.length );
+
+        for ( int i = 0; i < enums.length; ++i )
+        {
+            bits.set( i, enumset.contains( enums[i] ) );
+        }
+
+        writeFixedBitSet( bits, enums.length, buf );
+    }
+
+    public static <E extends Enum<E>> EnumSet<E> readEnumSet(Class<E> oclass, ByteBuf buf)
+    {
+        E[] enums = oclass.getEnumConstants();
+        BitSet bits = readFixedBitSet( enums.length, buf );
+        EnumSet<E> set = EnumSet.noneOf( oclass );
+
+        for ( int i = 0; i < enums.length; ++i )
+        {
+            if ( bits.get( i ) )
+            {
+                set.add( enums[i] );
+            }
+        }
+
+        return set;
+    }
+
+    public static BitSet readFixedBitSet(int i, ByteBuf buf)
+    {
+        byte[] bits = new byte[ ( i + 8 ) >> 3 ];
+        buf.readBytes( bits );
+
+        return BitSet.valueOf( bits );
+    }
+
+    public static void writeFixedBitSet(BitSet bits, int size, ByteBuf buf)
+    {
+        if ( bits.length() > size )
+        {
+            throw new OverflowPacketException( "BitSet too large (expected " + size + " got " + bits.size() + ")" );
+        }
+        buf.writeBytes( Arrays.copyOf( bits.toByteArray(), ( size + 8 ) >> 3 ) );
+    }
+
     public void read(ByteBuf buf)
     {
         throw new UnsupportedOperationException( "Packet must implement read method" );
@@ -266,11 +378,6 @@ public abstract class DefinedPacket
         read( buf );
     }
 
-    public void read0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        read( buf, direction, protocolVersion );
-    }
-
     public void write(ByteBuf buf)
     {
         throw new UnsupportedOperationException( "Packet must implement write method" );
@@ -281,11 +388,6 @@ public abstract class DefinedPacket
         write( buf );
     }
 
-    public void write0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        write( buf, direction, protocolVersion );
-    }
-
     public abstract void handle(AbstractPacketHandler handler) throws Exception;
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Location.java b/protocol/src/main/java/net/md_5/bungee/protocol/Location.java
new file mode 100644
index 00000000..e6a9f894
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Location.java
@@ -0,0 +1,11 @@
+package net.md_5.bungee.protocol;
+
+import lombok.Data;
+
+@Data
+public class Location
+{
+
+    private final String dimension;
+    private final long pos;
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 52f60276..ac83e325 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -57,7 +57,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             {
                 packetTypeInfo = packet.getClass();
                 doLengthSanityChecks(in, packet, prot.getDirection(), packetId); // Waterfall: Additional DoS mitigations
-                packet.read0( in, prot.getDirection(), protocolVersion );
+                packet.read( in, prot.getDirection(), protocolVersion );
 
                 if ( in.isReadable() )
                 {
@@ -66,7 +66,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
                         throw PACKET_NOT_READ_TO_END;
                     }
                     // Waterfall end
-                    throw new BadPacketException( "Did not read all bytes from packet " + packet.getClass() + " " + packetId + " Protocol " + protocol + " Direction " + prot.getDirection() );
+                    throw new BadPacketException( "Packet " + protocol + ":" + prot.getDirection() + "/" + packetId + " (" + packet.getClass().getSimpleName() + ") larger than expected, extra bytes: " + in.readableBytes() );
                 }
             } else
             {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index 9aac7ca9..d4b03843 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -21,6 +21,6 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
     {
         Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
-        msg.write0( out, prot.getDirection(), protocolVersion );
+        msg.write( out, prot.getDirection(), protocolVersion );
     }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/PlayerPublicKey.java b/protocol/src/main/java/net/md_5/bungee/protocol/PlayerPublicKey.java
new file mode 100644
index 00000000..7f2cc798
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/PlayerPublicKey.java
@@ -0,0 +1,12 @@
+package net.md_5.bungee.protocol;
+
+import lombok.Data;
+
+@Data
+public class PlayerPublicKey
+{
+
+    private final long expiry;
+    private final byte[] key;
+    private final byte[] signature;
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Property.java b/protocol/src/main/java/net/md_5/bungee/protocol/Property.java
new file mode 100644
index 00000000..2e0b1d73
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Property.java
@@ -0,0 +1,19 @@
+package net.md_5.bungee.protocol;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+@Data
+@AllArgsConstructor
+public class Property
+{
+
+    private String name;
+    private String value;
+    private String signature;
+
+    public Property(String name, String value)
+    {
+        this( name, value, null );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 2cc0f825..2357f380 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -2,16 +2,20 @@ package net.md_5.bungee.protocol;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Iterables;
+
+import gnu.trove.impl.Constants;
 import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.TObjectIntMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 import gnu.trove.map.hash.TObjectIntHashMap;
-import java.lang.reflect.Constructor;
+import java.util.function.Supplier;
 import lombok.Data;
 import lombok.Getter;
 import net.md_5.bungee.protocol.packet.BossBar;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClearTitles;
+import net.md_5.bungee.protocol.packet.ClientChat;
+import net.md_5.bungee.protocol.packet.ClientCommand;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
@@ -31,15 +35,19 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
+import net.md_5.bungee.protocol.packet.PlayerListItemUpdate;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
 import net.md_5.bungee.protocol.packet.ScoreboardObjective;
 import net.md_5.bungee.protocol.packet.ScoreboardScore;
+import net.md_5.bungee.protocol.packet.ServerData;
 import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.StatusRequest;
 import net.md_5.bungee.protocol.packet.StatusResponse;
 import net.md_5.bungee.protocol.packet.Subtitle;
+import net.md_5.bungee.protocol.packet.SystemChat;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.protocol.packet.Team;
@@ -57,8 +65,8 @@ public enum Protocol
         {
             TO_SERVER.registerPacket(
                     Handshake.class,
-                    Handshake::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ) // Travertine
+                    Handshake::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
         }
     },
@@ -69,41 +77,47 @@ public enum Protocol
         {
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
-                    KeepAlive::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ), // Travertine
+                    KeepAlive::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x20 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x21 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x20 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x21 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x21 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x1E ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x20 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x1F )
             );
             TO_CLIENT.registerPacket(
                     Login.class,
-                    Login::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ), // Travertine
+                    Login::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x23 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x25 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x26 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x25 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x24 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x26 )
-            );
-            TO_CLIENT.registerPacket(
-                    Chat.class,
-                    Chat::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x02 ), // Travertine
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x26 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x23 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x25 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x24 )
+            );
+            TO_CLIENT.registerPacket( Chat.class,
+                    Chat::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_19, -1 )
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
-                    Respawn::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x07 ), // Travertine
+                    Respawn::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x07 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x33 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x34 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x35 ),
@@ -112,33 +126,38 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_15, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x3A ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x39 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x3D )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x3D ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x3B ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x3E ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x3D )
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
-                    BossBar::new, // Waterfall - speed up packet construction
+                    BossBar::new,
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x0D ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0D )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x0A )
             );
             // Waterfall start
             TO_CLIENT.registerPacket(
                     EntityEffect.class,
-                    EntityEffect::new, // Waterfall - speed up packet construction
-                    map(ProtocolConstants.MINECRAFT_1_7_2, 0x1D), // Travertine
-                    map(ProtocolConstants.MINECRAFT_1_9, Integer.MIN_VALUE)
+                    EntityEffect::new,
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x1D),
+                    map(ProtocolConstants.MINECRAFT_1_9, -1)
             );
             TO_CLIENT.registerPacket(
                     EntityRemoveEffect.class,
-                    EntityRemoveEffect::new, // Waterfall - speed up packet construction
-                    map(ProtocolConstants.MINECRAFT_1_7_2, 0x1E), // Travertine
-                    map(ProtocolConstants.MINECRAFT_1_9, Integer.MIN_VALUE)
+                    EntityRemoveEffect::new,
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x1E),
+                    map(ProtocolConstants.MINECRAFT_1_9, -1)
             );
             // Waterfall end
             TO_CLIENT.registerPacket(
                     PlayerListItem.class, // PlayerInfo
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x38 ), // Travertine
+                    PlayerListItem::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x38 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x2D ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x2E ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x30 ),
@@ -146,117 +165,159 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_15, 0x34 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x33 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x32 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x36 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x36 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x34 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x37 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, -1 )
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
-                    TabCompleteResponse::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3A ), // Travertine
+                    TabCompleteResponse::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3A ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x11 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x11 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x0E ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0D )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
-                    ScoreboardObjective::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3B ), // Travertine
+                    ScoreboardObjective::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x41 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x49 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x4A ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x53 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x53 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x56 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x54 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardScore.class,
-                    ScoreboardScore::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3C ), // Travertine
+                    ScoreboardScore::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3C ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x44 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4C ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x4D ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x56 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x56 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x59 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x57 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardDisplay.class,
-                    ScoreboardDisplay::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3D ), // Travertine
+                    ScoreboardDisplay::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3D ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x38 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x3A ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x3E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x43 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x4C )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x4C ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x4F ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x4D )
             );
             TO_CLIENT.registerPacket(
                     Team.class,
-                    Team::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3E ), // Travertine
+                    Team::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3E ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x41 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x43 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x44 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4B ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x4C ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x55 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x55 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x58 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x56 )
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
-                    PluginMessage::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x3F ), // Travertine
+                    PluginMessage::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x19 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x18 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x18 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x15 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x16 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x15 )
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
-                    Kick::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x40 ), // Travertine
+                    Kick::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1A )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x17 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x17 )
             );
             TO_CLIENT.registerPacket(
                     Title.class,
-                    Title::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x45 ), // Travertine
+                    Title::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x4B ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4F ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x50 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x4F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x59 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x59 ),
+                    map( ProtocolConstants.MINECRAFT_1_18, 0x5A ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x5D ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x5B )
             );
-            TO_CLIENT.registerPacket( ClearTitles.class,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x10 )
+            TO_CLIENT.registerPacket(
+                    ClearTitles.class,
+                    ClearTitles::new,
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x10 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0C )
             );
             TO_CLIENT.registerPacket(
                     Subtitle.class,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x57 )
+                    Subtitle::new,
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x57 ),
+                    map( ProtocolConstants.MINECRAFT_1_18, 0x58 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x5B ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x59 )
+            );
+            TO_CLIENT.registerPacket(
+                    TitleTimes.class,
+                    TitleTimes::new,
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x5A ),
+                    map( ProtocolConstants.MINECRAFT_1_18, 0x5B ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x5E ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x5C )
             );
-            TO_CLIENT.registerPacket( TitleTimes.class,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x5A )
+            TO_CLIENT.registerPacket(
+                    SystemChat.class,
+                    SystemChat::new,
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x5F ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x62 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x60 )
             );
             TO_CLIENT.registerPacket(
                     PlayerListHeaderFooter.class,
-                    PlayerListHeaderFooter::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x47 ), // Travertine
+                    PlayerListHeaderFooter::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_9_4, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x49 ),
@@ -265,96 +326,152 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x53 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x54 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x53 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x5E )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x5E ),
+                    map( ProtocolConstants.MINECRAFT_1_18, 0x5F ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x60 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x63 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x61 )
             );
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
-                    EntityStatus::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x1A ), // Travertine
+                    EntityStatus::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1C ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1C ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1B )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1B ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x18 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x19 )
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
-                    Commands::new, // Waterfall - speed up packet construction
+                    Commands::new,
                     map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x12 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x12 )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x12 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0E )
             );
             TO_CLIENT.registerPacket(
                     GameState.class,
-                    GameState::new, // Waterfall - speed up packet construction
+                    GameState::new,
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1E ),
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x1D ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1E )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1E ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x1B ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x1D ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x1C )
             );
             TO_CLIENT.registerPacket(
                     ViewDistance.class,
-                    ViewDistance::new, // Waterfall - speed up packet construction
+                    ViewDistance::new,
                     map( ProtocolConstants.MINECRAFT_1_14, 0x41 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x4A )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x4A ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x49 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x4C ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x4B )
+            );
+            TO_CLIENT.registerPacket(
+                    ServerData.class,
+                    ServerData::new,
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x3F ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x42 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x41 )
+            );
+            TO_CLIENT.registerPacket(
+                    PlayerListItemRemove.class,
+                    PlayerListItemRemove::new,
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x35 )
+            );
+            TO_CLIENT.registerPacket(
+                    PlayerListItemUpdate.class,
+                    PlayerListItemUpdate::new,
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x36 )
             );
 
             TO_SERVER.registerPacket(
                     KeepAlive.class,
-                    KeepAlive::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ), // Travertine
+                    KeepAlive::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0C ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F )
-            );
-            TO_SERVER.registerPacket(
-                    Chat.class,
-                    Chat::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ), // Travertine
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x11 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x12 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x11 )
+            );
+            TO_SERVER.registerPacket( Chat.class,
+                    Chat::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x03 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x03 )
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x03 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, -1 )
+            );
+            TO_SERVER.registerPacket(
+                    ClientCommand.class,
+                    ClientCommand::new,
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x03 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x04 )
+            );
+            TO_SERVER.registerPacket(
+                    ClientChat.class,
+                    ClientChat::new,
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x04 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x05 )
             );
             TO_SERVER.registerPacket(
                     TabCompleteRequest.class,
-                    TabCompleteRequest::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x14 ), // Travertine
+                    TabCompleteRequest::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x14 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x06 )
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x06 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x08 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x09 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x08 )
             );
             TO_SERVER.registerPacket(
                     ClientSettings.class,
-                    ClientSettings::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x15 ), // Travertine
+                    ClientSettings::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x05 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x05 )
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x05 ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x07 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x08 ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x07 )
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
-                    PluginMessage::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x17 ), // Travertine
+                    PluginMessage::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x17 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x09 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x09 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0B ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0A )
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0A ),
+                    map( ProtocolConstants.MINECRAFT_1_19, 0x0C ),
+                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0C )
             );
         }
     },
@@ -365,24 +482,24 @@ public enum Protocol
         {
             TO_CLIENT.registerPacket(
                     StatusResponse.class,
-                    StatusResponse::new, // Waterfall - speed up packet construction
-                            map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ) // Travertine
+                    StatusResponse::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     PingPacket.class,
-                    PingPacket::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ) // Travertine
+                    PingPacket::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
 
             TO_SERVER.registerPacket(
                     StatusRequest.class,
-                    StatusRequest::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ) // Travertine
+                    StatusRequest::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     PingPacket.class,
-                    PingPacket::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ) // Travertine
+                    PingPacket::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
         }
     },
@@ -393,43 +510,43 @@ public enum Protocol
         {
             TO_CLIENT.registerPacket(
                     Kick.class,
-                    Kick::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ) // Travertine
+                    Kick::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     EncryptionRequest.class,
-                    EncryptionRequest::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ) // Travertine
+                    EncryptionRequest::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
-                    LoginSuccess::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x02 ) // Travertine
+                    LoginSuccess::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
             );
             TO_CLIENT.registerPacket(
                     SetCompression.class,
-                    SetCompression::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x03 ) // Travertine
+                    SetCompression::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x03 )
             );
             TO_CLIENT.registerPacket(
                     LoginPayloadRequest.class,
-                    LoginPayloadRequest::new, // Waterfall - speed up packet construction
+                    LoginPayloadRequest::new,
                     map( ProtocolConstants.MINECRAFT_1_13, 0x04 )
             );
 
             TO_SERVER.registerPacket(
                     LoginRequest.class,
-                    LoginRequest::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x00 ) // Travertine
+                    LoginRequest::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     EncryptionResponse.class,
-                    EncryptionResponse::new, // Waterfall - speed up packet construction
-                    map( ProtocolConstants.MINECRAFT_1_7_2, 0x01 ) // Travertine
+                    EncryptionResponse::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
             TO_SERVER.registerPacket(
                     LoginPayloadResponse.class,
-                    LoginPayloadResponse::new, // Waterfall - speed up packet construction
+                    LoginPayloadResponse::new,
                     map( ProtocolConstants.MINECRAFT_1_13, 0x02 )
             );
         }
@@ -480,7 +597,8 @@ public enum Protocol
 
         private final int protocolVersion;
         private final TObjectIntMap<Class<? extends DefinedPacket>> packetMap = new TObjectIntHashMap<>( MAX_PACKET_ID );
-        private final java.util.function.Supplier<? extends DefinedPacket>[] packetConstructors = new java.util.function.Supplier[ MAX_PACKET_ID ]; // Waterfall - speed up packet construction
+        @SuppressWarnings("unchecked")
+        private final Supplier<? extends DefinedPacket>[] packetConstructors = new Supplier[ MAX_PACKET_ID ];
     }
 
     @Data
@@ -545,87 +663,49 @@ public enum Protocol
             }
             if ( !hasPacket(id, supportsForge) )
             {
-                if ( ProtocolConstants.isBeforeOrEq( version, ProtocolConstants.MINECRAFT_1_7_6 ) ) {
-                    return null;
-                } else {
-                    throw new BadPacketException( "Packet with id " + id + " outside of range " );
-                }
+                throw new BadPacketException( "Packet with id " + id + " outside of range" );
             }
 
-            java.util.function.Supplier<? extends DefinedPacket> constructor = protocolData.packetConstructors[id]; // Waterfall - speed up packet construction
-            try
-            {
-                return ( constructor == null ) ? null : constructor.get(); // Waterfall - speed up packet construction
-            } catch ( Exception ex ) // Waterfall - speed up packet construction
-            {
-                throw new BadPacketException( "Could not construct packet with id " + id, ex );
-            }
+            Supplier<? extends DefinedPacket> constructor = protocolData.packetConstructors[id];
+            return ( constructor == null ) ? null : constructor.get();
         }
 
-        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings) // Waterfall - speed up packet construction
+        private void registerPacket(Class<? extends DefinedPacket> packetClass, Supplier<? extends DefinedPacket> constructor, ProtocolMapping... mappings)
         {
-            // Waterfall start - speed up packet construction
-            /*
-            try
+            int mappingIndex = 0;
+            ProtocolMapping mapping = mappings[mappingIndex];
+            for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
             {
-                Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor();
-                */ // Waterfall end
+                if ( protocol < mapping.protocolVersion )
+                {
+                    // This is a new packet, skip it till we reach the next protocol
+                    continue;
+                }
 
-                int mappingIndex = 0;
-                ProtocolMapping mapping = mappings[mappingIndex];
-                for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
+                if ( mapping.protocolVersion < protocol && mappingIndex + 1 < mappings.length )
                 {
-                    if ( protocol < mapping.protocolVersion )
-                    {
-                        // This is a new packet, skip it till we reach the next protocol
-                        continue;
-                    }
+                    // Mapping is non current, but the next one may be ok
+                    ProtocolMapping nextMapping = mappings[mappingIndex + 1];
 
-                    if ( mapping.protocolVersion < protocol && mappingIndex + 1 < mappings.length )
+                    if ( nextMapping.protocolVersion == protocol )
                     {
-                        // Mapping is non current, but the next one may be ok
-                        ProtocolMapping nextMapping = mappings[mappingIndex + 1];
-                        if ( nextMapping.protocolVersion == protocol )
-                        {
-                            Preconditions.checkState( nextMapping.packetID != mapping.packetID, "Duplicate packet mapping (%s, %s)", mapping.protocolVersion, nextMapping.protocolVersion );
-
-                            mapping = nextMapping;
-                            mappingIndex++;
-                        }
+                        Preconditions.checkState( nextMapping.packetID != mapping.packetID, "Duplicate packet mapping (%s, %s)", mapping.protocolVersion, nextMapping.protocolVersion );
+
+                        mapping = nextMapping;
+                        mappingIndex++;
                     }
+                }
 
-                    if (mapping.packetID != Integer.MIN_VALUE) { // Waterfall
-                    ProtocolData data = protocols.get( protocol );
-                    data.packetMap.put( packetClass, mapping.packetID );
-                    data.packetConstructors[mapping.packetID] = constructor;
-                    } // Waterfall
+                if ( mapping.packetID < 0 )
+                {
+                    break;
                 }
-            // Waterfall start - speed up packet construction
-            /*
-            } catch ( NoSuchMethodException ex )
-            {
-                throw new BadPacketException( "No NoArgsConstructor for packet class " + packetClass );
-            }
-             */ // Waterfall end
-        }
-        // Waterfall start - speed up packet construction (backwards compat)
-        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, ProtocolMapping... mappings) {
-            java.util.function.Supplier<P> packetSupplier;
-            try {
-                Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor();
-                packetSupplier = () -> {
-                    try {
-                        return (P) constructor.newInstance();
-                    } catch (Exception e) {
-                        throw new RuntimeException(e);
-                    }
-                };
-            } catch (ReflectiveOperationException e) {
-                throw new BadPacketException( "No NoArgsConstructor for packet class " + packetClass );
+
+                ProtocolData data = protocols.get( protocol );
+                data.packetMap.put( packetClass, mapping.packetID );
+                data.packetConstructors[mapping.packetID] = constructor;
             }
-            registerPacket(packetClass, packetSupplier, mappings);
         }
-        // Waterfall end
 
         final int getId(Class<? extends DefinedPacket> packet, int version)
         {
@@ -635,9 +715,12 @@ public enum Protocol
             {
                 throw new BadPacketException( "Unsupported protocol version" );
             }
-            Preconditions.checkArgument( protocolData.packetMap.containsKey( packet ), "Cannot get ID for packet %s in phase %s with direction %s", packet, protocolPhase, direction );
+            // Waterfall start
+            final int packetId = protocolData.packetMap.get(packet);
+            Preconditions.checkArgument( packetId >= 0, "Cannot get ID for packet %s in phase %s with direction %s for protocol version %s", packet, protocolPhase, direction, version ); // Waterfall - add version
 
-            return protocolData.packetMap.get( packet );
+            return packetId;
+            // Waterfall end
         }
     }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index b6c37497..85f1b0b4 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -6,8 +6,7 @@ import java.util.List;
 public class ProtocolConstants
 {
 
-    public static final int MINECRAFT_1_7_2 = 4;
-    public static final int MINECRAFT_1_7_6 = 5;
+    private static final boolean SNAPSHOT_SUPPORT = Boolean.getBoolean( "net.md_5.bungee.protocol.snapshot" );
     public static final int MINECRAFT_1_8 = 47;
     public static final int MINECRAFT_1_9 = 107;
     public static final int MINECRAFT_1_9_1 = 108;
@@ -36,13 +35,18 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_16_3 = 753;
     public static final int MINECRAFT_1_16_4 = 754;
     public static final int MINECRAFT_1_17 = 755;
+    public static final int MINECRAFT_1_17_1 = 756;
+    public static final int MINECRAFT_1_18 = 757;
+    public static final int MINECRAFT_1_18_2 = 758;
+    public static final int MINECRAFT_1_19 = 759;
+    public static final int MINECRAFT_1_19_1 = 760;
+    public static final int MINECRAFT_1_19_3 = 761;
     public static final List<String> SUPPORTED_VERSIONS;
     public static final List<Integer> SUPPORTED_VERSION_IDS;
 
     static
     {
         ImmutableList.Builder<String> supportedVersions = ImmutableList.<String>builder().add(
-                "1.7.x",
                 "1.8.x",
                 "1.9.x",
                 "1.10.x",
@@ -52,11 +56,11 @@ public class ProtocolConstants
                 "1.14.x",
                 "1.15.x",
                 "1.16.x",
-                "1.17"
+                "1.17.x",
+                "1.18.x",
+                "1.19.x"
         );
         ImmutableList.Builder<Integer> supportedVersionIds = ImmutableList.<Integer>builder().add(
-                ProtocolConstants.MINECRAFT_1_7_2,
-                ProtocolConstants.MINECRAFT_1_7_6,
                 ProtocolConstants.MINECRAFT_1_8,
                 ProtocolConstants.MINECRAFT_1_9,
                 ProtocolConstants.MINECRAFT_1_9_1,
@@ -84,9 +88,21 @@ public class ProtocolConstants
                 ProtocolConstants.MINECRAFT_1_16_2,
                 ProtocolConstants.MINECRAFT_1_16_3,
                 ProtocolConstants.MINECRAFT_1_16_4,
-                ProtocolConstants.MINECRAFT_1_17
+                ProtocolConstants.MINECRAFT_1_17,
+                ProtocolConstants.MINECRAFT_1_17_1,
+                ProtocolConstants.MINECRAFT_1_18,
+                ProtocolConstants.MINECRAFT_1_18_2,
+                ProtocolConstants.MINECRAFT_1_19,
+                ProtocolConstants.MINECRAFT_1_19_1,
+                ProtocolConstants.MINECRAFT_1_19_3
         );
 
+        if ( SNAPSHOT_SUPPORT )
+        {
+            // supportedVersions.add( "1.19.x" );
+            // supportedVersionIds.add( ProtocolConstants.MINECRAFT_1_19 );
+        }
+
         SUPPORTED_VERSIONS = supportedVersions.build();
         SUPPORTED_VERSION_IDS = supportedVersionIds.build();
     }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/SeenMessages.java b/protocol/src/main/java/net/md_5/bungee/protocol/SeenMessages.java
new file mode 100644
index 00000000..9f0b452a
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/SeenMessages.java
@@ -0,0 +1,39 @@
+package net.md_5.bungee.protocol;
+
+import io.netty.buffer.ByteBuf;
+import java.util.BitSet;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SeenMessages extends DefinedPacket
+{
+
+    private int offset;
+    private BitSet acknowledged;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        offset = DefinedPacket.readVarInt( buf );
+        acknowledged = DefinedPacket.readFixedBitSet( 20, buf );
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        DefinedPacket.writeVarInt( offset, buf );
+        DefinedPacket.writeFixedBitSet( acknowledged, 20, buf );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        throw new UnsupportedOperationException( "Not supported." );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index a07e25b1..c0d37142 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -6,12 +6,10 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.ByteToMessageDecoder;
 import io.netty.handler.codec.CorruptedFrameException;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicLong;
 
 public class Varint21FrameDecoder extends ByteToMessageDecoder
 {
 
-    private AtomicLong lastEmptyPacket = new AtomicLong(0); // Travertine
     private static boolean DIRECT_WARNING;
 
     @Override
@@ -46,15 +44,7 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
                 // Waterfall end
                 if ( false && length == 0) // Waterfall - ignore
                 {
-                    // Travertine start - vanilla 1.7 client sometimes sends empty packets.
-                    long currentTime = System.currentTimeMillis();
-                    long lastEmptyPacket = this.lastEmptyPacket.getAndSet(currentTime);
-
-                    if (currentTime - lastEmptyPacket < 50L)
-                    {
-                        throw new CorruptedFrameException( "Too many empty packets" );
-                    }
-                    // Travertine end
+                    throw new CorruptedFrameException( "Empty Packet!" );
                 }
 
                 if ( in.readableBytes() < length )
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
index a70ef1f9..dc986609 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import java.util.UUID;
 import lombok.Data;
@@ -13,7 +12,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @Data
 @NoArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class Chat extends MultiVersionPacketV17
+public class Chat extends DefinedPacket
 {
 
     private static final UUID EMPTY_UUID = new UUID( 0L, 0L );
@@ -37,18 +36,11 @@ public class Chat extends MultiVersionPacketV17
         this.position = position;
         this.sender = sender == null ? EMPTY_UUID : sender;
     }
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        message = readString( buf );
-    }
-    // Travertine end
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        message = readString( buf, ( direction == ProtocolConstants.Direction.TO_CLIENT ) ? 262144 : 256 );
+        message = readString( buf, ( direction == ProtocolConstants.Direction.TO_CLIENT ) ? 262144 : ( protocolVersion >= ProtocolConstants.MINECRAFT_1_11 ? 256 : 100 ) );
         if ( direction == ProtocolConstants.Direction.TO_CLIENT )
         {
             position = buf.readByte();
@@ -59,23 +51,10 @@ public class Chat extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( message, buf );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        // Waterfall start
-        if (direction == ProtocolConstants.Direction.TO_CLIENT) {
-            writeString(this.message, Short.MAX_VALUE * 8 + 8, buf);
-        } else
-        // Waterfall end
-        writeString( message, buf );
+        writeString( message, buf, ( direction == ProtocolConstants.Direction.TO_CLIENT ) ? 262144 : ( protocolVersion >= ProtocolConstants.MINECRAFT_1_11 ? 256 : 100 ) );
         if ( direction == ProtocolConstants.Direction.TO_CLIENT )
         {
             buf.writeByte( position );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientChat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientChat.java
new file mode 100644
index 00000000..105c8276
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientChat.java
@@ -0,0 +1,97 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ChatChain;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.SeenMessages;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class ClientChat extends DefinedPacket
+{
+
+    private String message;
+    private long timestamp;
+    private long salt;
+    private byte[] signature;
+    private boolean signedPreview;
+    private ChatChain chain;
+    private SeenMessages seenMessages;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        message = readString( buf, 256 );
+        timestamp = buf.readLong();
+        salt = buf.readLong();
+
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            if ( buf.readBoolean() )
+            {
+                signature = new byte[ 256 ];
+                buf.readBytes( signature );
+            }
+        } else
+        {
+            signature = readArray( buf );
+        }
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            signedPreview = buf.readBoolean();
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            seenMessages = new SeenMessages();
+            seenMessages.read( buf, direction, protocolVersion );
+        } else if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            chain = new ChatChain();
+            chain.read( buf, direction, protocolVersion );
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( message, buf );
+        buf.writeLong( timestamp );
+        buf.writeLong( salt );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            buf.writeBoolean( signature != null );
+            if ( signature != null )
+            {
+                buf.writeBytes( signature );
+            }
+        } else
+        {
+            writeArray( signature, buf );
+        }
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            buf.writeBoolean( signedPreview );
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            seenMessages.write( buf, direction, protocolVersion );
+        } else if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            chain.write( buf, direction, protocolVersion );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientCommand.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientCommand.java
new file mode 100644
index 00000000..9b7435fb
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientCommand.java
@@ -0,0 +1,111 @@
+package net.md_5.bungee.protocol.packet;
+
+import com.google.common.base.Preconditions;
+import io.netty.buffer.ByteBuf;
+import java.util.HashMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ChatChain;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.SeenMessages;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class ClientCommand extends DefinedPacket
+{
+
+    private String command;
+    private long timestamp;
+    private long salt;
+    private Map<String, byte[]> signatures;
+    private boolean signedPreview;
+    private ChatChain chain;
+    private SeenMessages seenMessages;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        command = readString( buf );
+        timestamp = buf.readLong();
+        salt = buf.readLong();
+
+        int cnt = readVarInt( buf );
+        Preconditions.checkArgument( cnt <= 8, "Too many signatures" );
+        signatures = new HashMap<>( cnt );
+        for ( int i = 0; i < cnt; i++ )
+        {
+            String name = readString( buf, 16 );
+            byte[] signature;
+
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+            {
+                signature = new byte[ 256 ];
+                buf.readBytes( signature );
+            } else
+            {
+                signature = readArray( buf );
+            }
+            signatures.put( name, signature );
+        }
+
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            signedPreview = buf.readBoolean();
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            seenMessages = new SeenMessages();
+            seenMessages.read( buf, direction, protocolVersion );
+        } else if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            chain = new ChatChain();
+            chain.read( buf, direction, protocolVersion );
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( command, buf );
+        buf.writeLong( timestamp );
+        buf.writeLong( salt );
+
+        writeVarInt( signatures.size(), buf );
+        for ( Map.Entry<String, byte[]> entry : signatures.entrySet() )
+        {
+            writeString( entry.getKey(), buf );
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+            {
+                buf.writeBytes( entry.getValue() );
+            } else
+            {
+                writeArray( entry.getValue(), buf );
+            }
+        }
+
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            buf.writeBoolean( signedPreview );
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            seenMessages.write( buf, direction, protocolVersion );
+        } else if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            chain.write( buf, direction, protocolVersion );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
index c7b2e310..d7d4e6ab 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
@@ -1,7 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
-import net.md_5.bungee.protocol.DefinedPacket;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -15,7 +13,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class ClientSettings extends MultiVersionPacketV17
+public class ClientSettings extends DefinedPacket
 {
 
     private String locale;
@@ -26,19 +24,7 @@ public class ClientSettings extends MultiVersionPacketV17
     private byte skinParts;
     private int mainHand;
     private boolean disableTextFiltering;
-
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        locale = readString( buf );
-        viewDistance = buf.readByte();
-        chatFlags = buf.readUnsignedByte();
-        chatColours = buf.readBoolean();
-        skinParts = buf.readByte();
-        difficulty = buf.readByte();
-    }
-    // Travertine end
+    private boolean allowServerListing;
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
@@ -56,6 +42,10 @@ public class ClientSettings extends MultiVersionPacketV17
         {
             disableTextFiltering = buf.readBoolean();
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        {
+            allowServerListing = buf.readBoolean();
+        }
     }
 
     @Override
@@ -80,21 +70,12 @@ public class ClientSettings extends MultiVersionPacketV17
         {
             buf.writeBoolean( disableTextFiltering );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        {
+            buf.writeBoolean( allowServerListing );
+        }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( locale, buf );
-        buf.writeByte( viewDistance );
-        buf.writeByte( chatFlags );
-        buf.writeBoolean( chatColours );
-        buf.writeByte( skinParts );
-        buf.writeByte( difficulty );
-    }
-    // Travertine end
-
     @Override
     public void handle(AbstractPacketHandler handler) throws Exception
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
index 26edbca8..80a16f65 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Commands.java
@@ -36,6 +36,7 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -56,7 +57,7 @@ public class Commands extends DefinedPacket
     private RootCommandNode root;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         int nodeCount = readVarInt( buf );
         NetworkNode[] nodes = new NetworkNode[ nodeCount ];
@@ -79,9 +80,7 @@ public class Commands extends DefinedPacket
                     break;
                 case NODE_ARGUMENT:
                     String name = readString( buf );
-                    String parser = readString( buf );
-
-                    argumentBuilder = RequiredArgumentBuilder.argument( name, ArgumentRegistry.read( parser, buf ) );
+                    argumentBuilder = RequiredArgumentBuilder.argument( name, ArgumentRegistry.read( buf, protocolVersion ) );
 
                     if ( ( flags & FLAG_SUGGESTIONS ) != 0 )
                     {
@@ -126,7 +125,7 @@ public class Commands extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         Map<CommandNode, Integer> indexMap = new LinkedHashMap<>();
         Deque<CommandNode> nodeQueue = new ArrayDeque<>();
@@ -210,7 +209,7 @@ public class Commands extends DefinedPacket
                 ArgumentCommandNode argumentNode = (ArgumentCommandNode) node;
 
                 writeString( argumentNode.getName(), buf );
-                ArgumentRegistry.write( argumentNode.getType(), buf );
+                ArgumentRegistry.write( argumentNode.getType(), buf, protocolVersion );
 
                 if ( argumentNode.getCustomSuggestions() != null )
                 {
@@ -308,6 +307,8 @@ public class Commands extends DefinedPacket
     {
 
         private static final Map<String, ArgumentSerializer> PROVIDERS = new HashMap<>();
+        private static final ArgumentSerializer[] IDS_1_19;
+        private static final ArgumentSerializer[] IDS_1_19_3;
         private static final Map<Class<?>, ProperArgumentSerializer<?>> PROPER_PROVIDERS = new HashMap<>();
         //
         private static final ArgumentSerializer<Void> VOID = new ArgumentSerializer<Void>()
@@ -492,89 +493,260 @@ public class Commands extends DefinedPacket
                 writeVarInt( t.getType().ordinal(), buf );
             }
 
+            @Override
+            protected int getIntKey()
+            {
+                return 5;
+            }
+
             @Override
             protected String getKey()
             {
                 return "brigadier:string";
             }
         };
+        private static final ArgumentSerializer<String> RAW_STRING = new ArgumentSerializer<String>()
+        {
+            @Override
+            protected String read(ByteBuf buf)
+            {
+                return DefinedPacket.readString( buf );
+            }
+
+            @Override
+            protected void write(ByteBuf buf, String t)
+            {
+                DefinedPacket.writeString( t, buf );
+            }
+        };
 
         static
         {
-            PROVIDERS.put( "brigadier:bool", VOID );
-            PROVIDERS.put( "brigadier:float", FLOAT );
-            PROVIDERS.put( "brigadier:double", DOUBLE );
-            PROVIDERS.put( "brigadier:integer", INTEGER );
-            PROVIDERS.put( "brigadier:long", LONG );
+            register( "brigadier:bool", VOID );
+            register( "brigadier:float", FLOAT );
+            register( "brigadier:double", DOUBLE );
+            register( "brigadier:integer", INTEGER );
+            register( "brigadier:long", LONG );
 
-            PROVIDERS.put( "brigadier:string", STRING );
+            register( "brigadier:string", STRING );
             PROPER_PROVIDERS.put( StringArgumentType.class, STRING );
 
-            PROVIDERS.put( "minecraft:entity", BYTE );
-            PROVIDERS.put( "minecraft:game_profile", VOID );
-            PROVIDERS.put( "minecraft:block_pos", VOID );
-            PROVIDERS.put( "minecraft:column_pos", VOID );
-            PROVIDERS.put( "minecraft:vec3", VOID );
-            PROVIDERS.put( "minecraft:vec2", VOID );
-            PROVIDERS.put( "minecraft:block_state", VOID );
-            PROVIDERS.put( "minecraft:block_predicate", VOID );
-            PROVIDERS.put( "minecraft:item_stack", VOID );
-            PROVIDERS.put( "minecraft:item_predicate", VOID );
-            PROVIDERS.put( "minecraft:color", VOID );
-            PROVIDERS.put( "minecraft:component", VOID );
-            PROVIDERS.put( "minecraft:message", VOID );
-            PROVIDERS.put( "minecraft:nbt_compound_tag", VOID ); // 1.14
-            PROVIDERS.put( "minecraft:nbt_tag", VOID ); // 1.14
-            PROVIDERS.put( "minecraft:nbt", VOID ); // 1.13
-            PROVIDERS.put( "minecraft:nbt_path", VOID );
-            PROVIDERS.put( "minecraft:objective", VOID );
-            PROVIDERS.put( "minecraft:objective_criteria", VOID );
-            PROVIDERS.put( "minecraft:operation", VOID );
-            PROVIDERS.put( "minecraft:particle", VOID );
-            PROVIDERS.put( "minecraft:rotation", VOID );
-            PROVIDERS.put( "minecraft:scoreboard_slot", VOID );
-            PROVIDERS.put( "minecraft:score_holder", BYTE );
-            PROVIDERS.put( "minecraft:swizzle", VOID );
-            PROVIDERS.put( "minecraft:team", VOID );
-            PROVIDERS.put( "minecraft:item_slot", VOID );
-            PROVIDERS.put( "minecraft:resource_location", VOID );
-            PROVIDERS.put( "minecraft:mob_effect", VOID );
-            PROVIDERS.put( "minecraft:function", VOID );
-            PROVIDERS.put( "minecraft:entity_anchor", VOID );
-            PROVIDERS.put( "minecraft:int_range", VOID );
-            PROVIDERS.put( "minecraft:float_range", VOID );
-            PROVIDERS.put( "minecraft:item_enchantment", VOID );
-            PROVIDERS.put( "minecraft:entity_summon", VOID );
-            PROVIDERS.put( "minecraft:dimension", VOID );
-            PROVIDERS.put( "minecraft:time", VOID ); // 1.14
-            PROVIDERS.put( "minecraft:uuid", VOID ); // 1.16
-            PROVIDERS.put( "minecraft:test_argument", VOID ); // 1.16, debug
-            PROVIDERS.put( "minecraft:test_class", VOID ); // 1.16, debug
-            PROVIDERS.put( "minecraft:angle", VOID ); // 1.16.2
+            register( "minecraft:entity", BYTE );
+            register( "minecraft:game_profile", VOID );
+            register( "minecraft:block_pos", VOID );
+            register( "minecraft:column_pos", VOID );
+            register( "minecraft:vec3", VOID );
+            register( "minecraft:vec2", VOID );
+            register( "minecraft:block_state", VOID );
+            register( "minecraft:block_predicate", VOID );
+            register( "minecraft:item_stack", VOID );
+            register( "minecraft:item_predicate", VOID );
+            register( "minecraft:color", VOID );
+            register( "minecraft:component", VOID );
+            register( "minecraft:message", VOID );
+            register( "minecraft:nbt_compound_tag", VOID ); // 1.14
+            register( "minecraft:nbt_tag", VOID ); // 1.14
+            register( "minecraft:nbt_path", VOID );
+            register( "minecraft:objective", VOID );
+            register( "minecraft:objective_criteria", VOID );
+            register( "minecraft:operation", VOID );
+            register( "minecraft:particle", VOID );
+            register( "minecraft:angle", VOID ); // 1.16.2
+            register( "minecraft:rotation", VOID );
+            register( "minecraft:scoreboard_slot", VOID );
+            register( "minecraft:score_holder", BYTE );
+            register( "minecraft:swizzle", VOID );
+            register( "minecraft:team", VOID );
+            register( "minecraft:item_slot", VOID );
+            register( "minecraft:resource_location", VOID );
+            register( "minecraft:mob_effect", VOID );
+            register( "minecraft:function", VOID );
+            register( "minecraft:entity_anchor", VOID );
+            register( "minecraft:int_range", VOID );
+            register( "minecraft:float_range", VOID );
+            register( "minecraft:item_enchantment", VOID );
+            register( "minecraft:entity_summon", VOID );
+            register( "minecraft:dimension", VOID );
+            register( "minecraft:time", VOID ); // 1.14
+            register( "minecraft:resource_or_tag", RAW_STRING ); // 1.18.2
+            register( "minecraft:resource", RAW_STRING ); // 1.18.2
+            register( "minecraft:template_mirror", VOID ); // 1.19
+            register( "minecraft:template_rotation", VOID ); // 1.19
+            register( "minecraft:uuid", VOID ); // 1.16
+
+            register( "minecraft:gamemode", VOID ); // 1.19.3
+            register( "minecraft:resource_or_tag_key", RAW_STRING ); // 1.19.3
+            register( "minecraft:resource_key", RAW_STRING ); // 1.19.3
+
+            register( "minecraft:nbt", VOID ); // 1.13 // removed
+            IDS_1_19 = new ArgumentSerializer[]
+            {
+                get( "brigadier:bool" ),
+                get( "brigadier:float" ),
+                get( "brigadier:double" ),
+                get( "brigadier:integer" ),
+                get( "brigadier:long" ),
+                get( "brigadier:string" ),
+                get( "minecraft:entity" ),
+                get( "minecraft:game_profile" ),
+                get( "minecraft:block_pos" ),
+                get( "minecraft:column_pos" ),
+                get( "minecraft:vec3" ),
+                get( "minecraft:vec2" ),
+                get( "minecraft:block_state" ),
+                get( "minecraft:block_predicate" ),
+                get( "minecraft:item_stack" ),
+                get( "minecraft:item_predicate" ),
+                get( "minecraft:color" ),
+                get( "minecraft:component" ),
+                get( "minecraft:message" ),
+                get( "minecraft:nbt_compound_tag" ),
+                get( "minecraft:nbt_tag" ),
+                get( "minecraft:nbt_path" ),
+                get( "minecraft:objective" ),
+                get( "minecraft:objective_criteria" ),
+                get( "minecraft:operation" ),
+                get( "minecraft:particle" ),
+                get( "minecraft:angle" ),
+                get( "minecraft:rotation" ),
+                get( "minecraft:scoreboard_slot" ),
+                get( "minecraft:score_holder" ),
+                get( "minecraft:swizzle" ),
+                get( "minecraft:team" ),
+                get( "minecraft:item_slot" ),
+                get( "minecraft:resource_location" ),
+                get( "minecraft:mob_effect" ),
+                get( "minecraft:function" ),
+                get( "minecraft:entity_anchor" ),
+                get( "minecraft:int_range" ),
+                get( "minecraft:float_range" ),
+                get( "minecraft:item_enchantment" ),
+                get( "minecraft:entity_summon" ),
+                get( "minecraft:dimension" ),
+                get( "minecraft:time" ),
+                get( "minecraft:resource_or_tag" ),
+                get( "minecraft:resource" ),
+                get( "minecraft:template_mirror" ),
+                get( "minecraft:template_rotation" ),
+                get( "minecraft:uuid" )
+            };
+
+            IDS_1_19_3 = new ArgumentSerializer[]
+            {
+                get( "brigadier:bool" ),
+                get( "brigadier:float" ),
+                get( "brigadier:double" ),
+                get( "brigadier:integer" ),
+                get( "brigadier:long" ),
+                get( "brigadier:string" ),
+                get( "minecraft:entity" ),
+                get( "minecraft:game_profile" ),
+                get( "minecraft:block_pos" ),
+                get( "minecraft:column_pos" ),
+                get( "minecraft:vec3" ),
+                get( "minecraft:vec2" ),
+                get( "minecraft:block_state" ),
+                get( "minecraft:block_predicate" ),
+                get( "minecraft:item_stack" ),
+                get( "minecraft:item_predicate" ),
+                get( "minecraft:color" ),
+                get( "minecraft:component" ),
+                get( "minecraft:message" ),
+                get( "minecraft:nbt_compound_tag" ),
+                get( "minecraft:nbt_tag" ),
+                get( "minecraft:nbt_path" ),
+                get( "minecraft:objective" ),
+                get( "minecraft:objective_criteria" ),
+                get( "minecraft:operation" ),
+                get( "minecraft:particle" ),
+                get( "minecraft:angle" ),
+                get( "minecraft:rotation" ),
+                get( "minecraft:scoreboard_slot" ),
+                get( "minecraft:score_holder" ),
+                get( "minecraft:swizzle" ),
+                get( "minecraft:team" ),
+                get( "minecraft:item_slot" ),
+                get( "minecraft:resource_location" ),
+                get( "minecraft:function" ),
+                get( "minecraft:entity_anchor" ),
+                get( "minecraft:int_range" ),
+                get( "minecraft:float_range" ),
+                get( "minecraft:dimension" ),
+                get( "minecraft:gamemode" ),
+                get( "minecraft:time" ),
+                get( "minecraft:resource_or_tag" ),
+                get( "minecraft:resource_or_tag_key" ),
+                get( "minecraft:resource" ),
+                get( "minecraft:resource_key" ),
+                get( "minecraft:template_mirror" ),
+                get( "minecraft:template_rotation" ),
+                get( "minecraft:uuid" )
+            };
+        }
+
+        private static void register(String name, ArgumentSerializer serializer)
+        {
+            PROVIDERS.put( name, serializer );
         }
 
-        private static ArgumentType<?> read(String key, ByteBuf buf)
+        private static ArgumentSerializer get(String name)
         {
-            ArgumentSerializer reader = PROVIDERS.get( key );
+            return PROVIDERS.get( name );
+        }
+
+        private static ArgumentType<?> read(ByteBuf buf, int protocolVersion)
+        {
+            Object key;
+            ArgumentSerializer reader;
+
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+            {
+                key = readVarInt( buf );
+
+                if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 )
+                {
+                    reader = IDS_1_19_3[(Integer) key];
+                } else
+                {
+                    reader = IDS_1_19[(Integer) key];
+                }
+            } else
+            {
+                key = readString( buf );
+                reader = PROVIDERS.get( (String) key );
+            }
+
             Preconditions.checkArgument( reader != null, "No provider for argument " + key );
 
             Object val = reader.read( buf );
             return val != null && PROPER_PROVIDERS.containsKey( val.getClass() ) ? (ArgumentType<?>) val : new DummyType( key, reader, val );
         }
 
-        private static void write(ArgumentType<?> arg, ByteBuf buf)
+        private static void write(ArgumentType<?> arg, ByteBuf buf, int protocolVersion)
         {
             ProperArgumentSerializer proper = PROPER_PROVIDERS.get( arg.getClass() );
             if ( proper != null )
             {
-                writeString( proper.getKey(), buf );
+                if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+                {
+                    writeVarInt( proper.getIntKey(), buf );
+                } else
+                {
+                    writeString( proper.getKey(), buf );
+                }
                 proper.write( buf, arg );
             } else
             {
                 Preconditions.checkArgument( arg instanceof DummyType, "Non dummy arg " + arg.getClass() );
 
                 DummyType dummy = (DummyType) arg;
-                writeString( dummy.key, buf );
+                if ( dummy.key instanceof Integer )
+                {
+                    writeVarInt( (Integer) dummy.key, buf );
+                } else
+                {
+                    writeString( (String) dummy.key, buf );
+                }
                 dummy.serializer.write( buf, dummy.value );
             }
         }
@@ -583,7 +755,7 @@ public class Commands extends DefinedPacket
         private static class DummyType<T> implements ArgumentType<T>
         {
 
-            private final String key;
+            private final Object key;
             private final ArgumentSerializer<T> serializer;
             private final T value;
 
@@ -605,6 +777,8 @@ public class Commands extends DefinedPacket
         private abstract static class ProperArgumentSerializer<T> extends ArgumentSerializer<T>
         {
 
+            protected abstract int getIntKey();
+
             protected abstract String getKey();
         }
     }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
index 8d9f4ccb..a29524ca 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
@@ -1,35 +1,25 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class EncryptionRequest extends MultiVersionPacketV17
+public class EncryptionRequest extends DefinedPacket
 {
 
     private String serverId;
     private byte[] publicKey;
     private byte[] verifyToken;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        serverId = readString( buf );
-        publicKey = v17readArray( buf );
-        verifyToken = v17readArray( buf );
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -38,16 +28,6 @@ public class EncryptionRequest extends MultiVersionPacketV17
         verifyToken = readArray( buf );
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( serverId, buf );
-        v17writeArray( publicKey, buf, false );
-        v17writeArray( verifyToken, buf, false );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
index 1a41da75..545eec72 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -14,42 +13,41 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class EncryptionResponse extends MultiVersionPacketV17
+public class EncryptionResponse extends DefinedPacket
 {
 
     private byte[] sharedSecret;
     private byte[] verifyToken;
+    private EncryptionData encryptionData;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        sharedSecret = v17readArray( buf );
-        verifyToken = v17readArray( buf );
-    }
-    // Travertine end
-
-    @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         sharedSecret = readArray( buf, 128 );
-        verifyToken = readArray( buf, 128 );
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19 || protocolVersion >= ProtocolConstants.MINECRAFT_1_19_3 || buf.readBoolean() )
+        {
+            verifyToken = readArray( buf, 128 );
+        } else
+        {
+            encryptionData = new EncryptionData( buf.readLong(), readArray( buf ) );
+        }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        v17writeArray( sharedSecret, buf, false );
-        v17writeArray( verifyToken, buf, false );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         writeArray( sharedSecret, buf );
-        writeArray( verifyToken, buf );
+        if ( verifyToken != null )
+        {
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 && protocolVersion <= ProtocolConstants.MINECRAFT_1_19_3 )
+            {
+                buf.writeBoolean( true );
+            }
+            writeArray( verifyToken, buf );
+        } else
+        {
+            buf.writeLong( encryptionData.getSalt() );
+            writeArray( encryptionData.getSignature(), buf );
+        }
     }
 
     @Override
@@ -58,10 +56,19 @@ public class EncryptionResponse extends MultiVersionPacketV17
         handler.handle( this );
     }
 
+    @Data
+    public static class EncryptionData
+    {
+
+        private final long salt;
+        private final byte[] signature;
+    }
+
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
     public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
         // It turns out these come out to the same length, whether we're talking >=1.8 or not.
         // The length prefix always winds up being 2 bytes.
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_1_19) return -1;
         return 260;
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityEffect.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityEffect.java
index 07fc21b6..d11a9ea9 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityEffect.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityEffect.java
@@ -1,19 +1,18 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
-import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.DefinedPacket;
 
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class EntityEffect extends MultiVersionPacketV17 {
+public class EntityEffect extends DefinedPacket {
 
     private int entityId;
     private int effectId;
@@ -21,14 +20,6 @@ public class EntityEffect extends MultiVersionPacketV17 {
     private int duration;
     private boolean hideParticles;
 
-    @Override
-    protected void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
-        this.entityId = buf.readInt();
-        this.effectId = buf.readUnsignedByte();
-        this.amplifier = buf.readUnsignedByte();
-        this.duration = buf.readShort();
-    }
-
     @Override
     public void read(ByteBuf buf) {
         this.entityId = readVarInt(buf);
@@ -38,14 +29,6 @@ public class EntityEffect extends MultiVersionPacketV17 {
         this.hideParticles = buf.readBoolean();
     }
 
-    @Override
-    protected void v17Write(ByteBuf buf) {
-        buf.writeInt(effectId);
-        buf.writeByte(effectId);
-        buf.writeByte(amplifier);
-        buf.writeShort(duration);
-    }
-
     @Override
     public void write(ByteBuf buf) {
         writeVarInt(this.entityId, buf);
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityRemoveEffect.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityRemoveEffect.java
index 9f8d56fc..7ed2dc3a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityRemoveEffect.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityRemoveEffect.java
@@ -1,18 +1,18 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
 
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class EntityRemoveEffect extends MultiVersionPacketV17 {
+public class EntityRemoveEffect extends DefinedPacket {
 
     private int entityId;
     private int effectId;
@@ -23,15 +23,9 @@ public class EntityRemoveEffect extends MultiVersionPacketV17 {
         this.effectId = buf.readUnsignedByte();
     }
 
-    @Override
-    protected void v17Read(ByteBuf buf) {
-        this.entityId = buf.readInt();
-        this.effectId = buf.readUnsignedByte();
-    }
-
     @Override
     public void write(ByteBuf buf) {
-        writeVarInt(entityId, buf);
+        writeVarInt(this.entityId, buf);
         buf.writeByte(effectId);
     }
 
@@ -39,10 +33,4 @@ public class EntityRemoveEffect extends MultiVersionPacketV17 {
     public void handle(AbstractPacketHandler handler) throws Exception {
         handler.handle(this);
     }
-
-    @Override
-    protected void v17Write(ByteBuf buf) {
-        buf.writeInt(entityId);
-        buf.writeByte(effectId);
-    }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
index 0c2eb022..b004bc41 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -14,33 +13,17 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class KeepAlive extends MultiVersionPacketV17
+public class KeepAlive extends DefinedPacket
 {
 
     private long randomId;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        randomId = buf.readInt();
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         randomId = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 ) ? buf.readLong() : readVarInt( buf );
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        buf.writeInt((int) randomId);
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
index a240ccbb..bc7baee3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
@@ -9,6 +9,7 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.Location;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.Tag;
 
@@ -32,10 +33,12 @@ public class Login extends DefinedPacket
     private int maxPlayers;
     private String levelType;
     private int viewDistance;
+    private int simulationDistance;
     private boolean reducedDebugInfo;
     private boolean normalRespawn;
     private boolean debug;
     private boolean flat;
+    private Location deathLocation;
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
@@ -62,7 +65,7 @@ public class Login extends DefinedPacket
 
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 && protocolVersion < ProtocolConstants.MINECRAFT_1_19 )
             {
                 dimension = readTag( buf );
             } else
@@ -100,6 +103,10 @@ public class Login extends DefinedPacket
         {
             viewDistance = readVarInt( buf );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        {
+            simulationDistance = readVarInt( buf );
+        }
         if ( protocolVersion >= 29 )
         {
             reducedDebugInfo = buf.readBoolean();
@@ -113,6 +120,13 @@ public class Login extends DefinedPacket
             debug = buf.readBoolean();
             flat = buf.readBoolean();
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            if ( buf.readBoolean() )
+            {
+                deathLocation = new Location( readString( buf ), buf.readLong() );
+            }
+        }
     }
 
     @Override
@@ -139,7 +153,7 @@ public class Login extends DefinedPacket
 
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 && protocolVersion < ProtocolConstants.MINECRAFT_1_19 )
             {
                 writeTag( (Tag) dimension, buf );
             } else
@@ -177,6 +191,10 @@ public class Login extends DefinedPacket
         {
             writeVarInt( viewDistance, buf );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        {
+            writeVarInt( simulationDistance, buf );
+        }
         if ( protocolVersion >= 29 )
         {
             buf.writeBoolean( reducedDebugInfo );
@@ -190,6 +208,18 @@ public class Login extends DefinedPacket
             buf.writeBoolean( debug );
             buf.writeBoolean( flat );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            if ( deathLocation != null )
+            {
+                buf.writeBoolean( true );
+                writeString( deathLocation.getDimension(), buf );
+                buf.writeLong( deathLocation.getPos() );
+            } else
+            {
+                buf.writeBoolean( false );
+            }
+        }
     }
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
index cfd8e64e..3224b0d2 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
@@ -1,12 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import java.util.UUID;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.PlayerPublicKey;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
@@ -17,17 +19,45 @@ public class LoginRequest extends DefinedPacket
 {
 
     private String data;
+    private PlayerPublicKey publicKey;
+    private UUID uuid;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         data = readString( buf, 16 );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 && protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            publicKey = readPublicKey( buf );
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            if ( buf.readBoolean() )
+            {
+                uuid = readUUID( buf );
+            }
+        }
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         writeString( data, buf );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 && protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            writePublicKey( publicKey, buf );
+        }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            if ( uuid != null )
+            {
+                buf.writeBoolean( true );
+                writeUUID( uuid, buf );
+            } else
+            {
+                buf.writeBoolean( false );
+            }
+        }
     }
 
     @Override
@@ -40,6 +70,7 @@ public class LoginRequest extends DefinedPacket
     public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
         // Accommodate the rare (but likely malicious) use of UTF-8 usernames, since it is technically
         // legal on the protocol level.
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_1_19) return -1;
         return 1 + (16 * 4);
     }
     // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index ac8751f6..07fb3d79 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -8,6 +8,7 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.Property;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
@@ -19,15 +20,11 @@ public class LoginSuccess extends DefinedPacket
 
     private UUID uuid;
     private String username;
+    private Property[] properties;
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        // Travertine start
-        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_7_2 ) {
-            uuid = readUndashedUUID( buf );
-        } else
-        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
             uuid = readUUID( buf );
@@ -36,16 +33,15 @@ public class LoginSuccess extends DefinedPacket
             uuid = UUID.fromString( readString( buf ) );
         }
         username = readString( buf );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            properties = readProperties( buf );
+        }
     }
 
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        // Travertine start
-        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_7_2 ) {
-            writeUndashedUUID( uuid.toString(), buf );
-        } else
-        // Travertine end
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
             writeUUID( uuid, buf );
@@ -54,6 +50,10 @@ public class LoginSuccess extends DefinedPacket
             writeString( uuid.toString(), buf );
         }
         writeString( username, buf );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            writeProperties( properties, buf );
+        }
     }
 
     @Override
@@ -61,14 +61,4 @@ public class LoginSuccess extends DefinedPacket
     {
         handler.handle( this );
     }
-
-    // Travertine start
-    private static UUID readUndashedUUID(ByteBuf buf) {
-        return UUID.fromString( new StringBuilder( readString( buf ) ).insert( 20, '-' ).insert( 16, '-' ).insert( 12, '-' ).insert( 8, '-' ).toString() );
-    }
-
-    private static void writeUndashedUUID(String uuid, ByteBuf buf) {
-        writeString( new StringBuilder( 32 ).append( uuid, 0, 8 ).append( uuid, 9, 13 ).append( uuid, 14, 18 ).append( uuid, 19, 23 ).append( uuid, 24, 36 ).toString(), buf );
-    }
-    // Travertine end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
index c919f961..9b9c412d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
@@ -1,7 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
-import net.md_5.bungee.protocol.DefinedPacket;
 import io.netty.buffer.ByteBuf;
 import java.util.UUID;
 import lombok.Data;
@@ -9,29 +7,19 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.PlayerPublicKey;
+import net.md_5.bungee.protocol.Property;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class PlayerListItem extends MultiVersionPacketV17
+public class PlayerListItem extends DefinedPacket
 {
 
     private Action action;
     private Item[] items;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        items = new Item[ 1 ];
-        Item item = items[ 0 ] = new Item();
-        item.displayName = item.username = readString( buf );
-        action = !buf.readBoolean() ? Action.REMOVE_PLAYER : Action.ADD_PLAYER;
-        item.ping = buf.readShort();
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -45,31 +33,17 @@ public class PlayerListItem extends MultiVersionPacketV17
             {
                 case ADD_PLAYER:
                     item.username = DefinedPacket.readString( buf );
-                    item.properties = new String[ DefinedPacket.readVarInt( buf ) ][];
-                    for ( int j = 0; j < item.properties.length; j++ )
-                    {
-                        String name = DefinedPacket.readString( buf );
-                        String value = DefinedPacket.readString( buf );
-                        if ( buf.readBoolean() )
-                        {
-                            item.properties[j] = new String[]
-                            {
-                                name, value, DefinedPacket.readString( buf )
-                            };
-                        } else
-                        {
-                            item.properties[j] = new String[]
-                            {
-                                name, value
-                            };
-                        }
-                    }
+                    item.properties = DefinedPacket.readProperties( buf );
                     item.gamemode = DefinedPacket.readVarInt( buf );
                     item.ping = DefinedPacket.readVarInt( buf );
                     if ( buf.readBoolean() )
                     {
                         item.displayName = DefinedPacket.readString( buf );
                     }
+                    if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+                    {
+                        item.publicKey = readPublicKey( buf );
+                    }
                     break;
                 case UPDATE_GAMEMODE:
                     item.gamemode = DefinedPacket.readVarInt( buf );
@@ -86,17 +60,6 @@ public class PlayerListItem extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        Item item = items[0]; // Only one at a time
-        writeString( item.displayName, buf ); // TODO: Server unique only!
-        buf.writeBoolean( action != Action.REMOVE_PLAYER );
-        buf.writeShort( item.ping );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -109,20 +72,7 @@ public class PlayerListItem extends MultiVersionPacketV17
             {
                 case ADD_PLAYER:
                     DefinedPacket.writeString( item.username, buf );
-                    DefinedPacket.writeVarInt( item.properties.length, buf );
-                    for ( String[] prop : item.properties )
-                    {
-                        DefinedPacket.writeString( prop[0], buf );
-                        DefinedPacket.writeString( prop[1], buf );
-                        if ( prop.length >= 3 )
-                        {
-                            buf.writeBoolean( true );
-                            DefinedPacket.writeString( prop[2], buf );
-                        } else
-                        {
-                            buf.writeBoolean( false );
-                        }
-                    }
+                    DefinedPacket.writeProperties( item.properties, buf );
                     DefinedPacket.writeVarInt( item.gamemode, buf );
                     DefinedPacket.writeVarInt( item.ping, buf );
                     buf.writeBoolean( item.displayName != null );
@@ -130,6 +80,10 @@ public class PlayerListItem extends MultiVersionPacketV17
                     {
                         DefinedPacket.writeString( item.displayName, buf );
                     }
+                    if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+                    {
+                        writePublicKey( item.publicKey, buf );
+                    }
                     break;
                 case UPDATE_GAMEMODE:
                     DefinedPacket.writeVarInt( item.gamemode, buf );
@@ -169,20 +123,26 @@ public class PlayerListItem extends MultiVersionPacketV17
     {
 
         // ALL
-        private UUID uuid;
+        UUID uuid;
 
         // ADD_PLAYER
-        private String username;
-        private String[][] properties;
+        String username;
+        Property[] properties;
+
+        UUID chatSessionId;
+        PlayerPublicKey publicKey;
+
+        // UPDATE_LISTED
+        Boolean listed;
 
         // ADD_PLAYER & UPDATE_GAMEMODE
-        private int gamemode;
+        Integer gamemode;
 
         // ADD_PLAYER & UPDATE_LATENCY
-        private int ping;
+        Integer ping;
 
         // ADD_PLAYER & UPDATE_DISPLAY_NAME
-        private String displayName;
+        String displayName;
 
     }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemRemove.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemRemove.java
new file mode 100644
index 00000000..49877246
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemRemove.java
@@ -0,0 +1,45 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import java.util.UUID;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@NoArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerListItemRemove extends DefinedPacket
+{
+
+    private UUID[] uuids;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        uuids = new UUID[ DefinedPacket.readVarInt( buf ) ];
+        for ( int i = 0; i < uuids.length; i++ )
+        {
+            uuids[i] = DefinedPacket.readUUID( buf );
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        DefinedPacket.writeVarInt( uuids.length, buf );
+        for ( UUID uuid : uuids )
+        {
+            DefinedPacket.writeUUID( uuid, buf );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemUpdate.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemUpdate.java
new file mode 100644
index 00000000..21d87c29
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItemUpdate.java
@@ -0,0 +1,133 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import java.util.EnumSet;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.PlayerPublicKey;
+import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.packet.PlayerListItem.Item;
+
+@Data
+@NoArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerListItemUpdate extends DefinedPacket
+{
+
+    private EnumSet<Action> actions;
+    private Item[] items;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        actions = readEnumSet( PlayerListItemUpdate.Action.class, buf );
+
+        items = new Item[ DefinedPacket.readVarInt( buf ) ];
+        for ( int i = 0; i < items.length; i++ )
+        {
+            Item item = items[i] = new Item();
+            item.setUuid( DefinedPacket.readUUID( buf ) );
+
+            for ( Action action : actions )
+            {
+                switch ( action )
+                {
+                    case ADD_PLAYER:
+                        item.username = DefinedPacket.readString( buf );
+                        item.properties = DefinedPacket.readProperties( buf );
+                        break;
+                    case INITIALIZE_CHAT:
+                        if ( buf.readBoolean() )
+                        {
+                            item.chatSessionId = readUUID( buf );
+                            item.publicKey = new PlayerPublicKey( buf.readLong(), readArray( buf, 512 ), readArray( buf, 4096 ) );
+                        }
+                        break;
+                    case UPDATE_GAMEMODE:
+                        item.gamemode = DefinedPacket.readVarInt( buf );
+                        break;
+                    case UPDATE_LISTED:
+                        item.listed = buf.readBoolean();
+                        break;
+                    case UPDATE_LATENCY:
+                        item.ping = DefinedPacket.readVarInt( buf );
+                        break;
+                    case UPDATE_DISPLAY_NAME:
+                        if ( buf.readBoolean() )
+                        {
+                            item.displayName = DefinedPacket.readString( buf );
+                        }
+                        break;
+                }
+            }
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        DefinedPacket.writeEnumSet( actions, PlayerListItemUpdate.Action.class, buf );
+
+        DefinedPacket.writeVarInt( items.length, buf );
+        for ( Item item : items )
+        {
+            DefinedPacket.writeUUID( item.uuid, buf );
+            for ( Action action : actions )
+            {
+                switch ( action )
+                {
+                    case ADD_PLAYER:
+                        DefinedPacket.writeString( item.username, buf );
+                        DefinedPacket.writeProperties( item.properties, buf );
+                        break;
+                    case INITIALIZE_CHAT:
+                        buf.writeBoolean( item.chatSessionId != null );
+                        if ( item.chatSessionId != null )
+                        {
+                            writeUUID( item.chatSessionId, buf );
+                            buf.writeLong( item.publicKey.getExpiry() );
+                            writeArray( item.publicKey.getKey(), buf );
+                            writeArray( item.publicKey.getSignature(), buf );
+                        }
+                        break;
+                    case UPDATE_GAMEMODE:
+                        DefinedPacket.writeVarInt( item.gamemode, buf );
+                        break;
+                    case UPDATE_LISTED:
+                        buf.writeBoolean( item.listed );
+                        break;
+                    case UPDATE_LATENCY:
+                        DefinedPacket.writeVarInt( item.ping, buf );
+                        break;
+                    case UPDATE_DISPLAY_NAME:
+                        buf.writeBoolean( item.displayName != null );
+                        if ( item.displayName != null )
+                        {
+                            DefinedPacket.writeString( item.displayName, buf );
+                        }
+                        break;
+                }
+            }
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+    public static enum Action
+    {
+
+        ADD_PLAYER,
+        INITIALIZE_CHAT,
+        UPDATE_GAMEMODE,
+        UPDATE_LISTED,
+        UPDATE_LATENCY,
+        UPDATE_DISPLAY_NAME;
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
index c49c5a56..91f71c09 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
@@ -2,9 +2,6 @@ package net.md_5.bungee.protocol.packet;
 
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
-import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil; // Waterfall
 import java.io.ByteArrayInputStream;
@@ -23,7 +20,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class PluginMessage extends MultiVersionPacketV17
+public class PluginMessage extends DefinedPacket
 {
 
     public static final Function<String, String> MODERNISE = new Function<String, String>()
@@ -51,14 +48,6 @@ public class PluginMessage extends MultiVersionPacketV17
             return "legacy:" + tag.toLowerCase( Locale.ROOT );
         }
     };
-    public static final Predicate<PluginMessage> SHOULD_RELAY = new Predicate<PluginMessage>()
-    {
-        @Override
-        public boolean apply(PluginMessage input)
-        {
-            return ( input.getTag().equals( "REGISTER" ) || input.getTag().equals( "minecraft:register" ) || input.getTag().equals( "MC|Brand" ) || input.getTag().equals( "minecraft:brand" ) ) && input.getData().length < Byte.MAX_VALUE;
-        }
-    };
 
     public PluginMessage(String tag, ByteBuf data, boolean allowExtendedPacket) {
         this(tag, ByteBufUtil.getBytes(data), allowExtendedPacket);
@@ -81,34 +70,16 @@ public class PluginMessage extends MultiVersionPacketV17
      */
     private boolean allowExtendedPacket = false;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        tag = readString( buf );
-        data = v17readArray( buf );
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( readString( buf ) ) : readString( buf );
-        int maxSize = direction == ProtocolConstants.Direction.TO_SERVER ? Short.MAX_VALUE : 0x100000;
-        Preconditions.checkArgument( buf.readableBytes() < maxSize );
+        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( readString( buf ) ) : readString( buf, 20 );
+        int maxSize = ( direction == ProtocolConstants.Direction.TO_SERVER ) ? Short.MAX_VALUE : 0x100000;
+        Preconditions.checkArgument( buf.readableBytes() <= maxSize, "Payload too large" );
         data = new byte[ buf.readableBytes() ];
         buf.readBytes( data );
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( tag, buf );
-        v17writeArray( data, buf, allowExtendedPacket );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
index 36db3d49..65cddbec 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
@@ -7,6 +7,7 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.Location;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.Tag;
 
@@ -27,13 +28,14 @@ public class Respawn extends DefinedPacket
     private boolean debug;
     private boolean flat;
     private boolean copyMeta;
+    private Location deathLocation;
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 && protocolVersion < ProtocolConstants.MINECRAFT_1_19 )
             {
                 dimension = readTag( buf );
             } else
@@ -64,6 +66,13 @@ public class Respawn extends DefinedPacket
         {
             levelType = readString( buf );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            if ( buf.readBoolean() )
+            {
+                deathLocation = new Location( readString( buf ), buf.readLong() );
+            }
+        }
     }
 
     @Override
@@ -71,7 +80,7 @@ public class Respawn extends DefinedPacket
     {
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 && protocolVersion < ProtocolConstants.MINECRAFT_1_19 )
             {
                 writeTag( (Tag) dimension, buf );
             } else
@@ -102,6 +111,18 @@ public class Respawn extends DefinedPacket
         {
             writeString( levelType, buf );
         }
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            if ( deathLocation != null )
+            {
+                buf.writeBoolean( true );
+                writeString( deathLocation.getDimension(), buf );
+                buf.writeLong( deathLocation.getPos() );
+            } else
+            {
+                buf.writeBoolean( false );
+            }
+        }
     }
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
index fe290fa3..3c7905d5 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import java.util.Locale;
 import lombok.AllArgsConstructor;
@@ -15,7 +14,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class ScoreboardObjective extends MultiVersionPacketV17
+public class ScoreboardObjective extends DefinedPacket
 {
 
     private String name;
@@ -26,16 +25,6 @@ public class ScoreboardObjective extends MultiVersionPacketV17
      */
     private byte action;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        name = readString( buf );
-        value = readString( buf );
-        action = buf.readByte();
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -54,16 +43,6 @@ public class ScoreboardObjective extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( name, buf );
-        writeString( value, buf );
-        buf.writeByte( action );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
index 74066702..0b27fc86 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -14,7 +13,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class ScoreboardScore extends MultiVersionPacketV17
+public class ScoreboardScore extends DefinedPacket
 {
 
     private String itemName;
@@ -25,20 +24,6 @@ public class ScoreboardScore extends MultiVersionPacketV17
     private String scoreName;
     private int value;
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        itemName = readString( buf );
-        action = buf.readByte();
-        if ( action != 1 )
-        {
-            scoreName = readString( buf );
-            value = buf.readInt();
-        }
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -51,20 +36,6 @@ public class ScoreboardScore extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( itemName, buf );
-        buf.writeByte( action );
-        if ( action != 1 )
-        {
-            writeString( scoreName, buf );
-            buf.writeInt( value );
-        }
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ServerData.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ServerData.java
new file mode 100644
index 00000000..721b4f90
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ServerData.java
@@ -0,0 +1,84 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class ServerData extends DefinedPacket
+{
+
+    private String motd;
+    private String icon;
+    private boolean preview;
+    private boolean enforceSecure;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        if ( buf.readBoolean() )
+        {
+            motd = readString( buf, 262144 );
+        }
+        if ( buf.readBoolean() )
+        {
+            icon = readString( buf );
+        }
+
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            preview = buf.readBoolean();
+        }
+
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            enforceSecure = buf.readBoolean();
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        if ( motd != null )
+        {
+            buf.writeBoolean( true );
+            writeString( motd, buf, 262144 );
+        } else
+        {
+            buf.writeBoolean( false );
+        }
+
+        if ( icon != null )
+        {
+            buf.writeBoolean( true );
+            writeString( icon, buf );
+        } else
+        {
+            buf.writeBoolean( false );
+        }
+
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_19_3 )
+        {
+            buf.writeBoolean( preview );
+        }
+
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            buf.writeBoolean( enforceSecure );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/SystemChat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/SystemChat.java
new file mode 100644
index 00000000..3f1fc267
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/SystemChat.java
@@ -0,0 +1,48 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SystemChat extends DefinedPacket
+{
+
+    private String message;
+    private int position;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        message = readString( buf, 262144 );
+        position = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 ) ? ( ( buf.readBoolean() ) ? ChatMessageType.ACTION_BAR.ordinal() : 0 ) : readVarInt( buf );
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( message, buf, 262144 );
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_19_1 )
+        {
+            buf.writeBoolean( position == ChatMessageType.ACTION_BAR.ordinal() );
+        } else
+        {
+            writeVarInt( position, buf );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
index ac867247..80e4f85a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -12,7 +11,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @Data
 @NoArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class TabCompleteRequest extends MultiVersionPacketV17
+public class TabCompleteRequest extends DefinedPacket
 {
 
     private int transactionId;
@@ -34,13 +33,6 @@ public class TabCompleteRequest extends MultiVersionPacketV17
         this.hasPositon = hasPosition;
         this.position = position;
     }
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        cursor = readString( buf );
-    }
-    // Travertine end
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
@@ -49,7 +41,7 @@ public class TabCompleteRequest extends MultiVersionPacketV17
         {
             transactionId = readVarInt( buf );
         }
-        cursor = readString( buf, 32500 );
+        cursor = readString( buf, ( protocolVersion > ProtocolConstants.MINECRAFT_1_13 ? 32500 : ( protocolVersion == ProtocolConstants.MINECRAFT_1_13 ? 256 : 32767 ) ) );
 
         if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
         {
@@ -65,14 +57,6 @@ public class TabCompleteRequest extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( cursor, buf );
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
index ca7c6342..21aa9675 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
@@ -57,9 +57,7 @@ public class TabCompleteResponse extends DefinedPacket
             }
 
             suggestions = new Suggestions( range, matches );
-        }
-
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+        } else
         {
             commands = readStringArray( buf );
         }
@@ -84,9 +82,7 @@ public class TabCompleteResponse extends DefinedPacket
                     writeString( suggestion.getTooltip().getString(), buf );
                 }
             }
-        }
-
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+        } else
         {
             writeStringArray( commands, buf );
         }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
index 415a4bcd..a5555f6a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
@@ -1,6 +1,5 @@
 package net.md_5.bungee.protocol.packet;
 
-import io.github.waterfallmc.travertine.protocol.MultiVersionPacketV17;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -14,7 +13,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @NoArgsConstructor
 @AllArgsConstructor
 @EqualsAndHashCode(callSuper = false)
-public class Team extends MultiVersionPacketV17
+public class Team extends DefinedPacket
 {
 
     private String name;
@@ -42,31 +41,6 @@ public class Team extends MultiVersionPacketV17
         this.mode = 1;
     }
 
-    // Travertine start
-    @Override
-    public void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        name = readString( buf );
-        mode = buf.readByte();
-        if ( mode == 0 || mode == 2 )
-        {
-            displayName = readString( buf );
-            prefix = readString( buf );
-            suffix = readString( buf );
-            friendlyFire = buf.readByte();
-        }
-        if ( mode == 0 || mode == 3 || mode == 4 )
-        {
-            int len = buf.readShort();
-            players = new String[ len ];
-            for ( int i = 0; i < len; i++ )
-            {
-                players[i] = readString( buf );
-            }
-        }
-    }
-    // Travertine end
-
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
@@ -104,30 +78,6 @@ public class Team extends MultiVersionPacketV17
         }
     }
 
-    // Travertine start
-    @Override
-    public void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
-    {
-        writeString( name, buf );
-        buf.writeByte( mode );
-        if ( mode == 0 || mode == 2 )
-        {
-            writeString( displayName, buf );
-            writeString( prefix, buf );
-            writeString( suffix, buf );
-            buf.writeByte( friendlyFire );
-        }
-        if ( mode == 0 || mode == 3 || mode == 4 )
-        {
-            buf.writeShort( players.length );
-            for ( String player : players )
-            {
-                writeString( player, buf );
-            }
-        }
-    }
-    // Travertine end
-
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 5dfc6f51..fc3db18f 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -4,18 +4,18 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-proxy</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-proxy</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Proxy</name>
+    <name>InfiniteBungee-Proxy</name>
     <description>Proxy component of the Elastic Portal Suite</description>
 
     <properties>
@@ -36,7 +36,7 @@
             <version>${netty.version}</version>
             <scope>compile</scope>
         </dependency>
-        <!-- Waterfall Start - add Netty DNS resolver -->
+        <!-- InfiniteBungee Start - add Netty DNS resolver -->
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty-resolver-dns</artifactId>
@@ -49,7 +49,7 @@
             <version>${netty.version}</version>
             <classifier>osx-x86_64</classifier>
         </dependency>
-        <!-- Waterfall End -->
+        <!-- InfiniteBungee End -->
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty-handler</artifactId>
@@ -64,42 +64,49 @@
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-api</artifactId>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-transport-native-epoll</artifactId>
+            <version>${netty.version}</version>
+            <classifier>linux-aarch_64</classifier>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-api</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-log4j</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-log4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-native</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-native</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-protocol</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-protocol</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-query</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-query</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
-        <!-- // Waterfall - We already bundle an slf4j impl
+        <!-- // InfiniteBungee - We already bundle an slf4j impl
         <dependency>
             <groupId>net.md-5</groupId>
             <artifactId>bungeecord-slf4j</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
-        </dependency> // Waterfall - We already bundle an slf4j impl -->
+        </dependency> // InfiniteBungee - We already bundle an slf4j impl -->
         <dependency>
             <groupId>net.sf.jopt-simple</groupId>
             <artifactId>jopt-simple</artifactId>
@@ -109,56 +116,55 @@
         <dependency>
             <groupId>mysql</groupId>
             <artifactId>mysql-connector-java</artifactId>
-            <version>5.1.49</version>
+            <version>8.0.29</version>
             <scope>runtime</scope>
         </dependency>
         <!-- add these back in as they are not exposed by the API -->
         <dependency>
             <groupId>org.apache.maven</groupId>
             <artifactId>maven-resolver-provider</artifactId>
-            <version>3.8.1</version>
+            <version>3.8.5</version>
             <scope>runtime</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.maven.resolver</groupId>
             <artifactId>maven-resolver-connector-basic</artifactId>
-            <version>1.7.0</version>
+            <version>1.7.3</version>
             <scope>runtime</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.maven.resolver</groupId>
             <artifactId>maven-resolver-transport-http</artifactId>
-            <version>1.7.0</version>
+            <version>1.7.3</version>
             <scope>runtime</scope>
         </dependency>
-        <!-- Waterfall start - Console improvements - bring back slf4j-->
+        <!-- InfiniteBungee start - Console improvements - bring back slf4j-->
         <dependency>
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-jdk14</artifactId>
-            <version>1.7.30</version>
+            <version>1.7.36</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
             <groupId>net.minecrell</groupId>
             <artifactId>terminalconsoleappender</artifactId>
-            <version>1.2.0</version>
+            <version>1.3.0</version>
         </dependency>
         <dependency>
             <groupId>org.jline</groupId>
             <artifactId>jline-terminal-jansi</artifactId>
-            <version>3.12.1</version>
+            <version>3.21.0</version>
             <scope>runtime</scope>
         </dependency>
-        <!-- Waterfall end -->
+        <!-- InfiniteBungee end -->
     </dependencies>
 
+    <!-- InfiniteBungee start - copy license files into jar -->
     <build>
         <resources>
             <resource>
                 <directory>src/main/resources</directory>
-                <filtering>true</filtering>
             </resource>
-            <!-- Waterfall start - copy license files into jar -->
             <resource>
                 <directory>../</directory>
                 <includes>
@@ -171,7 +177,7 @@
                     <include>LICENSE.txt</include>
                 </includes>
             </resource>
-            <!-- Waterfall end -->
         </resources>
     </build>
+    <!-- InfiniteBungee end -->
 </project>
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/StringUtil.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/StringUtil.java
deleted file mode 100644
index 940ad806..00000000
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/StringUtil.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package io.github.waterfallmc.waterfall;
-
-import lombok.AccessLevel;
-import lombok.NoArgsConstructor;
-
-@NoArgsConstructor(access = AccessLevel.PRIVATE)
-public class StringUtil {
-    public static boolean isBlank(String str) {
-        if (str.isEmpty()) {
-            return true;
-        }
-
-        int l = str.length();
-        for (int i = 0; i < l; i++) {
-            if (!Character.isWhitespace(str.charAt(i))) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
index 527f310e..8f81c002 100644
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
@@ -43,12 +43,29 @@ public class WaterfallConfiguration extends Configuration {
     private boolean disableModernTabLimiter = true;
 
     private boolean disableEntityMetadataRewrite = false;
-    private boolean disableTabListRewrite = false;
+    private boolean disableTabListRewrite = true;
+
+    /*
+     * Plugin Message limiting options
+     * Allows for more control over server-client communication
+     */
+
+    /**
+     * How many channels there can be between server and player,
+     * typically used by mods or some plugins.
+     */
+    private int pluginChannelLimit = 128;
+
+    /**
+     * How long the maximum channel name can be,
+     * only reason to change it would be broken mods.
+     */
+    private int pluginChannelNameLimit = 128;
 
     @Override
     public void load() {
         super.load();
-        YamlConfig config = new YamlConfig(new File("waterfall.yml"));
+        YamlConfig config = new YamlConfig(new File("infinitebungee.yml"));
         config.load(false); // Load, but no permissions
         logInitialHandlerConnections = config.getBoolean( "log_initial_handler_connections", logInitialHandlerConnections );
         gameVersion = config.getString("game_version", "").isEmpty() ? Joiner.on(", ").join(ProtocolConstants.SUPPORTED_VERSIONS) : config.getString("game_version", "");
@@ -58,6 +75,8 @@ public class WaterfallConfiguration extends Configuration {
         disableModernTabLimiter = config.getBoolean("disable_modern_tab_limiter", disableModernTabLimiter);
         disableEntityMetadataRewrite = config.getBoolean("disable_entity_metadata_rewrite", disableEntityMetadataRewrite);
         disableTabListRewrite = config.getBoolean("disable_tab_list_rewrite", disableTabListRewrite);
+        pluginChannelLimit = config.getInt("registered_plugin_channels_limit", pluginChannelLimit);
+        pluginChannelNameLimit = config.getInt("plugin_channel_name_limit", pluginChannelNameLimit);
     }
 
     @Override
@@ -94,4 +113,14 @@ public class WaterfallConfiguration extends Configuration {
     public boolean isDisableTabListRewrite() {
         return disableTabListRewrite;
     }
+
+    @Override
+    public int getPluginChannelLimit() {
+        return pluginChannelLimit;
+    }
+
+    @Override
+    public int getPluginChannelNameLimit() {
+        return pluginChannelNameLimit;
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 3b0dff08..3d2505eb 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -27,10 +27,12 @@ import java.io.IOException;
 import java.io.PrintStream;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.text.Format;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Locale;
@@ -76,8 +78,13 @@ import net.md_5.bungee.chat.SelectorComponentSerializer;
 import net.md_5.bungee.chat.TextComponentSerializer;
 import net.md_5.bungee.chat.TranslatableComponentSerializer;
 import net.md_5.bungee.command.CommandBungee;
+import net.md_5.bungee.command.CommandInfiniteBungee;
 import net.md_5.bungee.command.CommandEnd;
 import net.md_5.bungee.command.CommandIP;
+import net.md_5.bungee.command.CommandBugs;
+import net.md_5.bungee.command.CommandHelp;
+import net.md_5.bungee.command.CommandDiscord;
+import net.md_5.bungee.command.CommandInfinite;
 import net.md_5.bungee.command.CommandPerms;
 import net.md_5.bungee.command.CommandReload;
 import net.md_5.bungee.command.ConsoleCommandSender;
@@ -110,10 +117,9 @@ public class BungeeCord extends ProxyServer
     @Getter
     public final Configuration config = new WaterfallConfiguration();
     /**
-     * Localization bundle.
+     * Localization formats.
      */
-    private ResourceBundle baseBundle;
-    private ResourceBundle customBundle;
+    private Map<String, Format> messageFormats;
     public EventLoopGroup bossEventLoopGroup, workerEventLoopGroup;
     /**
      * locations.yml save thread.
@@ -170,14 +176,6 @@ public class BungeeCord extends ProxyServer
             .registerTypeAdapter( SelectorComponent.class, new SelectorComponentSerializer() )
             .registerTypeAdapter( ServerPing.PlayerInfo.class, new PlayerInfoSerializer() )
             .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() ).create();
-    // Travertine start
-    public final Gson gsonLegacy = new GsonBuilder()
-            .registerTypeAdapter( BaseComponent.class, new ComponentSerializer() )
-            .registerTypeAdapter( TextComponent.class, new TextComponentSerializer() )
-            .registerTypeAdapter( TranslatableComponent.class, new TranslatableComponentSerializer() )
-            .registerTypeAdapter( ServerPing.PlayerInfo.class, new PlayerInfoSerializer( ProtocolConstants.MINECRAFT_1_7_2 ) )
-            .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() ).create();
-    // Travertine end
     @Getter
     private ConnectionThrottle connectionThrottle;
     private final ModuleManager moduleManager = new ModuleManager();
@@ -196,15 +194,8 @@ public class BungeeCord extends ProxyServer
     public BungeeCord() throws IOException
     {
         // Java uses ! to indicate a resource inside of a jar/zip/other container. Running Bungee from within a directory that has a ! will cause this to muck up.
-        Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Travertine in directory with ! in path." );
+        Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use InfiniteBungee in directory with ! in path." );
 
-        try
-        {
-            baseBundle = ResourceBundle.getBundle( "messages" );
-        } catch ( MissingResourceException ex )
-        {
-            baseBundle = ResourceBundle.getBundle( "messages", Locale.ENGLISH );
-        }
         reloadMessages();
 
         // This is a workaround for quite possibly the weirdest bug I have ever encountered in my life!
@@ -226,6 +217,21 @@ public class BungeeCord extends ProxyServer
 
         logger = new BungeeLogger( "BungeeCord", "proxy.log", consoleReader );
         JDK14LoggerFactory.LOGGER = logger;
+
+        // Before we can set the Err and Out streams to our LoggingOutputStream we also have to remove
+        // the default ConsoleHandler from the root logger, which writes to the err stream.
+        // But we still want to log these records, so we add our own handler which forwards the LogRecord to the BungeeLogger.
+        // This way we skip the err stream and the problem of only getting a string without context, and can handle the LogRecord itself.
+        // Thus improving the default bahavior for projects that log on other Logger instances not created by BungeeCord.
+        Logger rootLogger = Logger.getLogger( "" );
+        for ( Handler handler : rootLogger.getHandlers() )
+        {
+            rootLogger.removeHandler( handler );
+        }
+        rootLogger.addHandler( new LoggingForwardHandler( logger ) );
+
+        // We want everything that reaches these output streams to be handled by our logger
+        // since it applies a nice looking format and also writes to the logfile.
         System.setErr( new PrintStream( new LoggingOutputStream( logger, Level.SEVERE ), true ) );
         System.setOut( new PrintStream( new LoggingOutputStream( logger, Level.INFO ), true ) );
         */
@@ -236,6 +242,11 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandReload() );
         getPluginManager().registerCommand( null, new CommandEnd() );
         getPluginManager().registerCommand( null, new CommandIP() );
+        getPluginManager().registerCommand( null, new CommandHelp() );
+        getPluginManager().registerCommand( null, new CommandBugs() );
+        getPluginManager().registerCommand( null, new CommandDiscord() );
+        getPluginManager().registerCommand( null, new CommandInfinite() );
+        getPluginManager().registerCommand( null, new CommandInfiniteBungee() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
 
@@ -268,7 +279,7 @@ public class BungeeCord extends ProxyServer
     public void start() throws Exception
     {
         System.setProperty( "io.netty.selectorAutoRebuildThreshold", "0" ); // Seems to cause Bungee to stop accepting connections
-        if ( System.getProperty( "io.netty.leakDetectionLevel" ) == null )
+        if ( System.getProperty( "io.netty.leakDetectionLevel" ) == null && System.getProperty( "io.netty.leakDetection.level" ) == null )
         {
             ResourceLeakDetector.setLevel( ResourceLeakDetector.Level.DISABLED ); // Eats performance
         }
@@ -509,10 +520,7 @@ public class BungeeCord extends ProxyServer
 
         getLogger().info( "Thank you and goodbye" );
         // Need to close loggers after last message!
-        for ( Handler handler : getLogger().getHandlers() )
-        {
-            handler.close();
-        }
+        org.apache.logging.log4j.LogManager.shutdown(); // Waterfall
 
         // Unlock the thread before optionally calling system exit, which might invoke this function again.
         // If that happens, the system will obtain the lock, and then see that isRunning == false and return without doing anything.
@@ -547,7 +555,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public String getName()
     {
-        return "Travertine";
+        return "Infinite";
     }
 
     @Override
@@ -556,34 +564,49 @@ public class BungeeCord extends ProxyServer
         return ( BungeeCord.class.getPackage().getImplementationVersion() == null ) ? "unknown" : BungeeCord.class.getPackage().getImplementationVersion();
     }
 
-    public void reloadMessages()
+    public final void reloadMessages()
     {
+        Map<String, Format> cachedFormats = new HashMap<>();
+
         File file = new File( "messages.properties" );
         if ( file.isFile() )
         {
             try ( FileReader rd = new FileReader( file ) )
             {
-                customBundle = new PropertyResourceBundle( rd );
+                cacheResourceBundle( cachedFormats, new PropertyResourceBundle( rd ) );
             } catch ( IOException ex )
             {
                 getLogger().log( Level.SEVERE, "Could not load custom messages.properties", ex );
             }
         }
-    }
 
-    @Override
-    public String getTranslation(String name, Object... args)
-    {
-        String translation = "<translation '" + name + "' missing>";
+        ResourceBundle baseBundle;
         try
         {
-            final String string = customBundle != null && customBundle.containsKey( name ) ? customBundle.getString( name ) : baseBundle.getString( name );
-
-            translation = ( args.length == 0 ) ? string : MessageFormat.format( string, args );
+            baseBundle = ResourceBundle.getBundle( "messages" );
         } catch ( MissingResourceException ex )
         {
+            baseBundle = ResourceBundle.getBundle( "messages", Locale.ENGLISH );
+        }
+        cacheResourceBundle( cachedFormats, baseBundle );
+
+        messageFormats = Collections.unmodifiableMap( cachedFormats );
+    }
+
+    private void cacheResourceBundle(Map<String, Format> map, ResourceBundle resourceBundle)
+    {
+        Enumeration<String> keys = resourceBundle.getKeys();
+        while ( keys.hasMoreElements() )
+        {
+            map.computeIfAbsent( keys.nextElement(), (key) -> new MessageFormat( resourceBundle.getString( key ) ) );
         }
-        return translation;
+    }
+
+    @Override
+    public String getTranslation(String name, Object... args)
+    {
+        Format format = messageFormats.get( name );
+        return ( format != null ) ? format.format( args ) : "<translation '" + name + "' missing>";
     }
 
     @Override
@@ -621,6 +644,11 @@ public class BungeeCord extends ProxyServer
 
     public UserConnection getPlayerByOfflineUUID(UUID name)
     {
+        // Waterfall start - Skip lock if we get a v4 UUID, we're not gonna be in here
+        if (name != null && name.version() == 4) {
+            return null;
+        }
+        // Waterfall end
         connectionLock.readLock().lock();
         try
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index 1c2628d3..774f9398 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -26,19 +26,6 @@ public class BungeeCordLauncher
             System.setProperty( "jdk.util.jar.enableMultiRelease", "force" );
         }
 
-        // Waterfall start
-        // By default, Netty allocates 16MiB arenas for the PooledByteBufAllocator. This is too much
-        // memory for Minecraft, which imposes a maximum packet size of 2MiB! We'll use 4MiB as a more
-        // sane default.
-        //
-        // Note: io.netty.allocator.pageSize << io.netty.allocator.maxOrder is the formula used to
-        // compute the chunk size. We lower maxOrder from its default of 11 to 9. (We also use a null
-        // check, so that the user is free to choose another setting if need be.)
-        if (System.getProperty("io.netty.allocator.maxOrder") == null) {
-            System.setProperty("io.netty.allocator.maxOrder", "9");
-        }
-        // Waterfall end
-
         OptionParser parser = new OptionParser();
         parser.allowsUnrecognizedOptions();
         parser.acceptsAll( Arrays.asList( "help" ), "Show the help" );
@@ -76,7 +63,7 @@ public class BungeeCordLauncher
 
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
-        bungee.getLogger().info( "Enabled Travertine version " + bungee.getVersion() );
+        bungee.getLogger().info( "Enabled InfiniteBungee version " + bungee.getVersion() );
         bungee.start();
 
         if ( !options.has( "noconsole" ) )
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 7b002089..1ea654f1 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -157,7 +157,7 @@ public class BungeeServerInfo implements ServerInfo
         Preconditions.checkNotNull( callback, "callback" );
 
         int pingCache = ProxyServer.getInstance().getConfig().getRemotePingCache();
-        if ( pingCache > 0 && cachedPing != null && ( lastPing - System.currentTimeMillis() ) > pingCache )
+        if ( pingCache > 0 && cachedPing != null && ( System.currentTimeMillis() - lastPing ) > pingCache )
         {
             cachedPing = null;
         }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
index 6c7d4abb..1d377a65 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
@@ -183,7 +183,6 @@ public class BungeeTitle implements Title
     @Override
     public Title send(ProxiedPlayer player)
     {
-        if ( ProtocolConstants.isBeforeOrEq( player.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) ) return this;
         sendPacket( player, clear );
         sendPacket( player, reset );
         sendPacket( player, times );
diff --git a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
index ff6bb8c1..de12a565 100644
--- a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
+++ b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
@@ -1,5 +1,11 @@
 package net.md_5.bungee;
 
+import com.google.common.io.ByteStreams;
+import com.google.common.primitives.Longs;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.charset.StandardCharsets;
 import java.security.GeneralSecurityException;
 import java.security.Key;
 import java.security.KeyFactory;
@@ -7,9 +13,13 @@ import java.security.KeyPair;
 import java.security.KeyPairGenerator;
 import java.security.NoSuchAlgorithmException;
 import java.security.PublicKey;
+import java.security.Signature;
+import java.security.spec.InvalidKeySpecException;
 import java.security.spec.X509EncodedKeySpec;
 import java.util.Arrays;
+import java.util.Base64;
 import java.util.Random;
+import java.util.UUID;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
@@ -18,6 +28,7 @@ import net.md_5.bungee.jni.NativeCode;
 import net.md_5.bungee.jni.cipher.BungeeCipher;
 import net.md_5.bungee.jni.cipher.JavaCipher;
 import net.md_5.bungee.jni.cipher.NativeCipher;
+import net.md_5.bungee.protocol.PlayerPublicKey;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
 
@@ -28,10 +39,12 @@ public class EncryptionUtil
 {
 
     private static final Random random = new Random();
+    private static final Base64.Encoder MIME_ENCODER = Base64.getMimeEncoder( 76, "\n".getBytes( StandardCharsets.UTF_8 ) );
     public static final KeyPair keys;
     @Getter
     private static final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
-    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new );
+    private static final PublicKey MOJANG_KEY;
 
     static
     {
@@ -44,6 +57,14 @@ public class EncryptionUtil
         {
             throw new ExceptionInInitializerError( ex );
         }
+
+        try
+        {
+            MOJANG_KEY = KeyFactory.getInstance( "RSA" ).generatePublic( new X509EncodedKeySpec( ByteStreams.toByteArray( EncryptionUtil.class.getResourceAsStream( "/yggdrasil_session_pubkey.der" ) ) ) );
+        } catch ( IOException | NoSuchAlgorithmException | InvalidKeySpecException ex )
+        {
+            throw new ExceptionInInitializerError( ex );
+        }
     }
 
     public static EncryptionRequest encryptRequest()
@@ -55,17 +76,51 @@ public class EncryptionUtil
         return new EncryptionRequest( hash, pubKey, verify );
     }
 
-    public static SecretKey getSecret(EncryptionResponse resp, EncryptionRequest request) throws GeneralSecurityException
+    public static boolean check(PlayerPublicKey publicKey, UUID uuid) throws GeneralSecurityException
     {
-        Cipher cipher = Cipher.getInstance( "RSA" );
-        cipher.init( Cipher.DECRYPT_MODE, keys.getPrivate() );
-        byte[] decrypted = cipher.doFinal( resp.getVerifyToken() );
+        Signature signature = Signature.getInstance( "SHA1withRSA" );
+        signature.initVerify( MOJANG_KEY );
+
+        byte[] check;
+        if ( uuid != null )
+        {
+            byte[] encoded = getPubkey( publicKey.getKey() ).getEncoded();
+            check = new byte[ 24 + encoded.length ];
+
+            ByteBuffer.wrap( check ).order( ByteOrder.BIG_ENDIAN ).putLong( uuid.getMostSignificantBits() ).putLong( uuid.getLeastSignificantBits() ).putLong( publicKey.getExpiry() ).put( encoded );
+        } else
+        {
+            check = ( publicKey.getExpiry() + "-----BEGIN RSA PUBLIC KEY-----\n" + MIME_ENCODER.encodeToString( getPubkey( publicKey.getKey() ).getEncoded() ) + "\n-----END RSA PUBLIC KEY-----\n" ).getBytes( StandardCharsets.US_ASCII );
+        }
+        signature.update( check );
 
-        if ( !Arrays.equals( request.getVerifyToken(), decrypted ) )
+        return signature.verify( publicKey.getSignature() );
+    }
+
+    public static boolean check(PlayerPublicKey publicKey, EncryptionResponse resp, EncryptionRequest request) throws GeneralSecurityException
+    {
+        if ( publicKey != null )
         {
-            throw new IllegalStateException( "Key pairs do not match!" );
+            Signature signature = Signature.getInstance( "SHA256withRSA" );
+            signature.initVerify( getPubkey( publicKey.getKey() ) );
+
+            signature.update( request.getVerifyToken() );
+            signature.update( Longs.toByteArray( resp.getEncryptionData().getSalt() ) );
+
+            return signature.verify( resp.getEncryptionData().getSignature() );
+        } else
+        {
+            Cipher cipher = Cipher.getInstance( "RSA" );
+            cipher.init( Cipher.DECRYPT_MODE, keys.getPrivate() );
+            byte[] decrypted = cipher.doFinal( resp.getVerifyToken() );
+
+            return Arrays.equals( request.getVerifyToken(), decrypted );
         }
+    }
 
+    public static SecretKey getSecret(EncryptionResponse resp, EncryptionRequest request) throws GeneralSecurityException
+    {
+        Cipher cipher = Cipher.getInstance( "RSA" );
         cipher.init( Cipher.DECRYPT_MODE, keys.getPrivate() );
         return new SecretKeySpec( cipher.doFinal( resp.getSharedSecret() ), "AES" );
     }
@@ -80,7 +135,12 @@ public class EncryptionUtil
 
     public static PublicKey getPubkey(EncryptionRequest request) throws GeneralSecurityException
     {
-        return KeyFactory.getInstance( "RSA" ).generatePublic( new X509EncodedKeySpec( request.getPublicKey() ) );
+        return getPubkey( request.getPublicKey() );
+    }
+
+    private static PublicKey getPubkey(byte[] b) throws GeneralSecurityException
+    {
+        return KeyFactory.getInstance( "RSA" ).generatePublic( new X509EncodedKeySpec( b ) );
     }
 
     public static byte[] encrypt(Key key, byte[] b) throws GeneralSecurityException
diff --git a/proxy/src/main/java/net/md_5/bungee/PlayerInfoSerializer.java b/proxy/src/main/java/net/md_5/bungee/PlayerInfoSerializer.java
index 299a216c..491cf1a1 100644
--- a/proxy/src/main/java/net/md_5/bungee/PlayerInfoSerializer.java
+++ b/proxy/src/main/java/net/md_5/bungee/PlayerInfoSerializer.java
@@ -10,32 +10,17 @@ import com.google.gson.JsonSerializer;
 import java.lang.reflect.Type;
 import java.util.UUID;
 import net.md_5.bungee.api.ServerPing;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 public class PlayerInfoSerializer implements JsonSerializer<ServerPing.PlayerInfo>, JsonDeserializer<ServerPing.PlayerInfo>
 {
 
-    // Travertine start
-    private final int protocol;
-
-    public PlayerInfoSerializer()
-    {
-        this.protocol = ProtocolConstants.MINECRAFT_1_7_6;
-    }
-
-    public PlayerInfoSerializer(int protocol)
-    {
-        this.protocol = protocol;
-    }
-    // Travertine end
-
     @Override
     public ServerPing.PlayerInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
     {
         JsonObject js = json.getAsJsonObject();
         ServerPing.PlayerInfo info = new ServerPing.PlayerInfo( js.get( "name" ).getAsString(), (UUID) null );
         String id = js.get( "id" ).getAsString();
-        if ( ProtocolConstants.isBeforeOrEq( protocol, ProtocolConstants.MINECRAFT_1_7_2 ) || !id.contains( "-" ) ) // Travertine
+        if ( !id.contains( "-" ) )
         {
             info.setId( id );
         } else
@@ -50,15 +35,7 @@ public class PlayerInfoSerializer implements JsonSerializer<ServerPing.PlayerInf
     {
         JsonObject out = new JsonObject();
         out.addProperty( "name", src.getName() );
-        // Travertine start
-        if ( ProtocolConstants.isBeforeOrEq( protocol, ProtocolConstants.MINECRAFT_1_7_2 ) )
-        {
-            out.addProperty( "id", src.getId() );
-        } else
-        {
-            out.addProperty( "id", src.getUniqueId().toString() );
-        }
-        // Travertine end
+        out.addProperty( "id", src.getUniqueId().toString() );
         return out;
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 7ad7a212..8181d76b 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -1,12 +1,13 @@
 package net.md_5.bungee;
 
+import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 import java.util.Arrays; // Waterfall
-import java.nio.charset.StandardCharsets; // Travertine
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
@@ -112,7 +113,7 @@ public class ServerConnector extends PacketHandler
             LoginResult profile = user.getPendingConnection().getLoginProfile();
 
             // Handle properties.
-            LoginResult.Property[] properties = new LoginResult.Property[0];
+            net.md_5.bungee.protocol.Property[] properties = new net.md_5.bungee.protocol.Property[0];
 
             if ( profile != null && profile.getProperties() != null && profile.getProperties().length > 0 )
             {
@@ -122,13 +123,13 @@ public class ServerConnector extends PacketHandler
             if ( user.getForgeClientHandler().isFmlTokenInHandshake() )
             {
                 // Get the current properties and copy them into a slightly bigger array.
-                LoginResult.Property[] newp = Arrays.copyOf( properties, properties.length + 2 );
+                net.md_5.bungee.protocol.Property[] newp = Arrays.copyOf( properties, properties.length + 2 );
 
                 // Add a new profile property that specifies that this user is a Forge user.
-                newp[newp.length - 2] = new LoginResult.Property( ForgeConstants.FML_LOGIN_PROFILE, "true", null );
+                newp[newp.length - 2] = new net.md_5.bungee.protocol.Property( ForgeConstants.FML_LOGIN_PROFILE, "true", null );
 
                 // If we do not perform the replacement, then the IP Forwarding code in Spigot et. al. will try to split on this prematurely.
-                newp[newp.length - 1] = new LoginResult.Property( ForgeConstants.EXTRA_DATA, user.getExtraDataInHandshake().replaceAll( "\0", "\1"), "" );
+                newp[newp.length - 1] = new net.md_5.bungee.protocol.Property( ForgeConstants.EXTRA_DATA, user.getExtraDataInHandshake().replaceAll( "\0", "\1"), "" );
 
                 // All done.
                 properties = newp;
@@ -149,7 +150,7 @@ public class ServerConnector extends PacketHandler
         channel.write( copiedHandshake );
 
         channel.setProtocol( Protocol.LOGIN );
-        channel.write( new LoginRequest( user.getName() ) );
+        channel.write( new LoginRequest( user.getName(), null, user.getUniqueId() ) );
     }
 
     @Override
@@ -227,9 +228,16 @@ public class ServerConnector extends PacketHandler
             }
         }
 
-        for ( PluginMessage message : user.getPendingConnection().getRelayMessages() )
+        PluginMessage brandMessage = user.getPendingConnection().getBrandMessage();
+        if ( brandMessage != null )
         {
-            ch.write( message );
+            ch.write( brandMessage );
+        }
+
+        Set<String> registeredChannels = user.getPendingConnection().getRegisteredChannels();
+        if ( !registeredChannels.isEmpty() )
+        {
+            ch.write( new PluginMessage( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:register" : "REGISTER", Joiner.on( "\0" ).join( registeredChannels ).getBytes( StandardCharsets.UTF_8 ), false ) );
         }
 
         if (!user.isDisableEntityMetadataRewrite() && user.getSettings() != null )
@@ -250,7 +258,7 @@ public class ServerConnector extends PacketHandler
 
             // Set tab list size, TODO: what shall we do about packet mutability
             Login modLogin = new Login( login.getEntityId(), login.isHardcore(), login.getGameMode(), login.getPreviousGameMode(), login.getWorldNames(), login.getDimensions(), login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(),
-                    (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat() );
+                    (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.getSimulationDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat(), login.getDeathLocation() );
 
             user.unsafe().sendPacket( modLogin );
 
@@ -268,24 +276,14 @@ public class ServerConnector extends PacketHandler
                 }
                 user.getSentBossBars().clear();
 
-                user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
+                user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false, login.getDeathLocation() ) );
                 user.getServer().disconnect( "Quitting" );
             } else
             {
-                // Travertine start
-                String brandString = bungee.getName() + " (" + bungee.getVersion() + ")";
-
-                if ( ProtocolConstants.isBeforeOrEq( user.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) )
-                {
-                    user.unsafe().sendPacket( new PluginMessage( "MC|Brand", brandString.getBytes( StandardCharsets.UTF_8 ), handshakeHandler.isServerForge() ) );
-                } else
-                {
-                    ByteBuf brand = ByteBufAllocator.DEFAULT.heapBuffer();
-                    DefinedPacket.writeString(brandString, brand);
-                    user.unsafe().sendPacket( new PluginMessage( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:brand" : "MC|Brand", brand, handshakeHandler.isServerForge() ) );
-                    brand.release();
-                }
-                // Travertine end
+                ByteBuf brand = ByteBufAllocator.DEFAULT.heapBuffer();
+                DefinedPacket.writeString( bungee.getName() + " (" + bungee.getVersion() + ")", brand );
+                user.unsafe().sendPacket( new PluginMessage( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:brand" : "MC|Brand", brand, handshakeHandler.isServerForge() ) );
+                brand.release();
             }
 
             user.setDimension( login.getDimension() );
@@ -298,7 +296,7 @@ public class ServerConnector extends PacketHandler
             if ( !user.isDisableEntityMetadataRewrite() ) { // Waterfall
             for ( Objective objective : serverScoreboard.getObjectives() )
             {
-                user.unsafe().sendPacket( new ScoreboardObjective( objective.getName(), objective.getValue(), objective.getType() == null ? null : ScoreboardObjective.HealthDisplay.fromString(objective.getType()), (byte) 1 ) ); // Travertine - 1.7
+                user.unsafe().sendPacket( new ScoreboardObjective( objective.getName(), objective.getValue(), ScoreboardObjective.HealthDisplay.fromString( objective.getType() ), (byte) 1 ) );
             }
             for ( Score score : serverScoreboard.getScores() )
             {
@@ -329,7 +327,7 @@ public class ServerConnector extends PacketHandler
             user.setDimensionChange( true );
             if ( !user.isDisableEntityMetadataRewrite() && login.getDimension() == user.getDimension() ) // Waterfall - defer
             {
-                user.unsafe().sendPacket( new Respawn( (Integer) login.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
+                user.unsafe().sendPacket( new Respawn( (Integer) login.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false, login.getDeathLocation() ) );
             }
 
             user.setServerEntityId( login.getEntityId() );
@@ -342,21 +340,22 @@ public class ServerConnector extends PacketHandler
                 // Only send if we are not in the same dimension
                 if ( login.getDimension() != user.getDimension() ) // Waterfall - defer
                 {
-                    user.unsafe().sendPacket( new Respawn( (Integer) user.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
+                    user.unsafe().sendPacket( new Respawn( (Integer) user.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false, login.getDeathLocation() ) );
                 }
 
                 Login modLogin = new Login( login.getEntityId(), login.isHardcore(), login.getGameMode(), login.getPreviousGameMode(), login.getWorldNames(), login.getDimensions(), login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(),
-                        (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat() );
+                        (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.getSimulationDistance(), login.isReducedDebugInfo(), login.isNormalRespawn(), login.isDebug(), login.isFlat(), login.getDeathLocation() );
                 user.unsafe().sendPacket(modLogin);
 
                 // Only send if we're in the same dimension
                 if ( login.getDimension() == user.getDimension() ) // Waterfall - defer
                 {
-                    user.unsafe().sendPacket( new Respawn( (Integer) login.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
+                    user.unsafe().sendPacket( new Respawn( (Integer) login.getDimension() >= 0 ? -1 : 0, login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false, login.getDeathLocation() ) );
                 }
             }
             // Waterfall end
-            user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
+            user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false, login.getDeathLocation() ) );
+
             if ( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_14 )
             {
                 user.unsafe().sendPacket( new ViewDistance( login.getViewDistance() ) );
@@ -468,14 +467,6 @@ public class ServerConnector extends PacketHandler
             {
                 this.handshakeHandler.handle( pluginMessage );
 
-                // Travertine start
-                if ( user.getForgeClientHandler().checkUserOutdated() )
-                {
-                    ch.close();
-                    user.getPendingConnects().remove(target);
-                }
-                // Travertine end
-
                 // We send the message as part of the handler, so don't send it here.
                 throw CancelSendSignal.INSTANCE;
             }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 96df0175..b44d13e5 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -61,6 +61,7 @@ import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.SetCompression;
+import net.md_5.bungee.protocol.packet.SystemChat;
 import net.md_5.bungee.tab.ServerUnique;
 import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
@@ -155,10 +156,7 @@ public final class UserConnection implements ProxiedPlayer
 
     public void init()
     {
-        if ( getPendingConnection().getVersion() < ProtocolConstants.MINECRAFT_1_16_2 || !bungee.getConfig().isIpForward() )
-        {
-            this.entityRewrite = EntityMap.getEntityMap( getPendingConnection().getVersion() );
-        }
+        this.entityRewrite = EntityMap.getEntityMap( getPendingConnection().getVersion() );
 
         this.displayName = name;
 
@@ -196,7 +194,6 @@ public final class UserConnection implements ProxiedPlayer
     public void setDisplayName(String name)
     {
         Preconditions.checkNotNull( name, "displayName" );
-        Preconditions.checkArgument( name.length() <= 16, "Display name cannot be longer than 16 characters" ); // Travertine
         displayName = name;
     }
 
@@ -271,12 +268,16 @@ public final class UserConnection implements ProxiedPlayer
         connect(info, callback, retry, ServerConnectEvent.Reason.PLUGIN, timeout);
     }
 
-    public void connect(ServerInfo info, final Callback<Boolean> callback, final boolean retry, ServerConnectEvent.Reason reason, final int timeout)
+    public void connect(ServerInfo info, final Callback<Boolean> callback, final boolean retry, ServerConnectEvent.Reason reason, final int timeout) {
+        this.connect(info, callback, retry, reason, timeout, true);
+    }
+
+    public void connect(ServerInfo info, final Callback<Boolean> callback, final boolean retry, ServerConnectEvent.Reason reason, final int timeout, boolean sendFeedback)
     {
         // Waterfall end
         Preconditions.checkNotNull( info, "info" );
 
-        ServerConnectRequest.Builder builder = ServerConnectRequest.builder().retry( retry ).reason( reason ).target( info );
+        ServerConnectRequest.Builder builder = ServerConnectRequest.builder().retry( retry ).reason( reason ).target( info ).sendFeedback(sendFeedback); // Waterfall - feedback param
         builder.connectTimeout(timeout); // Waterfall
         if ( callback != null )
         {
@@ -324,7 +325,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTED, null );
             }
 
-            sendMessage( bungee.getTranslation( "already_connected" ) );
+            if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "already_connected" ) ); // Waterfall
             return;
         }
         if ( pendingConnects.contains( target ) )
@@ -334,7 +335,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTING, null );
             }
 
-            sendMessage( bungee.getTranslation( "already_connecting" ) );
+            if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "already_connecting" ) ); // Waterfall
             return;
         }
 
@@ -370,14 +371,14 @@ public final class UserConnection implements ProxiedPlayer
                     ServerInfo def = updateAndGetNextServer( target );
                     if ( request.isRetry() && def != null && ( getServer() == null || def != getServer().getInfo() ) )
                     {
-                        sendMessage( bungee.getTranslation( "fallback_lobby" ) );
-                        connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout() ); // Waterfall
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "fallback_lobby" ) ); // Waterfall
+                        connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout(), request.isSendFeedback() ); // Waterfall
                     } else if ( dimensionChange )
                     {
-                        disconnect( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
+                        disconnect( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
                     } else
                     {
-                        sendMessage( bungee.getTranslation( "fallback_kick", future.cause().getClass().getName() ) );
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
                     }
                 }
             }
@@ -396,6 +397,12 @@ public final class UserConnection implements ProxiedPlayer
         b.connect().addListener( listener );
     }
 
+    private String connectionFailMessage(Throwable cause)
+    {
+        bungee.getLogger().log(Level.WARNING, "Error occurred processing connection for " + this.name + " " + Util.exception( cause, false )); // Waterfall
+        return ""; // Waterfall
+    }
+
     @Override
     public void disconnect(String reason)
     {
@@ -437,6 +444,10 @@ public final class UserConnection implements ProxiedPlayer
     public void chat(String message)
     {
         Preconditions.checkState( server != null, "Not connected to server" );
+        if ( getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            throw new UnsupportedOperationException( "Cannot spoof chat on this client version!" );
+        }
         server.getCh().write( new Chat( message ) );
     }
 
@@ -493,7 +504,19 @@ public final class UserConnection implements ProxiedPlayer
 
     private void sendMessage(ChatMessageType position, UUID sender, String message)
     {
-        unsafe().sendPacket( new Chat( message, (byte) position.ordinal(), sender ) );
+        if ( getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_19 )
+        {
+            // Align with Spigot and remove client side formatting for now
+            if ( position == ChatMessageType.CHAT )
+            {
+                position = ChatMessageType.SYSTEM;
+            }
+
+            unsafe().sendPacket( new SystemChat( message, position.ordinal() ) );
+        } else
+        {
+            unsafe().sendPacket( new Chat( message, (byte) position.ordinal(), sender ) );
+        }
     }
 
     private void sendMessage(ChatMessageType position, UUID sender, BaseComponent... message)
@@ -501,8 +524,7 @@ public final class UserConnection implements ProxiedPlayer
         // transform score components
         message = ChatComponentTransformer.getInstance().transform( this, true, message );
 
-        // Action bar doesn't display the new JSON formattings, legacy works - send it using this for now
-        if ( position == ChatMessageType.ACTION_BAR && getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_8 ) // Travertine
+        if ( position == ChatMessageType.ACTION_BAR && getPendingConnection().getVersion() < ProtocolConstants.MINECRAFT_1_17 )
         {
             // Versions older than 1.11 cannot send the Action bar with the new JSON formattings
             // Fix by converting to a legacy message, see https://bugs.mojang.com/browse/MC-119145
@@ -698,7 +720,6 @@ public final class UserConnection implements ProxiedPlayer
     @Override
     public void setTabHeader(BaseComponent header, BaseComponent footer)
     {
-        if ( ProtocolConstants.isBeforeOrEq( pendingConnection.getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) ) return; // Travertine
         header = ChatComponentTransformer.getInstance().transform( this, true, header )[0];
         footer = ChatComponentTransformer.getInstance().transform( this, true, footer )[0];
 
@@ -711,7 +732,6 @@ public final class UserConnection implements ProxiedPlayer
     @Override
     public void setTabHeader(BaseComponent[] header, BaseComponent[] footer)
     {
-        if ( ProtocolConstants.isBeforeOrEq( pendingConnection.getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) ) return; // Travertine
         header = ChatComponentTransformer.getInstance().transform( this, true, header );
         footer = ChatComponentTransformer.getInstance().transform( this, true, footer );
 
@@ -741,7 +761,6 @@ public final class UserConnection implements ProxiedPlayer
 
     public void setCompressionThreshold(int compressionThreshold)
     {
-        if ( ProtocolConstants.isBeforeOrEq( pendingConnection.getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) ) return; // Travertine
         if ( !ch.isClosing() && this.compressionThreshold == -1 && compressionThreshold >= 0 )
         {
             this.compressionThreshold = compressionThreshold;
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandBugs.java b/proxy/src/main/java/net/md_5/bungee/command/CommandBugs.java
new file mode 100644
index 00000000..5054d4ae
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandBugs.java
@@ -0,0 +1,21 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandBugs extends Command
+{
+
+    public CommandBugs()
+    {
+        super( "bugs", "infinite.command.bugs", "bug" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        sender.sendMessage( ChatColor.AQUA + "§bGo to our discord server to report bugs! https://discord.gg/mWxUFqsynj " );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
index 4e2c6129..5a368d19 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
@@ -16,6 +16,6 @@ public class CommandBungee extends Command
     @Override
     public void execute(CommandSender sender, String[] args)
     {
-        sender.sendMessage( ChatColor.BLUE + "This server is running Travertine version " + ProxyServer.getInstance().getVersion() + " by md_5" );
+        sender.sendMessage( ChatColor.BLUE + "This server is running InfiniteBungee by the Infinite Development Team, a fork of Waterfall by PaperMC and md_5" );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandDiscord.java b/proxy/src/main/java/net/md_5/bungee/command/CommandDiscord.java
new file mode 100644
index 00000000..1921e4f9
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandDiscord.java
@@ -0,0 +1,21 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandDiscord extends Command
+{
+
+    public CommandDiscord()
+    {
+        super( "discord" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        sender.sendMessage( ChatColor.AQUA + "Join our discord @ https://discord.gg/K6xQYgAtTw" );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
index d87d0b95..34075ff8 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
@@ -2,6 +2,7 @@ package net.md_5.bungee.command;
 
 import com.google.common.base.Joiner;
 import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.plugin.Command;
 
@@ -14,7 +15,7 @@ public class CommandEnd extends Command
 
     public CommandEnd()
     {
-        super( "end", "bungeecord.command.end" );
+        super( "end", "infinitebungee.command.end" );
     }
 
     @Override
@@ -25,7 +26,7 @@ public class CommandEnd extends Command
             BungeeCord.getInstance().stop();
         } else
         {
-            BungeeCord.getInstance().stop( Joiner.on( ' ' ).join( args ) );
+            BungeeCord.getInstance().stop( ChatColor.translateAlternateColorCodes( '&', Joiner.on( ' ' ).join( args ) ) );
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandHelp.java b/proxy/src/main/java/net/md_5/bungee/command/CommandHelp.java
new file mode 100644
index 00000000..8b2807f6
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandHelp.java
@@ -0,0 +1,21 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandHelp extends Command
+{
+
+    public CommandHelp()
+    {
+        super( "help" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        sender.sendMessage( ChatColor.AQUA + "For commands help please vistit help.infinitenetworkmc.com" );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java b/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
index 1fd5a546..2f706f53 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
@@ -9,7 +9,7 @@ public class CommandIP extends PlayerCommand
 
     public CommandIP()
     {
-        super( "ip", "bungeecord.command.ip" );
+        super( "ip", "infinitebungee.command.ip" );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandInfinite.java b/proxy/src/main/java/net/md_5/bungee/command/CommandInfinite.java
new file mode 100644
index 00000000..05e92d70
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandInfinite.java
@@ -0,0 +1,21 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandInfinite extends Command
+{
+
+    public CommandInfinite()
+    {
+        super( "Infinite" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        sender.sendMessage( ChatColor.AQUA + "§aWelcome to §bInfinite§a! If you have any §dquestions or §cconcerns§a let us know on our discord!" );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandInfiniteBungee.java b/proxy/src/main/java/net/md_5/bungee/command/CommandInfiniteBungee.java
new file mode 100644
index 00000000..9c53c483
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandInfiniteBungee.java
@@ -0,0 +1,21 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandInfiniteBungee extends Command
+{
+
+    public CommandInfiniteBungee()
+    {
+        super( "infinitebungee" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        sender.sendMessage( ChatColor.BLUE + "This server is running InfiniteBungee by the Infinite Development Team, a fork of Waterfall by PaperMC and md_5" );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
index 18422669..fff924e8 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
@@ -12,7 +12,7 @@ public class CommandPerms extends Command
 
     public CommandPerms()
     {
-        super( "perms" );
+        super( "infiniteperms" );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index dca7601b..0af18cc6 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -11,7 +11,7 @@ public class CommandReload extends Command
 
     public CommandReload()
     {
-        super( "greload", "bungeecord.command.reload" );
+        super( "greload", "infinitebungee.command.reload" );
     }
 
     @Override
@@ -23,7 +23,7 @@ public class CommandReload extends Command
         BungeeCord.getInstance().startListeners();
         BungeeCord.getInstance().getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
 
-        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Travertine has been reloaded."
-                + " This is NOT advisable and you will not be supported with any issues that arise! Please restart Travertine ASAP." );
+        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "InfiniteBungee has been reloaded."
+                + " This is NOT advisable and you will not be supported with any issues that arise! Please restart InfiniteBungee ASAP." );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
index 1f2d5a70..2e0c63d1 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
@@ -8,5 +8,5 @@ import net.md_5.bungee.jni.zlib.NativeZlib;
 public class CompressFactory
 {
 
-    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new );
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
index 37fe6ac7..eaedf4bc 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
@@ -35,8 +35,7 @@ public class PacketDecompressor extends MessageToMessageDecoder<ByteBuf>
         int size = DefinedPacket.readVarInt( in );
         if ( size == 0 )
         {
-            out.add( in.slice().retain() );
-            in.skipBytes( in.readableBytes() );
+            out.add( in.retain() );
         } else
         {
             Preconditions.checkArgument( size >= compressionThreshold, "Decompressed size %s less than compression threshold %s", size, compressionThreshold);
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 85d2197a..8911bee8 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -53,6 +53,10 @@ public abstract class Configuration implements ProxyConfig
      * Should we check minecraft.net auth.
      */
     private boolean onlineMode = true;
+    /**
+     * Whether to check the authentication server public key.
+     */
+    private boolean enforceSecureProfile;
     /**
      * Whether we log proxy commands to the proxy log
      */
@@ -93,6 +97,7 @@ public abstract class Configuration implements ProxyConfig
         timeout = adapter.getInt( "timeout", timeout );
         uuid = adapter.getString( "stats", uuid );
         onlineMode = adapter.getBoolean( "online_mode", onlineMode );
+        enforceSecureProfile = adapter.getBoolean( "enforce_secure_profile", enforceSecureProfile );
         logCommands = adapter.getBoolean( "log_commands", logCommands );
         logPings = adapter.getBoolean( "log_pings", logPings );
         remotePingCache = adapter.getInt( "remote_ping_cache", remotePingCache );
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index e9ecf5d1..98e1d9a2 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -106,7 +106,7 @@ public class YamlConfig implements ConfigurationAdapter
             } ) );
             set( "permissions.admin", Arrays.asList( new String[]
             {
-                "bungeecord.command.alert", "bungeecord.command.end", "bungeecord.command.ip", "bungeecord.command.reload"
+                "bungeecord.command.alert", "bungeecord.command.end", "bungeecord.command.ip", "bungeecord.command.reload", "bungeecord.command.kick"
             } ) );
         }
 
@@ -227,7 +227,7 @@ public class YamlConfig implements ConfigurationAdapter
             Map<String, Object> val = entry.getValue();
             String name = entry.getKey();
             String addr = get( "address", "localhost:25565", val );
-            String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another Travertine - Forced Host", val ) );
+            String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another InfiniteBungee - Forced Host", val ) );
             boolean restricted = get( "restricted", false, val );
             SocketAddress address = Util.getAddr( addr );
             ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index d54d8539..89b98b36 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -11,16 +11,13 @@ import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
-import com.mojang.brigadier.tree.LiteralCommandNode;
-
-import io.github.waterfallmc.waterfall.event.ProxyDefineCommandsEvent; // Waterfall
+import com.mojang.brigadier.tree.CommandNode;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.unix.DomainSocketAddress;
 import java.io.DataInput;
 import java.net.InetSocketAddress;
-import java.nio.charset.StandardCharsets; // Waterfall
 import java.util.ArrayList;
 import java.util.HashMap; // Waterfall
 import java.util.List;
@@ -61,11 +58,14 @@ import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
+import net.md_5.bungee.protocol.packet.PlayerListItemUpdate;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
 import net.md_5.bungee.protocol.packet.ScoreboardObjective;
 import net.md_5.bungee.protocol.packet.ScoreboardScore;
+import net.md_5.bungee.protocol.packet.ServerData;
 import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.tab.TabList;
@@ -74,6 +74,13 @@ import net.md_5.bungee.tab.TabList;
 public class DownstreamBridge extends PacketHandler
 {
 
+    // #3246: Recent versions of MinecraftForge alter Vanilla behaviour and require a command so that the executable flag is set
+    // If the flag is not set, then the command will appear and successfully tab complete, but cannot be successfully executed
+    private static final com.mojang.brigadier.Command DUMMY_COMMAND = (context) ->
+    {
+        return 0;
+    };
+    //
     private final ProxyServer bungee;
     private final UserConnection con;
     private final ServerConnection server;
@@ -173,6 +180,20 @@ public class DownstreamBridge extends PacketHandler
         // Waterfall end
     }
 
+    @Override
+    public void handle(PlayerListItemRemove playerList) throws Exception
+    {
+        con.getTabListHandler().onUpdate( TabList.rewrite( playerList ) );
+        throw CancelSendSignal.INSTANCE; // Always throw because of profile rewriting
+    }
+
+    @Override
+    public void handle(PlayerListItemUpdate playerList) throws Exception
+    {
+        con.getTabListHandler().onUpdate( TabList.rewrite( playerList ) );
+        throw CancelSendSignal.INSTANCE; // Always throw because of profile rewriting
+    }
+
     @Override
     public void handle(ScoreboardObjective objective) throws Exception
     {
@@ -180,7 +201,7 @@ public class DownstreamBridge extends PacketHandler
         switch ( objective.getAction() )
         {
             case 0:
-                serverScoreboard.addObjective( new Objective( objective.getName(), objective.getValue(), objective.getType() != null ? objective.getType().toString() : null) ); // Travertine - 1.7 protocol support
+                serverScoreboard.addObjective( new Objective( objective.getName(), objective.getValue(), objective.getType().toString() ) );
                 break;
             case 1:
                 serverScoreboard.removeObjective( objective.getName() );
@@ -190,7 +211,7 @@ public class DownstreamBridge extends PacketHandler
                 if ( oldObjective != null )
                 {
                     oldObjective.setValue( objective.getValue() );
-                    oldObjective.setType( objective.getType() != null ? objective.getType().toString() : null ); // Travertine - 1.7 protocol support
+                    oldObjective.setType( objective.getType().toString() );
                 }
                 break;
             default:
@@ -276,6 +297,7 @@ public class DownstreamBridge extends PacketHandler
     }
 
     @Override
+    @SuppressWarnings("checkstyle:avoidnestedblocks")
     public void handle(PluginMessage pluginMessage) throws Exception
     {
         PluginMessageEvent event = new PluginMessageEvent( server, con, pluginMessage.getTag(), pluginMessage.getData().clone() );
@@ -287,28 +309,16 @@ public class DownstreamBridge extends PacketHandler
 
         if ( pluginMessage.getTag().equals( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:brand" : "MC|Brand" ) )
         {
-            // Travertine start
-            if ( ProtocolConstants.isAfterOrEq( con.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_8 ) )
-            {
-                try
-                {
-                    ByteBuf brand = Unpooled.wrappedBuffer(pluginMessage.getData());
-                    String serverBrand = DefinedPacket.readString(brand);
-                    brand.release();
-                    brand = ByteBufAllocator.DEFAULT.heapBuffer();
-                    DefinedPacket.writeString(bungee.getName() + " <- " + serverBrand, brand ); // Waterfall
-                    pluginMessage.setData(brand);
-                    brand.release();
-                } catch (Exception ProtocolHacksSuck)
-                {
-                    return;
-                }
-            } else
-            {
-                String serverBrand = new String( pluginMessage.getData(), StandardCharsets.UTF_8);
-                pluginMessage.setData( ( bungee.getName() + " <- " + serverBrand ).getBytes(StandardCharsets.UTF_8) ); // Travertine
-            }
-            // Travertine end
+            ByteBuf brand = Unpooled.wrappedBuffer( pluginMessage.getData() );
+            String serverBrand = DefinedPacket.readString( brand );
+            brand.release();
+
+            Preconditions.checkState( !serverBrand.contains( bungee.getName() ), "Cannot connect proxy to itself!" );
+
+            brand = ByteBufAllocator.DEFAULT.heapBuffer();
+            DefinedPacket.writeString( bungee.getName() + " <- " + serverBrand, brand ); // Waterfall
+            pluginMessage.setData( brand );
+            brand.release();
             // changes in the packet are ignored so we need to send it manually
             con.unsafe().sendPacket( pluginMessage );
             throw CancelSendSignal.INSTANCE;
@@ -320,12 +330,36 @@ public class DownstreamBridge extends PacketHandler
             ByteArrayDataOutput out = ByteStreams.newDataOutput();
             String subChannel = in.readUTF();
 
-            if ( subChannel.equals( "ForwardToPlayer" ) )
+            switch ( subChannel )
             {
-                ProxiedPlayer target = bungee.getPlayer( in.readUTF() );
-                if ( target != null )
+                case "ForwardToPlayer":
+                {
+                    ProxiedPlayer target = bungee.getPlayer( in.readUTF() );
+                    if ( target != null )
+                    {
+                        // Read data from server
+                        String channel = in.readUTF();
+                        short len = in.readShort();
+                        byte[] data = new byte[ len ];
+                        in.readFully( data );
+
+                        // Prepare new data to send
+                        out.writeUTF( channel );
+                        out.writeShort( data.length );
+                        out.write( data );
+                        byte[] payload = out.toByteArray();
+
+                        target.getServer().sendData( "BungeeCord", payload );
+                    }
+
+                    // Null out stream, important as we don't want to send to ourselves
+                    out = null;
+                    break;
+                }
+                case "Forward":
                 {
                     // Read data from server
+                    String target = in.readUTF();
                     String channel = in.readUTF();
                     short len = in.readShort();
                     byte[] data = new byte[ len ];
@@ -337,226 +371,221 @@ public class DownstreamBridge extends PacketHandler
                     out.write( data );
                     byte[] payload = out.toByteArray();
 
-                    target.getServer().sendData( "BungeeCord", payload );
-                }
+                    // Null out stream, important as we don't want to send to ourselves
+                    out = null;
 
-                // Null out stream, important as we don't want to send to ourselves
-                out = null;
-            }
-            if ( subChannel.equals( "Forward" ) )
-            {
-                // Read data from server
-                String target = in.readUTF();
-                String channel = in.readUTF();
-                short len = in.readShort();
-                byte[] data = new byte[ len ];
-                in.readFully( data );
-
-                // Prepare new data to send
-                out.writeUTF( channel );
-                out.writeShort( data.length );
-                out.write( data );
-                byte[] payload = out.toByteArray();
-
-                // Null out stream, important as we don't want to send to ourselves
-                out = null;
-
-                if ( target.equals( "ALL" ) )
+                    switch ( target )
+                    {
+                        case "ALL":
+                            for ( ServerInfo server : bungee.getServers().values() )
+                            {
+                                if ( server != this.server.getInfo() )
+                                {
+                                    server.sendData( "BungeeCord", payload );
+                                }
+                            }
+                            break;
+                        case "ONLINE":
+                            for ( ServerInfo server : bungee.getServers().values() )
+                            {
+                                if ( server != this.server.getInfo() )
+                                {
+                                    server.sendData( "BungeeCord", payload, false );
+                                }
+                            }
+                            break;
+                        default:
+                            ServerInfo server = bungee.getServerInfo( target );
+                            if ( server != null )
+                            {
+                                server.sendData( "BungeeCord", payload );
+                            }
+                            break;
+                    }
+                    break;
+                }
+                case "Connect":
                 {
-                    for ( ServerInfo server : bungee.getServers().values() )
+                    ServerInfo server = bungee.getServerInfo( in.readUTF() );
+                    if ( server != null )
                     {
-                        if ( server != this.server.getInfo() )
-                        {
-                            server.sendData( "BungeeCord", payload );
-                        }
+                        con.connect( server, ServerConnectEvent.Reason.PLUGIN_MESSAGE );
                     }
-                } else if ( target.equals( "ONLINE" ) )
+                    break;
+                }
+                case "ConnectOther":
                 {
-                    for ( ServerInfo server : bungee.getServers().values() )
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                    if ( player != null )
                     {
-                        if ( server != this.server.getInfo() )
+                        ServerInfo server = bungee.getServerInfo( in.readUTF() );
+                        if ( server != null )
                         {
-                            server.sendData( "BungeeCord", payload, false );
+                            player.connect( server );
                         }
                     }
-                } else
+                    break;
+                }
+                case "IP":
+                    out.writeUTF( "IP" );
+                    if ( con.getSocketAddress() instanceof InetSocketAddress )
+                    {
+                        out.writeUTF( con.getAddress().getHostString() );
+                        out.writeInt( con.getAddress().getPort() );
+                    } else
+                    {
+                        out.writeUTF( "unix://" + ( (DomainSocketAddress) con.getSocketAddress() ).path() );
+                        out.writeInt( 0 );
+                    }
+                    break;
+                case "IPOther":
                 {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                    if ( player != null )
                     {
-                        server.sendData( "BungeeCord", payload );
+                        out.writeUTF( "IPOther" );
+                        out.writeUTF( player.getName() );
+                        if ( player.getSocketAddress() instanceof InetSocketAddress )
+                        {
+                            InetSocketAddress address = (InetSocketAddress) player.getSocketAddress();
+                            out.writeUTF( address.getHostString() );
+                            out.writeInt( address.getPort() );
+                        } else
+                        {
+                            out.writeUTF( "unix://" + ( (DomainSocketAddress) player.getSocketAddress() ).path() );
+                            out.writeInt( 0 );
+                        }
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "Connect" ) )
-            {
-                ServerInfo server = bungee.getServerInfo( in.readUTF() );
-                if ( server != null )
+                case "PlayerCount":
                 {
-                    con.connect( server, ServerConnectEvent.Reason.PLUGIN_MESSAGE );
+                    String target = in.readUTF();
+                    out.writeUTF( "PlayerCount" );
+                    if ( target.equals( "ALL" ) )
+                    {
+                        out.writeUTF( "ALL" );
+                        out.writeInt( bungee.getOnlineCount() );
+                    } else
+                    {
+                        ServerInfo server = bungee.getServerInfo( target );
+                        if ( server != null )
+                        {
+                            out.writeUTF( server.getName() );
+                            out.writeInt( server.getPlayers().size() );
+                        }
+                    }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "ConnectOther" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
+                case "PlayerList":
                 {
-                    ServerInfo server = bungee.getServerInfo( in.readUTF() );
-                    if ( server != null )
+                    String target = in.readUTF();
+                    out.writeUTF( "PlayerList" );
+                    if ( target.equals( "ALL" ) )
                     {
-                        player.connect( server );
+                        out.writeUTF( "ALL" );
+                        out.writeUTF( Util.csv( bungee.getPlayers() ) );
+                    } else
+                    {
+                        ServerInfo server = bungee.getServerInfo( target );
+                        if ( server != null )
+                        {
+                            out.writeUTF( server.getName() );
+                            out.writeUTF( Util.csv( server.getPlayers() ) );
+                        }
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "IP" ) )
-            {
-                out.writeUTF( "IP" );
-                if ( con.getSocketAddress() instanceof InetSocketAddress )
-                {
-                    out.writeUTF( con.getAddress().getHostString() );
-                    out.writeInt( con.getAddress().getPort() );
-                } else
+                case "GetServers":
                 {
-                    out.writeUTF( "unix://" + ( (DomainSocketAddress) con.getSocketAddress() ).path() );
-                    out.writeInt( 0 );
+                    out.writeUTF( "GetServers" );
+                    out.writeUTF( Util.csv( bungee.getServers().keySet() ) );
+                    break;
                 }
-            }
-            if ( subChannel.equals( "IPOther" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
+                case "Message":
                 {
-                    out.writeUTF( "IPOther" );
-                    out.writeUTF( player.getName() );
-                    if ( player.getSocketAddress() instanceof InetSocketAddress )
+                    String target = in.readUTF();
+                    String message = in.readUTF();
+                    if ( target.equals( "ALL" ) )
                     {
-                        InetSocketAddress address = (InetSocketAddress) player.getSocketAddress();
-                        out.writeUTF( address.getHostString() );
-                        out.writeInt( address.getPort() );
+                        for ( ProxiedPlayer player : bungee.getPlayers() )
+                        {
+                            player.sendMessage( message );
+                        }
                     } else
                     {
-                        out.writeUTF( "unix://" + ( (DomainSocketAddress) player.getSocketAddress() ).path() );
-                        out.writeInt( 0 );
+                        ProxiedPlayer player = bungee.getPlayer( target );
+                        if ( player != null )
+                        {
+                            player.sendMessage( message );
+                        }
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "PlayerCount" ) )
-            {
-                String target = in.readUTF();
-                out.writeUTF( "PlayerCount" );
-                if ( target.equals( "ALL" ) )
-                {
-                    out.writeUTF( "ALL" );
-                    out.writeInt( bungee.getOnlineCount() );
-                } else
+                case "MessageRaw":
                 {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
+                    String target = in.readUTF();
+                    BaseComponent[] message = ComponentSerializer.parse( in.readUTF() );
+                    if ( target.equals( "ALL" ) )
                     {
-                        out.writeUTF( server.getName() );
-                        out.writeInt( server.getPlayers().size() );
+                        for ( ProxiedPlayer player : bungee.getPlayers() )
+                        {
+                            player.sendMessage( message );
+                        }
+                    } else
+                    {
+                        ProxiedPlayer player = bungee.getPlayer( target );
+                        if ( player != null )
+                        {
+                            player.sendMessage( message );
+                        }
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "PlayerList" ) )
-            {
-                String target = in.readUTF();
-                out.writeUTF( "PlayerList" );
-                if ( target.equals( "ALL" ) )
+                case "GetServer":
                 {
-                    out.writeUTF( "ALL" );
-                    out.writeUTF( Util.csv( bungee.getPlayers() ) );
-                } else
-                {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
-                    {
-                        out.writeUTF( server.getName() );
-                        out.writeUTF( Util.csv( server.getPlayers() ) );
-                    }
+                    out.writeUTF( "GetServer" );
+                    out.writeUTF( server.getInfo().getName() );
+                    break;
                 }
-            }
-            if ( subChannel.equals( "GetServers" ) )
-            {
-                out.writeUTF( "GetServers" );
-                out.writeUTF( Util.csv( bungee.getServers().keySet() ) );
-            }
-            if ( subChannel.equals( "Message" ) )
-            {
-                String target = in.readUTF();
-                String message = in.readUTF();
-                if ( target.equals( "ALL" ) )
+                case "UUID":
                 {
-                    for ( ProxiedPlayer player : bungee.getPlayers() )
-                    {
-                        player.sendMessage( message );
-                    }
-                } else
+                    out.writeUTF( "UUID" );
+                    out.writeUTF( con.getUUID() );
+                    break;
+                }
+                case "UUIDOther":
                 {
-                    ProxiedPlayer player = bungee.getPlayer( target );
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
                     if ( player != null )
                     {
-                        player.sendMessage( message );
+                        out.writeUTF( "UUIDOther" );
+                        out.writeUTF( player.getName() );
+                        out.writeUTF( player.getUUID() );
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "MessageRaw" ) )
-            {
-                String target = in.readUTF();
-                BaseComponent[] message = ComponentSerializer.parse( in.readUTF() );
-                if ( target.equals( "ALL" ) )
+                case "ServerIP":
                 {
-                    for ( ProxiedPlayer player : bungee.getPlayers() )
+                    ServerInfo info = bungee.getServerInfo( in.readUTF() );
+                    if ( info != null && !info.getAddress().isUnresolved() )
                     {
-                        player.sendMessage( message );
+                        out.writeUTF( "ServerIP" );
+                        out.writeUTF( info.getName() );
+                        out.writeUTF( info.getAddress().getAddress().getHostAddress() );
+                        out.writeShort( info.getAddress().getPort() );
                     }
-                } else
+                    break;
+                }
+                case "KickPlayer":
                 {
-                    ProxiedPlayer player = bungee.getPlayer( target );
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
                     if ( player != null )
                     {
-                        player.sendMessage( message );
+                        String kickReason = in.readUTF();
+                        player.disconnect( new TextComponent( kickReason ) );
                     }
-                }
-            }
-            if ( subChannel.equals( "GetServer" ) )
-            {
-                out.writeUTF( "GetServer" );
-                out.writeUTF( server.getInfo().getName() );
-            }
-            if ( subChannel.equals( "UUID" ) )
-            {
-                out.writeUTF( "UUID" );
-                out.writeUTF( con.getUUID() );
-            }
-            if ( subChannel.equals( "UUIDOther" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
-                {
-                    out.writeUTF( "UUIDOther" );
-                    out.writeUTF( player.getName() );
-                    out.writeUTF( player.getUUID() );
-                }
-            }
-            if ( subChannel.equals( "ServerIP" ) )
-            {
-                ServerInfo info = bungee.getServerInfo( in.readUTF() );
-                if ( info != null && !info.getAddress().isUnresolved() )
-                {
-                    out.writeUTF( "ServerIP" );
-                    out.writeUTF( info.getName() );
-                    out.writeUTF( info.getAddress().getAddress().getHostAddress() );
-                    out.writeShort( info.getAddress().getPort() );
-                }
-            }
-            if ( subChannel.equals( "KickPlayer" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
-                {
-                    String kickReason = in.readUTF();
-                    player.disconnect( new TextComponent( kickReason ) );
+                    break;
                 }
             }
 
@@ -578,7 +607,7 @@ public class DownstreamBridge extends PacketHandler
     public void handle(Kick kick) throws Exception
     {
         ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-        if ( Objects.equals( server.getInfo(), def ) )
+        if ( java.util.Objects.equals( server.getInfo(), def ) )
         {
             def = null;
         }
@@ -713,7 +742,7 @@ public class DownstreamBridge extends PacketHandler
             }
         }
 
-        ProxyDefineCommandsEvent event = new ProxyDefineCommandsEvent( this.server, this.con, commandMap );
+        io.github.waterfallmc.waterfall.event.ProxyDefineCommandsEvent event = new io.github.waterfallmc.waterfall.event.ProxyDefineCommandsEvent( this.server, this.con, commandMap );
         bungee.getPluginManager().callEvent( event );
 
         for ( Map.Entry<String, Command> command : event.getCommands().entrySet() )
@@ -722,9 +751,9 @@ public class DownstreamBridge extends PacketHandler
             if ( true ) // Moved up
             // Waterfall end
             {
-                LiteralCommandNode dummy = LiteralArgumentBuilder.literal( command.getKey() )
+                CommandNode dummy = LiteralArgumentBuilder.literal( command.getKey() ).executes( DUMMY_COMMAND )
                         .then( RequiredArgumentBuilder.argument( "args", StringArgumentType.greedyString() )
-                                .suggests( Commands.SuggestionRegistry.ASK_SERVER ) )
+                                .suggests( Commands.SuggestionRegistry.ASK_SERVER ).executes( DUMMY_COMMAND ) )
                         .build();
                 commands.getRoot().addChild( dummy );
 
@@ -739,6 +768,15 @@ public class DownstreamBridge extends PacketHandler
         }
     }
 
+    @Override
+    public void handle(ServerData serverData) throws Exception
+    {
+        serverData.setMotd( null );
+        serverData.setIcon( null );
+        con.unsafe().sendPacket( serverData );
+        throw CancelSendSignal.INSTANCE;
+    }
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index d66dddc1..a19bbdd0 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -3,14 +3,16 @@ package net.md_5.bungee.connection;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
 import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.GeneralSecurityException;
 import java.security.MessageDigest;
-import java.util.List;
+import java.time.Instant;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Level;
 import javax.crypto.SecretKey;
@@ -26,7 +28,6 @@ import net.md_5.bungee.Util;
 import net.md_5.bungee.api.AbstractReconnectHandler;
 import net.md_5.bungee.api.Callback;
 import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.Favicon;
 import net.md_5.bungee.api.ServerPing;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
@@ -51,6 +52,7 @@ import net.md_5.bungee.netty.cipher.CipherDecoder;
 import net.md_5.bungee.netty.cipher.CipherEncoder;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.PacketWrapper;
+import net.md_5.bungee.protocol.PlayerPublicKey;
 import net.md_5.bungee.protocol.Protocol;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
@@ -66,7 +68,7 @@ import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.StatusRequest;
 import net.md_5.bungee.protocol.packet.StatusResponse;
-import net.md_5.bungee.util.BoundedArrayList;
+import net.md_5.bungee.util.AllowedCharacters;
 import net.md_5.bungee.util.BufUtil;
 import net.md_5.bungee.util.QuietException;
 
@@ -86,7 +88,9 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private LoginRequest loginRequest;
     private EncryptionRequest request;
     @Getter
-    private final List<PluginMessage> relayMessages = new BoundedArrayList<>( 128 );
+    private PluginMessage brandMessage;
+    @Getter
+    private final Set<String> registeredChannels = new HashSet<>();
     private State thisState = State.HANDSHAKE;
     private final Unsafe unsafe = new Unsafe()
     {
@@ -121,12 +125,12 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private enum State
     {
 
-        HANDSHAKE, STATUS, PING, USERNAME, ENCRYPT, FINISHED;
+        HANDSHAKE, STATUS, PING, USERNAME, ENCRYPT, FINISHING;
     }
 
     private boolean canSendKickMessage()
     {
-        return thisState == State.USERNAME || thisState == State.ENCRYPT || thisState == State.FINISHED;
+        return thisState == State.USERNAME || thisState == State.ENCRYPT || thisState == State.FINISHING;
     }
 
     @Override
@@ -159,11 +163,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Override
     public void handle(PluginMessage pluginMessage) throws Exception
     {
-        // TODO: Unregister?
-        if ( PluginMessage.SHOULD_RELAY.apply( pluginMessage ) )
-        {
-            relayMessages.add( pluginMessage );
-        }
+        this.relayMessage( pluginMessage );
     }
 
     @Override
@@ -179,44 +179,65 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         this.legacy = true;
         final boolean v1_5 = ping.isV1_5();
 
-        ServerPing legacy = new ServerPing( new ServerPing.Protocol( bungee.getName() + " " + bungee.getGameVersion(), bungee.getProtocolVersion() ),
-                new ServerPing.Players( listener.getMaxPlayers(), bungee.getOnlineCount(), null ),
-                new TextComponent( TextComponent.fromLegacyText( listener.getMotd() ) ), (Favicon) null );
+        ServerInfo forced = AbstractReconnectHandler.getForcedHost( this );
+        final String motd = ( forced != null ) ? forced.getMotd() : listener.getMotd();
+        final int protocol = bungee.getProtocolVersion();
 
-        Callback<ProxyPingEvent> callback = new Callback<ProxyPingEvent>()
+        Callback<ServerPing> pingBack = new Callback<ServerPing>()
         {
             @Override
-            public void done(ProxyPingEvent result, Throwable error)
+            public void done(ServerPing result, Throwable error)
             {
-                if ( ch.isClosed() )
+                if ( error != null )
                 {
-                    return;
+                    result = getPingInfo( bungee.getTranslation( "ping_cannot_connect" ), protocol );
+                    bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
                 }
 
-                ServerPing legacy = result.getResponse();
-                String kickMessage;
-
-                if ( v1_5 )
-                {
-                    kickMessage = ChatColor.DARK_BLUE
-                            + "\00" + 127
-                            + '\00' + legacy.getVersion().getName()
-                            + '\00' + getFirstLine( legacy.getDescription() )
-                            + '\00' + legacy.getPlayers().getOnline()
-                            + '\00' + legacy.getPlayers().getMax();
-                } else
+                Callback<ProxyPingEvent> callback = new Callback<ProxyPingEvent>()
                 {
-                    // Clients <= 1.3 don't support colored motds because the color char is used as delimiter
-                    kickMessage = ChatColor.stripColor( getFirstLine( legacy.getDescription() ) )
-                            + '\u00a7' + legacy.getPlayers().getOnline()
-                            + '\u00a7' + legacy.getPlayers().getMax();
-                }
+                    @Override
+                    public void done(ProxyPingEvent result, Throwable error)
+                    {
+                        if ( ch.isClosed() )
+                        {
+                            return;
+                        }
 
-                ch.close( kickMessage );
+                        ServerPing legacy = result.getResponse();
+                        String kickMessage;
+
+                        if ( v1_5 )
+                        {
+                            kickMessage = ChatColor.DARK_BLUE
+                                    + "\00" + 127
+                                    + '\00' + legacy.getVersion().getName()
+                                    + '\00' + getFirstLine( legacy.getDescription() )
+                                    + '\00' + ( ( legacy.getPlayers() != null ) ? legacy.getPlayers().getOnline() : "-1" )
+                                    + '\00' + ( ( legacy.getPlayers() != null ) ? legacy.getPlayers().getMax() : "-1" );
+                        } else
+                        {
+                            // Clients <= 1.3 don't support colored motds because the color char is used as delimiter
+                            kickMessage = ChatColor.stripColor( getFirstLine( legacy.getDescription() ) )
+                                    + '\u00a7' + ( ( legacy.getPlayers() != null ) ? legacy.getPlayers().getOnline() : "-1" )
+                                    + '\u00a7' + ( ( legacy.getPlayers() != null ) ? legacy.getPlayers().getMax() : "-1" );
+                        }
+
+                        ch.close( kickMessage );
+                    }
+                };
+
+                bungee.getPluginManager().callEvent( new ProxyPingEvent( InitialHandler.this, result, callback ) );
             }
         };
 
-        bungee.getPluginManager().callEvent( new ProxyPingEvent( this, legacy, callback ) );
+        if ( forced != null && listener.isPingPassthrough() )
+        {
+            ( (BungeeServerInfo) forced ).ping( pingBack, bungee.getProtocolVersion() );
+        } else
+        {
+            pingBack.done( getPingInfo( motd, protocol ), null );
+        }
     }
 
     private static String getFirstLine(String str)
@@ -259,28 +280,12 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                     @Override
                     public void done(ProxyPingEvent pingResult, Throwable error)
                     {
-                        Gson gson = handshake.getProtocolVersion() == ProtocolConstants.MINECRAFT_1_7_2 ? BungeeCord.getInstance().gsonLegacy : BungeeCord.getInstance().gson; // Travertine
+                        Gson gson = BungeeCord.getInstance().gson;
+                        unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
                         if ( bungee.getConnectionThrottle() != null )
                         {
                             bungee.getConnectionThrottle().unthrottle( getSocketAddress() );
                         }
-                        // Travertine start
-                        if ( ProtocolConstants.isBeforeOrEq( handshake.getProtocolVersion() , ProtocolConstants.MINECRAFT_1_8 ) )
-                        {
-                            // Minecraft < 1.9 doesn't send string server descriptions as chat components. Older 1.7
-                            // clients even crash when encountering a chat component instead of a string. To be on the
-                            // safe side, always send legacy descriptions for < 1.9 clients.
-                            JsonElement element = gson.toJsonTree(pingResult.getResponse());
-                            Preconditions.checkArgument(element.isJsonObject(), "Response is not a JSON object");
-                            JsonObject object = element.getAsJsonObject();
-                            object.addProperty("description", pingResult.getResponse().getDescription());
-
-                            unsafe.sendPacket(new StatusResponse(gson.toJson(element)));
-                        } else
-                        {
-                            unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
-                        }
-                        // Travertine end
                     }
                 };
 
@@ -317,6 +322,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         Preconditions.checkState( thisState == State.HANDSHAKE, "Not expecting HANDSHAKE" );
         this.handshake = handshake;
         ch.setVersion( handshake.getProtocolVersion() );
+        ch.getHandle().pipeline().remove( PipelineUtils.LEGACY_KICKER );
 
         // Starting with FML 1.8, a "\0FML\0" token is appended to the handshake. This interferes
         // with Bungee's IP forwarding, so we detect it, and remove it from the host string, for now.
@@ -381,20 +387,41 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(LoginRequest loginRequest) throws Exception
     {
         Preconditions.checkState( thisState == State.USERNAME, "Not expecting USERNAME" );
-        this.loginRequest = loginRequest;
 
-        if ( getName().contains( " " ) )
+        if ( !AllowedCharacters.isValidName( loginRequest.getData(), onlineMode ) )
         {
             disconnect( bungee.getTranslation( "name_invalid" ) );
             return;
         }
 
-        if ( getName().length() > 16 )
+        if ( BungeeCord.getInstance().config.isEnforceSecureProfile() && getVersion() < ProtocolConstants.MINECRAFT_1_19_3 )
         {
-            disconnect( bungee.getTranslation( "name_too_long" ) );
-            return;
+            if ( handshake.getProtocolVersion() < ProtocolConstants.MINECRAFT_1_19 ) {disconnect(bungee.getTranslation("secure_profile_unsupported"));} // Waterfall - Tell old clients to update if secure profiles are required
+            PlayerPublicKey publicKey = loginRequest.getPublicKey();
+            if ( publicKey == null )
+            {
+                disconnect( bungee.getTranslation( "secure_profile_required" ) );
+                return;
+            }
+
+            if ( Instant.ofEpochMilli( publicKey.getExpiry() ).isBefore( Instant.now() ) )
+            {
+                disconnect( bungee.getTranslation( "secure_profile_expired" ) );
+                return;
+            }
+
+            if ( getVersion() < ProtocolConstants.MINECRAFT_1_19_1 )
+            {
+                if ( !EncryptionUtil.check( publicKey, null ) )
+                {
+                    disconnect( bungee.getTranslation( "secure_profile_invalid" ) );
+                    return;
+                }
+            }
         }
 
+        this.loginRequest = loginRequest;
+
         int limit = BungeeCord.getInstance().config.getPlayerLimit();
         if ( limit > 0 && bungee.getOnlineCount() >= limit )
         {
@@ -418,7 +445,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( result.isCancelled() )
                 {
-                    disconnect( result.getCancelReasonComponents() );
+                    BaseComponent[] reason = result.getCancelReasonComponents();
+                    disconnect( ( reason != null ) ? reason : TextComponent.fromLegacyText( bungee.getTranslation( "kick_message" ) ) );
                     return;
                 }
                 if ( ch.isClosed() )
@@ -427,12 +455,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 }
                 if ( onlineMode )
                 {
+                    thisState = State.ENCRYPT;
                     unsafe().sendPacket( request = EncryptionUtil.encryptRequest() );
                 } else
                 {
+                    thisState = State.FINISHING;
                     finish();
                 }
-                thisState = State.ENCRYPT;
             }
         };
 
@@ -444,6 +473,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(final EncryptionResponse encryptResponse) throws Exception
     {
         Preconditions.checkState( thisState == State.ENCRYPT, "Not expecting ENCRYPT" );
+        Preconditions.checkState( EncryptionUtil.check( loginRequest.getPublicKey(), encryptResponse, request ), "Invalid verification" );
+        thisState = State.FINISHING; // Waterfall - move earlier - There is no verification of this later (and this is not API)
 
         SecretKey sharedKey = EncryptionUtil.getSecret( encryptResponse, request );
         // Waterfall start
@@ -498,12 +529,38 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 }
             }
         };
-
+        //thisState = State.FINISHING; // Waterfall - move earlier
         HttpClient.get( authURL, ch.getHandle().eventLoop(), handler );
     }
 
     private void finish()
     {
+        offlineId = UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + getName() ).getBytes( Charsets.UTF_8 ) );
+        if ( uniqueId == null )
+        {
+            uniqueId = offlineId;
+        }
+
+        if ( BungeeCord.getInstance().config.isEnforceSecureProfile() )
+        {
+            if ( getVersion() >= ProtocolConstants.MINECRAFT_1_19_1 && getVersion() < ProtocolConstants.MINECRAFT_1_19_3 )
+            {
+                boolean secure = false;
+                try
+                {
+                    secure = EncryptionUtil.check( loginRequest.getPublicKey(), uniqueId );
+                } catch ( GeneralSecurityException ex )
+                {
+                }
+
+                if ( !secure )
+                {
+                    disconnect( bungee.getTranslation( "secure_profile_invalid" ) );
+                    return;
+                }
+            }
+        }
+
         if ( isOnlineMode() )
         {
             // Check for multiple connections
@@ -534,12 +591,6 @@ public class InitialHandler extends PacketHandler implements PendingConnection
 
         }
 
-        offlineId = UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + getName() ).getBytes( Charsets.UTF_8 ) );
-        if ( uniqueId == null )
-        {
-            uniqueId = offlineId;
-        }
-
         Callback<LoginEvent> complete = new Callback<LoginEvent>()
         {
             @Override
@@ -547,7 +598,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( result.isCancelled() )
                 {
-                    disconnect( result.getCancelReasonComponents() );
+                    BaseComponent[] reason = result.getCancelReasonComponents();
+                    disconnect( ( reason != null ) ? reason : TextComponent.fromLegacyText( bungee.getTranslation( "kick_message" ) ) );
                     return;
                 }
                 if ( ch.isClosed() )
@@ -566,7 +618,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             userCon.setCompressionThreshold( BungeeCord.getInstance().config.getCompressionThreshold() );
                             userCon.init();
 
-                            unsafe.sendPacket( new LoginSuccess( getUniqueId(), getName() ) );
+                            unsafe.sendPacket( new LoginSuccess( getUniqueId(), getName(), ( loginProfile == null ) ? null : loginProfile.getProperties() ) );
                             ch.setProtocol( Protocol.GAME );
 
                             ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new UpstreamBridge( bungee, userCon ) );
@@ -585,8 +637,6 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             }
 
                             userCon.connect( server, null, true, ServerConnectEvent.Reason.JOIN_PROXY );
-
-                            thisState = State.FINISHED;
                         }
                     }
                 } );
@@ -698,4 +748,32 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+
+    public void relayMessage(PluginMessage input) throws Exception
+    {
+        if ( input.getTag().equals( "REGISTER" ) || input.getTag().equals( "minecraft:register" ) )
+        {
+            String content = new String( input.getData(), StandardCharsets.UTF_8 );
+
+            for ( String id : content.split( "\0" ) )
+            {
+                // Waterfall start: Add configurable limits for plugin messaging
+                Preconditions.checkState( !(registeredChannels.size() > bungee.getConfig().getPluginChannelLimit()), "Too many registered channels. This limit can be configured in the waterfall.yml" );
+                Preconditions.checkArgument( !(id.length() > bungee.getConfig().getPluginChannelNameLimit()), "Channel name too long. This limit can be configured in the waterfall.yml" );
+                // Waterfall end
+                registeredChannels.add( id );
+            }
+        } else if ( input.getTag().equals( "UNREGISTER" ) || input.getTag().equals( "minecraft:unregister" ) )
+        {
+            String content = new String( input.getData(), StandardCharsets.UTF_8 );
+
+            for ( String id : content.split( "\0" ) )
+            {
+                registeredChannels.remove( id );
+            }
+        } else if ( input.getTag().equals( "MC|Brand" ) || input.getTag().equals( "minecraft:brand" ) )
+        {
+            brandMessage = input;
+        }
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
index 6cd71071..6df3f3dd 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
@@ -16,7 +16,6 @@ import net.md_5.bungee.protocol.MinecraftDecoder;
 import net.md_5.bungee.protocol.MinecraftEncoder;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.Protocol;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Handshake;
 import net.md_5.bungee.protocol.packet.StatusRequest;
 import net.md_5.bungee.protocol.packet.StatusResponse;
@@ -66,7 +65,7 @@ public class PingHandler extends PacketHandler
     @SuppressFBWarnings("UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
     public void handle(StatusResponse statusResponse) throws Exception
     {
-        Gson gson = protocol == ProtocolConstants.MINECRAFT_1_7_2 ? BungeeCord.getInstance().gsonLegacy : BungeeCord.getInstance().gson; // Travertine
+        Gson gson = BungeeCord.getInstance().gson;
         ServerPing serverPing = gson.fromJson( statusResponse.getResponse(), ServerPing.class );
         ( (BungeeServerInfo) target ).cachePing( serverPing );
         callback.done( serverPing, null );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index ad3bdee5..d72208e7 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -4,11 +4,11 @@ import com.google.common.base.Preconditions;
 import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
-import io.github.waterfallmc.waterfall.StringUtil;
 import io.netty.channel.Channel;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.ServerConnection.KeepAliveData;
 import net.md_5.bungee.UserConnection;
@@ -27,12 +27,16 @@ import net.md_5.bungee.netty.PacketHandler;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
+import net.md_5.bungee.protocol.packet.ClientChat;
+import net.md_5.bungee.protocol.packet.ClientCommand;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
+import net.md_5.bungee.util.AllowedCharacters;
 
 public class UpstreamBridge extends PacketHandler
 {
@@ -75,22 +79,30 @@ public class UpstreamBridge extends PacketHandler
             // TODO: This should only done with server_unique
             //       tab list (which is the only one supported
             //       currently)
-            PlayerListItem packet = new PlayerListItem();
-            packet.setAction( PlayerListItem.Action.REMOVE_PLAYER );
+            PlayerListItem oldPacket = new PlayerListItem();
+            oldPacket.setAction( PlayerListItem.Action.REMOVE_PLAYER );
             PlayerListItem.Item item = new PlayerListItem.Item();
             item.setUuid( con.getUniqueId() );
-            packet.setItems( new PlayerListItem.Item[]
+            oldPacket.setItems( new PlayerListItem.Item[]
             {
                 item
             } );
+
+            PlayerListItemRemove newPacket = new PlayerListItemRemove();
+            newPacket.setUuids( new UUID[]
+            {
+                con.getUniqueId()
+            } );
+
             for ( ProxiedPlayer player : con.getServer().getInfo().getPlayers() )
             {
-                // Travertine start
-                if ( ProtocolConstants.isAfterOrEq( player.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_8 ) )
+                if ( player.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_19_3 )
                 {
-                    player.unsafe().sendPacket( packet );
+                    player.unsafe().sendPacket( newPacket );
+                } else
+                {
+                    player.unsafe().sendPacket( oldPacket );
                 }
-                // Travertine end
             }
             con.getServer().disconnect( "Quitting" );
         }
@@ -152,17 +164,51 @@ public class UpstreamBridge extends PacketHandler
     @Override
     public void handle(Chat chat) throws Exception
     {
-        int maxLength = ( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_11 ) ? 256 : 100;
-        Preconditions.checkArgument( chat.getMessage().length() <= maxLength, "Chat message too long" ); // Mojang limit, check on updates
-        Preconditions.checkArgument(!StringUtil.isBlank(chat.getMessage()), "Chat message is empty");
+        String message = handleChat( chat.getMessage() );
+        if ( message != null )
+        {
+            chat.setMessage( message );
+            con.getServer().unsafe().sendPacket( chat );
+        }
+
+        throw CancelSendSignal.INSTANCE;
+    }
+
+    @Override
+    public void handle(ClientChat chat) throws Exception
+    {
+        handleChat( chat.getMessage() );
+    }
 
-        ChatEvent chatEvent = new ChatEvent( con, con.getServer(), chat.getMessage() );
+    @Override
+    public void handle(ClientCommand command) throws Exception
+    {
+        handleChat( "/" + command.getCommand() );
+    }
+
+    private String handleChat(String message)
+    {
+        boolean empty = true;
+        for ( int index = 0, length = message.length(); index < length; index++ )
+        {
+            char c = message.charAt( index );
+            if ( !AllowedCharacters.isChatAllowedCharacter( c ) )
+            {
+                con.disconnect( bungee.getTranslation( "illegal_chat_characters", Util.unicode( c ) ) );
+                throw CancelSendSignal.INSTANCE;
+            } else if (empty && !Character.isWhitespace(c)) {
+                empty = false;
+            }
+        }
+        Preconditions.checkArgument(!empty, "Chat message is empty");
+
+        ChatEvent chatEvent = new ChatEvent( con, con.getServer(), message );
         if ( !bungee.getPluginManager().callEvent( chatEvent ).isCancelled() )
         {
-            chat.setMessage( chatEvent.getMessage() );
-            if ( !chatEvent.isCommand() || !bungee.getPluginManager().dispatchCommand( con, chat.getMessage().substring( 1 ) ) )
+            message = chatEvent.getMessage();
+            if ( !chatEvent.isCommand() || !bungee.getPluginManager().dispatchCommand( con, message.substring( 1 ) ) )
             {
-                con.getServer().unsafe().sendPacket( chat );
+                return message;
             }
         }
         throw CancelSendSignal.INSTANCE;
@@ -186,10 +232,11 @@ public class UpstreamBridge extends PacketHandler
 
         // Waterfall end - tab limiter
         List<String> suggestions = new ArrayList<>();
+        boolean isRegisteredCommand = false;
 
         if ( tabComplete.getCursor().startsWith( "/" ) )
         {
-            bungee.getPluginManager().dispatchCommand( con, tabComplete.getCursor().substring( 1 ), suggestions );
+            isRegisteredCommand = bungee.getPluginManager().dispatchCommand( con, tabComplete.getCursor().substring( 1 ), suggestions );
         }
 
         TabCompleteEvent tabCompleteEvent = new TabCompleteEvent( con, con.getServer(), tabComplete.getCursor(), suggestions );
@@ -224,6 +271,12 @@ public class UpstreamBridge extends PacketHandler
             }
             throw CancelSendSignal.INSTANCE;
         }
+
+        // Don't forward tab completions if the command is a registered bungee command
+        if ( isRegisteredCommand )
+        {
+            throw CancelSendSignal.INSTANCE;
+        }
     }
 
     @Override
@@ -273,11 +326,7 @@ public class UpstreamBridge extends PacketHandler
             throw CancelSendSignal.INSTANCE;
         }
 
-        // TODO: Unregister as well?
-        if ( PluginMessage.SHOULD_RELAY.apply( pluginMessage ) )
-        {
-            con.getPendingConnection().getRelayMessages().add( pluginMessage );
-        }
+        con.getPendingConnection().relayMessage( pluginMessage );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index 44066317..ad951df0 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -6,7 +6,6 @@ import io.netty.buffer.ByteBufInputStream;
 import java.io.DataInputStream;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.NamedTag;
@@ -35,10 +34,6 @@ public abstract class EntityMap
         // Waterfall end
         switch ( version )
         {
-            case ProtocolConstants.MINECRAFT_1_7_2:
-                return EntityMap_1_7_2.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_7_6:
-                return EntityMap_1_7_6.INSTANCE;
             case ProtocolConstants.MINECRAFT_1_8:
                 return EntityMap_1_8.INSTANCE;
             case ProtocolConstants.MINECRAFT_1_9:
@@ -79,7 +74,16 @@ public abstract class EntityMap
             case ProtocolConstants.MINECRAFT_1_16_4:
                 return EntityMap_1_16_2.INSTANCE_1_16_2;
             case ProtocolConstants.MINECRAFT_1_17:
+            case ProtocolConstants.MINECRAFT_1_17_1:
                 return EntityMap_1_16_2.INSTANCE_1_17;
+            case ProtocolConstants.MINECRAFT_1_18:
+            case ProtocolConstants.MINECRAFT_1_18_2:
+                return EntityMap_1_16_2.INSTANCE_1_18;
+            case ProtocolConstants.MINECRAFT_1_19:
+                return EntityMap_1_16_2.INSTANCE_1_19;
+            case ProtocolConstants.MINECRAFT_1_19_1:
+            case ProtocolConstants.MINECRAFT_1_19_3:
+                return EntityMap_1_16_2.INSTANCE_1_19_1;
         }
         throw new RuntimeException( "Version " + version + " has no entity map" );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_2.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_2.java
index df5516ca..7241dc56 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_2.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16_2.java
@@ -16,6 +16,9 @@ class EntityMap_1_16_2 extends EntityMap
 
     static final EntityMap_1_16_2 INSTANCE_1_16_2 = new EntityMap_1_16_2( 0x04, 0x2D );
     static final EntityMap_1_16_2 INSTANCE_1_17 = new EntityMap_1_16_2( 0x04, 0x2D );
+    static final EntityMap_1_16_2 INSTANCE_1_18 = new EntityMap_1_16_2( 0x04, 0x2D );
+    static final EntityMap_1_16_2 INSTANCE_1_19 = new EntityMap_1_16_2( 0x02, 0x2F );
+    static final EntityMap_1_16_2 INSTANCE_1_19_1 = new EntityMap_1_16_2( 0x02, 0x30 );
     //
     private final int spawnPlayerId;
     private final int spectateId;
@@ -55,7 +58,7 @@ class EntityMap_1_16_2 extends EntityMap
         int packetId = DefinedPacket.readVarInt( packet );
         int packetIdLength = packet.readerIndex() - readerIndex;
 
-        if ( packetId == spectateId )
+        if ( packetId == spectateId && !BungeeCord.getInstance().getConfig().isIpForward() )
         {
             UUID uuid = DefinedPacket.readUUID( packet );
             ProxiedPlayer player;
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_2.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_2.java
deleted file mode 100644
index 65c1a9ec..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_2.java
+++ /dev/null
@@ -1,102 +0,0 @@
-// Travertine start
-package net.md_5.bungee.entitymap;
-
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
-
-class EntityMap_1_7_2 extends EntityMap
-{
-
-    static final EntityMap INSTANCE = new EntityMap_1_7_2();
-
-    EntityMap_1_7_2()
-    {
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Equipment
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_CLIENT, false ); // Use bed
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation
-        addRewrite( 0x0C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player
-        addRewrite( 0x0D, ProtocolConstants.Direction.TO_CLIENT, false ); // Collect Item
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object
-        addRewrite( 0x0F, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob
-        addRewrite( 0x10, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting
-        addRewrite( 0x11, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb
-        addRewrite( 0x12, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Velocity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Relative Move
-        addRewrite( 0x16, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Look
-        addRewrite( 0x17, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Look and Relative Move
-        addRewrite( 0x18, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Teleport
-        addRewrite( 0x19, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Head Look
-        addRewrite( 0x1A, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Metadata
-        addRewrite( 0x1D, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Effect
-        addRewrite( 0x1E, ProtocolConstants.Direction.TO_CLIENT, false ); // Remove Entity Effect
-        addRewrite( 0x20, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Properties
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation
-        addRewrite( 0x2C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Global Entity
-
-        addRewrite( 0x02, ProtocolConstants.Direction.TO_SERVER, false ); // Use Entity
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, false ); // Animation
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_SERVER, false ); // Entity Action
-    }
-
-    @Override
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        //Special cases
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        if ( packetId == 0x0D /* Collect Item */ || packetId == 0x1B /* Attach Entity */ )
-        {
-            rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
-        } else if ( packetId == 0x13 /* Destroy Entities */ )
-        {
-            int count = packet.getByte( packetIdLength );
-            for ( int i = 0; i < count; i++ )
-            {
-                rewriteInt( packet, oldId, newId, packetIdLength + 1 + i * 4 );
-            }
-        } else if ( packetId == 0x0E /* Spawn Object */ )
-        {
-            DefinedPacket.readVarInt( packet );
-            int type = packet.readUnsignedByte();
-
-            if ( type == 60 || type == 90 )
-            {
-                packet.skipBytes( 14 );
-                int position = packet.readerIndex();
-                int readId = packet.readInt();
-                int changedId = -1;
-                if ( readId == oldId )
-                {
-                    packet.setInt( position, newId );
-                    changedId = newId;
-                } else if ( readId == newId )
-                {
-                    packet.setInt( position, oldId );
-                    changedId = oldId;
-                }
-                if ( changedId != -1 )
-                {
-                    if ( changedId == 0 && readId != 0 )
-                    { // Trim off the extra data
-                        packet.readerIndex( readerIndex );
-                        packet.writerIndex( packet.readableBytes() - 6 );
-                    } else if ( changedId != 0 && readId == 0 )
-                    { // Add on the extra data
-                        packet.readerIndex( readerIndex );
-                        packet.capacity( packet.readableBytes() + 6 );
-                        packet.writerIndex( packet.readableBytes() + 6 );
-                    }
-                }
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
-// Travertine end
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_6.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_6.java
deleted file mode 100644
index 6755fe84..00000000
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_7_6.java
+++ /dev/null
@@ -1,62 +0,0 @@
-// Travertine start
-package net.md_5.bungee.entitymap;
-
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.buffer.ByteBuf;
-import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.connection.LoginResult;
-import net.md_5.bungee.protocol.DefinedPacket;
-
-class EntityMap_1_7_6 extends EntityMap_1_7_2
-{
-
-    static final EntityMap_1_7_6 INSTANCE = new EntityMap_1_7_6();
-
-    @Override
-    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
-    public void rewriteClientbound(ByteBuf packet, int oldId, int newId)
-    {
-        super.rewriteClientbound( packet, oldId, newId );
-
-        int readerIndex = packet.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet );
-        int packetIdLength = packet.readerIndex() - readerIndex;
-        if ( packetId == 0x0C /* Spawn Player */ )
-        {
-            DefinedPacket.readVarInt( packet );
-            int idLength = packet.readerIndex() - readerIndex - packetIdLength;
-            String uuid = DefinedPacket.readString( packet );
-            String username = DefinedPacket.readString( packet );
-            int props = DefinedPacket.readVarInt( packet );
-            if ( props == 0 )
-            {
-                UserConnection player = (UserConnection) BungeeCord.getInstance().getPlayer( username );
-                if ( player != null )
-                {
-                    LoginResult profile = player.getPendingConnection().getLoginProfile();
-                    if ( profile != null && profile.getProperties() != null
-                            && profile.getProperties().length >= 1 )
-                    {
-                        ByteBuf rest = packet.copy();
-                        packet.readerIndex( readerIndex );
-                        packet.writerIndex( readerIndex + packetIdLength + idLength );
-                        DefinedPacket.writeString( player.getUniqueId().toString(), packet );
-                        DefinedPacket.writeString( username, packet );
-                        DefinedPacket.writeVarInt( profile.getProperties().length, packet );
-                        for ( LoginResult.Property property : profile.getProperties() )
-                        {
-                            DefinedPacket.writeString( property.getName(), packet );
-                            DefinedPacket.writeString( property.getValue(), packet );
-                            DefinedPacket.writeString( property.getSignature(), packet );
-                        }
-                        packet.writeBytes( rest );
-                        rest.release();
-                    }
-                }
-            }
-        }
-        packet.readerIndex( readerIndex );
-    }
-}
-// Travertine end
diff --git a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
index f61de127..bea2bbff 100644
--- a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
@@ -8,7 +8,6 @@ import lombok.Getter;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
-import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
@@ -24,12 +23,6 @@ public class ForgeClientHandler
     @NonNull
     private final UserConnection con;
 
-    // Travertine start
-    @Getter
-    @Setter(AccessLevel.PACKAGE)
-    private boolean forgeOutdated = false;
-    // Travertine end
-
     /**
      * The users' mod list.
      */
@@ -182,22 +175,4 @@ public class ForgeClientHandler
     {
         return fmlTokenInHandshake || clientModList != null;
     }
-
-    // Travertine start
-    /**
-      * Checks to see if a user is using an outdated FML build, and takes
-      * appropriate action on the User side. This should only be called during a
-      * server connection, by the ServerConnector
-      *
-      * @return <code>true</code> if the user's FML build is outdated, otherwise
-      * <code>false</code>
-      */
-    public boolean checkUserOutdated() {
-        if (forgeOutdated) {
-            con.disconnect( BungeeCord.getInstance().getTranslation("connect_kick_outdated_forge") );
-        }
-        return forgeOutdated;
-    }
-    // Travertine end
-
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandshakeState.java b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandshakeState.java
index e3c1b9b9..5e02f8c8 100644
--- a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandshakeState.java
+++ b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandshakeState.java
@@ -3,7 +3,6 @@ package net.md_5.bungee.forge;
 import java.util.Map;
 import net.md_5.bungee.ServerConnector;
 import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 
 /**
@@ -85,22 +84,6 @@ enum ForgeClientHandshakeState implements IForgeClientPacketHandler<ForgeClientH
                     // Once we've done it, no point doing it again.
                     Map<String, String> clientModList = ForgeUtils.readModList( message );
                     con.getForgeClientHandler().setClientModList( clientModList );
-                    // Travertine start
-                    // If the user is below 1.8, we need to check the version of FML - it's not always an OK version.
-                    if ( ProtocolConstants.isBeforeOrEq( con.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_7_6 ) )
-                    {
-                        // Get the version from the mod list.
-                        int buildNumber = ForgeUtils.getFmlBuildNumber( clientModList );
-
-                        // If we get 0, we're probably using a testing build, so let it though. Otherwise, check the build number.
-                        if ( buildNumber < ForgeConstants.FML_MIN_BUILD_VERSION && buildNumber != 0 )
-                        {
-                            // Mark the user as an old Forge user. This will then cause any Forge ServerConnectors to cancel any
-                            // connections to it.
-                            con.getForgeClientHandler().setForgeOutdated( true );
-                        }
-                    }
-                    // Travertine end
                 }
 
                 return WAITINGSERVERDATA;
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java b/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
index b91981e6..e2911d5e 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpHandler.java
@@ -26,6 +26,7 @@ public class HttpHandler extends SimpleChannelInboundHandler<HttpObject>
             callback.done( null, cause );
         } finally
         {
+            ctx.channel().pipeline().remove( this );
             ctx.channel().close();
         }
     }
@@ -68,6 +69,7 @@ public class HttpHandler extends SimpleChannelInboundHandler<HttpObject>
             callback.done( buffer.toString(), null );
         } finally
         {
+            ctx.channel().pipeline().remove( this );
             ctx.channel().close();
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/module/JenkinsModuleSource.java b/proxy/src/main/java/net/md_5/bungee/module/JenkinsModuleSource.java
index c0499252..5bb86152 100644
--- a/proxy/src/main/java/net/md_5/bungee/module/JenkinsModuleSource.java
+++ b/proxy/src/main/java/net/md_5/bungee/module/JenkinsModuleSource.java
@@ -19,8 +19,8 @@ public class JenkinsModuleSource implements ModuleSource
         try
         {
             final String url = String.format(
-                "https://papermc.io/api/v2/projects/%1$s/versions/%2$s/builds/%3$s/downloads/%4$s-%2$s-%3$s.jar",
-                "travertine", // Travertine
+                "https://api.papermc.io/v2/projects/%1$s/versions/%2$s/builds/%3$s/downloads/%4$s-%2$s-%3$s.jar",
+                "waterfall",
                 net.md_5.bungee.api.ProxyServer.getInstance().getVersion().split(":")[2].split("-")[0],
                 version.getBuild(),
                 module.getName()
diff --git a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
index 8c5cc949..d3abee44 100644
--- a/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
+++ b/proxy/src/main/java/net/md_5/bungee/module/ModuleManager.java
@@ -31,10 +31,12 @@ public class ModuleManager
         knownSources.put( "jenkins", new JenkinsModuleSource() );
     }
 
+    // CHECKSTYLE:OFF
     @SuppressFBWarnings(
             {
                 "SF_SWITCH_FALLTHROUGH", "SF_SWITCH_NO_DEFAULT"
             })
+    // CHECKSTYLE:ON
     public void load(ProxyServer proxy, File moduleDirectory) throws Exception
     {
         moduleDirectory.mkdir();
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 270545f2..29cf4b4f 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -83,14 +83,17 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
             HAProxyMessage proxy = (HAProxyMessage) msg;
             try
             {
-                InetSocketAddress newAddress = new InetSocketAddress( proxy.sourceAddress(), proxy.sourcePort() );
-
-                ProxyServer.getInstance().getLogger().log( Level.FINE, "Set remote address via PROXY {0} -> {1}", new Object[]
+                if ( proxy.sourceAddress() != null )
                 {
-                    channel.getRemoteAddress(), newAddress
-                } );
+                    InetSocketAddress newAddress = new InetSocketAddress( proxy.sourceAddress(), proxy.sourcePort() );
+
+                    ProxyServer.getInstance().getLogger().log( Level.FINE, "Set remote address via PROXY {0} -> {1}", new Object[]
+                    {
+                        channel.getRemoteAddress(), newAddress
+                    } );
 
-                channel.setRemoteAddress( newAddress );
+                    channel.setRemoteAddress( newAddress );
+                }
             } finally
             {
                 proxy.release();
@@ -139,6 +142,14 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                     ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - read timed out", handler );
                 } else if ( cause instanceof DecoderException )
                 {
+                    // Waterfall start
+                    if (net.md_5.bungee.protocol.MinecraftDecoder.DEBUG) {
+                        java.util.logging.LogRecord logRecord = new java.util.logging.LogRecord(Level.WARNING, "{0} - A decoder exception has been thrown:");
+                        logRecord.setParameters(new Object[]{handler});
+                        logRecord.setThrown(cause);
+                        ProxyServer.getInstance().getLogger().log(logRecord);
+                    } else
+                    // Waterfall end
                     if ( cause instanceof CorruptedFrameException )
                     {
                         ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - corrupted frame: {1}", new Object[]
@@ -147,7 +158,7 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                         } );
                     } else if ( cause.getCause() instanceof BadPacketException )
                     {
-                        ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - bad packet ID, are mods in use!? {1}", new Object[]
+                        ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - bad packet, are mods in use!? {1}", new Object[]
                         {
                             handler, cause.getCause().getMessage()
                         } );
@@ -157,6 +168,12 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                         {
                             handler, cause.getCause().getMessage()
                         } );
+                    } else
+                    {
+                        ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} - could not decode packet! {1}", new Object[]
+                        {
+                            handler, cause.getCause() != null ? cause.getCause() : cause
+                        } );
                     }
                 } else if ( cause instanceof IOException || ( cause instanceof IllegalStateException && handler instanceof InitialHandler ) )
                 {
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 96704d5e..2a21243b 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -32,8 +32,6 @@ import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.BungeeServerInfo;
-import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.Util;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ListenerInfo;
@@ -50,9 +48,7 @@ import net.md_5.bungee.protocol.Varint21LengthFieldPrepender;
 public class PipelineUtils
 {
 
-    public static final AttributeKey<ListenerInfo> LISTENER = AttributeKey.newInstance("ListerInfo");
-    public static final AttributeKey<UserConnection> USER = AttributeKey.newInstance("User");
-    public static final AttributeKey<BungeeServerInfo> TARGET = AttributeKey.newInstance("Target");
+    public static final AttributeKey<ListenerInfo> LISTENER = AttributeKey.newInstance( "ListerInfo" );
     public static final ChannelInitializer<Channel> SERVER_CHILD = new ChannelInitializer<Channel>()
     {
         @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/tab/ServerUnique.java b/proxy/src/main/java/net/md_5/bungee/tab/ServerUnique.java
index e33861ab..f70d357a 100644
--- a/proxy/src/main/java/net/md_5/bungee/tab/ServerUnique.java
+++ b/proxy/src/main/java/net/md_5/bungee/tab/ServerUnique.java
@@ -6,12 +6,13 @@ import java.util.UUID;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
+import net.md_5.bungee.protocol.packet.PlayerListItemUpdate;
 
 public class ServerUnique extends TabList
 {
 
     private final Collection<UUID> uuids = new HashSet<>();
-    private final Collection<String> usernames = new HashSet<>(); // Travertine - Support for <=1.7.9
 
     public ServerUnique(ProxiedPlayer player)
     {
@@ -25,26 +26,36 @@ public class ServerUnique extends TabList
         {
             if ( playerListItem.getAction() == PlayerListItem.Action.ADD_PLAYER )
             {
-                // Travertine start
-                if ( item.getUuid() != null )
-                {
-                    uuids.add( item.getUuid() );
-                } else
-                {
-                    usernames.add( item.getUsername() );
-                }
-                // Travertine end
+                uuids.add( item.getUuid() );
             } else if ( playerListItem.getAction() == PlayerListItem.Action.REMOVE_PLAYER )
             {
-                // Travertine start
-                if ( item.getUuid() != null )
-                {
-                    uuids.remove( item.getUuid() );
-                } else
+                uuids.remove( item.getUuid() );
+            }
+        }
+        player.unsafe().sendPacket( playerListItem );
+    }
+
+    @Override
+    public void onUpdate(PlayerListItemRemove playerListItem)
+    {
+        for ( UUID uuid : playerListItem.getUuids() )
+        {
+            uuids.remove( uuid );
+        }
+        player.unsafe().sendPacket( playerListItem );
+    }
+
+    @Override
+    public void onUpdate(PlayerListItemUpdate playerListItem)
+    {
+        for ( PlayerListItem.Item item : playerListItem.getItems() )
+        {
+            for ( PlayerListItemUpdate.Action action : playerListItem.getActions() )
+            {
+                if ( action == PlayerListItemUpdate.Action.ADD_PLAYER )
                 {
-                    usernames.remove( item.getUsername() );
+                    uuids.add( item.getUuid() );
                 }
-                // Travertine end
             }
         }
         player.unsafe().sendPacket( playerListItem );
@@ -59,46 +70,26 @@ public class ServerUnique extends TabList
     @Override
     public void onServerChange()
     {
-        PlayerListItem packet = new PlayerListItem();
-        packet.setAction( PlayerListItem.Action.REMOVE_PLAYER );
-        PlayerListItem.Item[] items = new PlayerListItem.Item[ uuids.size() + usernames.size() ]; // Travertine
-        int i = 0;
-        for ( UUID uuid : uuids )
-        {
-            PlayerListItem.Item item = items[i++] = new PlayerListItem.Item();
-            item.setUuid( uuid );
-        }
-        // Travertine start
-        for ( String username : usernames )
-        {
-            PlayerListItem.Item item = items[i++] = new PlayerListItem.Item();
-            item.setUsername( username );
-            item.setDisplayName( username );
-        }
-        // Travertine end
-        packet.setItems( items );
-        // Travertine start
-        if ( ProtocolConstants.isAfterOrEq( player.getPendingConnection().getVersion(), ProtocolConstants.MINECRAFT_1_8 ) )
+        if ( player.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_19_3 )
         {
+            PlayerListItemRemove packet = new PlayerListItemRemove();
+            packet.setUuids( uuids.stream().toArray( UUID[]::new ) );
             player.unsafe().sendPacket( packet );
         } else
         {
-            // Split up the packet
-            for ( PlayerListItem.Item item : packet.getItems() )
+            PlayerListItem packet = new PlayerListItem();
+            packet.setAction( PlayerListItem.Action.REMOVE_PLAYER );
+            PlayerListItem.Item[] items = new PlayerListItem.Item[ uuids.size() ];
+            int i = 0;
+            for ( UUID uuid : uuids )
             {
-                PlayerListItem p2 = new PlayerListItem();
-                p2.setAction( packet.getAction() );
-
-                p2.setItems( new PlayerListItem.Item[]
-                        {
-                                item
-                        } );
-                player.unsafe().sendPacket( p2 );
+                PlayerListItem.Item item = items[i++] = new PlayerListItem.Item();
+                item.setUuid( uuid );
             }
+            packet.setItems( items );
+            player.unsafe().sendPacket( packet );
         }
-        // Travertine end
         uuids.clear();
-        usernames.clear(); // Travertine
     }
 
     @Override
@@ -112,4 +103,5 @@ public class ServerUnique extends TabList
     {
 
     }
+
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/tab/TabList.java b/proxy/src/main/java/net/md_5/bungee/tab/TabList.java
index 7d79ef7b..a0baa388 100644
--- a/proxy/src/main/java/net/md_5/bungee/tab/TabList.java
+++ b/proxy/src/main/java/net/md_5/bungee/tab/TabList.java
@@ -5,7 +5,10 @@ import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.connection.LoginResult;
+import net.md_5.bungee.protocol.Property;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerListItemRemove;
+import net.md_5.bungee.protocol.packet.PlayerListItemUpdate;
 
 @RequiredArgsConstructor
 public abstract class TabList
@@ -15,6 +18,10 @@ public abstract class TabList
 
     public abstract void onUpdate(PlayerListItem playerListItem);
 
+    public abstract void onUpdate(PlayerListItemRemove playerListItem);
+
+    public abstract void onUpdate(PlayerListItemUpdate playerListItem);
+
     public abstract void onPingChange(int ping);
 
     public abstract void onServerChange();
@@ -27,42 +34,70 @@ public abstract class TabList
     {
         for ( PlayerListItem.Item item : playerListItem.getItems() )
         {
-            if ( item.getUuid() == null ) // Old style ping
+            rewrite( item );
+        }
+        return playerListItem;
+    }
+
+    public static PlayerListItemRemove rewrite(PlayerListItemRemove playerListItem)
+    {
+        for ( int i = 0; i < playerListItem.getUuids().length; i++ )
+        {
+            UserConnection player = BungeeCord.getInstance().getPlayerByOfflineUUID( playerListItem.getUuids()[i] );
+            if ( player != null )
             {
-                continue;
+                playerListItem.getUuids()[i] = player.getUniqueId();
+
             }
-            UserConnection player = BungeeCord.getInstance().getPlayerByOfflineUUID( item.getUuid() );
-            if ( player != null )
+        }
+
+        return playerListItem;
+    }
+
+    public static PlayerListItemUpdate rewrite(PlayerListItemUpdate playerListItem)
+    {
+        for ( PlayerListItem.Item item : playerListItem.getItems() )
+        {
+            rewrite( item );
+        }
+        return playerListItem;
+    }
+
+    private static void rewrite(PlayerListItem.Item item)
+    {
+        if ( item.getUuid() == null ) // Old style ping
+        {
+            return;
+        }
+        UserConnection player = BungeeCord.getInstance().getPlayerByOfflineUUID( item.getUuid() );
+        if ( player != null )
+        {
+            item.setUuid( player.getUniqueId() );
+
+            if ( item.getProperties() != null )
             {
-                item.setUuid( player.getUniqueId() );
                 LoginResult loginResult = player.getPendingConnection().getLoginProfile();
                 if ( loginResult != null && loginResult.getProperties() != null )
                 {
-                    String[][] props = new String[ loginResult.getProperties().length ][];
+                    Property[] props = new Property[ loginResult.getProperties().length ];
                     for ( int i = 0; i < props.length; i++ )
                     {
-                        props[i] = new String[]
-                        {
-                            loginResult.getProperties()[i].getName(),
-                            loginResult.getProperties()[i].getValue(),
-                            loginResult.getProperties()[i].getSignature()
-                        };
+                        props[i] = new Property( loginResult.getProperties()[i].getName(), loginResult.getProperties()[i].getValue(), loginResult.getProperties()[i].getSignature() );
                     }
                     item.setProperties( props );
                 } else
                 {
-                    item.setProperties( new String[ 0 ][ 0 ] );
-                }
-                if ( playerListItem.getAction() == PlayerListItem.Action.ADD_PLAYER || playerListItem.getAction() == PlayerListItem.Action.UPDATE_GAMEMODE )
-                {
-                    player.setGamemode( item.getGamemode() );
-                }
-                if ( playerListItem.getAction() == PlayerListItem.Action.ADD_PLAYER || playerListItem.getAction() == PlayerListItem.Action.UPDATE_LATENCY )
-                {
-                    player.setPing( item.getPing() );
+                    item.setProperties( new Property[ 0 ] );
                 }
             }
+            if ( item.getGamemode() != null )
+            {
+                player.setGamemode( item.getGamemode() );
+            }
+            if ( item.getPing() != null )
+            {
+                player.setPing( item.getPing() );
+            }
         }
-        return playerListItem;
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/util/AddressUtil.java b/proxy/src/main/java/net/md_5/bungee/util/AddressUtil.java
index 03dabe01..5d349b37 100644
--- a/proxy/src/main/java/net/md_5/bungee/util/AddressUtil.java
+++ b/proxy/src/main/java/net/md_5/bungee/util/AddressUtil.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee.util;
 
+import com.google.common.base.Preconditions;
 import java.net.Inet6Address;
 import java.net.InetSocketAddress;
 import lombok.AccessLevel;
@@ -11,7 +12,8 @@ public class AddressUtil
 
     public static String sanitizeAddress(InetSocketAddress addr)
     {
-        String string = addr.getHostString();
+        Preconditions.checkArgument( !addr.isUnresolved(), "Unresolved address" );
+        String string = addr.getAddress().getHostAddress();
 
         // Remove IPv6 scope if present
         if ( addr.getAddress() instanceof Inet6Address )
diff --git a/proxy/src/main/java/net/md_5/bungee/util/AllowedCharacters.java b/proxy/src/main/java/net/md_5/bungee/util/AllowedCharacters.java
new file mode 100644
index 00000000..1a4242a2
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/util/AllowedCharacters.java
@@ -0,0 +1,39 @@
+package net.md_5.bungee.util;
+
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public final class AllowedCharacters
+{
+
+    public static boolean isChatAllowedCharacter(char character)
+    {
+        // Section symbols, control sequences, and deletes are not allowed
+        return character != '\u00A7' && character >= ' ' && character != 127;
+    }
+
+    private static boolean isNameAllowedCharacter(char c, boolean onlineMode)
+    {
+        if ( onlineMode )
+        {
+            return ( c >= 'a' && c <= 'z' ) || ( c >= '0' && c <= '9' ) || ( c >= 'A' && c <= 'Z' ) || c == '_' || c == '.' || c == '-';
+        } else
+        {
+            // Don't allow spaces, Yaml config doesn't support them
+            return isChatAllowedCharacter( c ) && c != ' ';
+        }
+    }
+
+    public static boolean isValidName(String name, boolean onlineMode)
+    {
+        for ( int index = 0, len = name.length(); index < len; index++ )
+        {
+            if ( !isNameAllowedCharacter( name.charAt( index ), onlineMode ) )
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/util/BoundedArrayList.java b/proxy/src/main/java/net/md_5/bungee/util/BoundedArrayList.java
deleted file mode 100644
index dad5121a..00000000
--- a/proxy/src/main/java/net/md_5/bungee/util/BoundedArrayList.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package net.md_5.bungee.util;
-
-import com.google.common.base.Preconditions;
-import java.util.ArrayList;
-import java.util.Collection;
-
-public class BoundedArrayList<E> extends ArrayList<E>
-{
-
-    private final int maxSize;
-
-    public BoundedArrayList(int maxSize)
-    {
-        this.maxSize = maxSize;
-    }
-
-    private void checkSize(int increment)
-    {
-        Preconditions.checkState( size() + increment <= maxSize, "Adding %s elements would exceed capacity of %s", increment, maxSize );
-    }
-
-    @Override
-    public boolean add(E e)
-    {
-        checkSize( 1 );
-        return super.add( e );
-    }
-
-    @Override
-    public void add(int index, E element)
-    {
-        checkSize( 1 );
-        super.add( index, element );
-    }
-
-    @Override
-    public boolean addAll(Collection<? extends E> c)
-    {
-        checkSize( c.size() );
-        return super.addAll( c );
-    }
-
-    @Override
-    public boolean addAll(int index, Collection<? extends E> c)
-    {
-        checkSize( c.size() );
-        return super.addAll( index, c );
-    }
-}
diff --git a/proxy/src/main/resources/messages.properties b/proxy/src/main/resources/messages.properties
index 2a79e62b..ae60b896 100644
--- a/proxy/src/main/resources/messages.properties
+++ b/proxy/src/main/resources/messages.properties
@@ -1,40 +1,43 @@
-alert=\u00a78[\u00a74Alert\u00a78]\u00a7r 
+alert=\u00a76[\u00a7e!\u00a76]\u00a7r
 already_connected=\u00a7cYou are already connected to this server!
-already_connected_proxy=\u00a7cYou are already connected to this proxy!
+already_connected_proxy=\u00a7aYou are already connected to \u00a7bInfinite\u00a7a!
 already_connecting=\u00a7cAlready connecting to this server!
-command_list=\u00a7a[{0}] \u00a7e({1}): \u00a7r{2}
-connect_kick=\u00a7cKicked whilst connecting to {0}: {1}
-current_server=\u00a76You are currently connected to {0}.
-fallback_kick=\u00a7cCould not connect to a default or fallback server, please try again later: {0}
-fallback_lobby=\u00a7cCould not connect to target server, you have been moved to a fallback server.
+command_list=\u00a7eServer:\u00a73 {0} \u00a7aOnline: \u00a76{1} \u00a73People: \u00a7b{2}
+connect_kick=Could not connect you to the target server: {1}
+current_server=You are connected to server {0}
+fallback_kick=Could not connect you to the target server: Connection refused.
+fallback_lobby=Could not connect you to the target server, you have been moved to a fallback server.
 lost_connection=[Proxy] Lost connection to server.
 mojang_fail=Error occurred while contacting login servers, are they down?
-no_permission=\u00a7cYou do not have permission to execute this command!
-no_server=\u00a7cThe specified server does not exist.
-no_server_permission=\u00a7cYou don''t have permission to access this server.
-outdated_client=Outdated client! Please use {0}
-outdated_server=Outdated server! I''m still on {0}
-proxy_full=Server is full!
-restart=[Proxy] Proxy restarting.
-server_kick=[Kicked] 
-server_list=\u00a76You may connect to the following servers at this time: 
-server_went_down=\u00a7cThe server you were previously on went down, you have been connected to a fallback server
-total_players=Total players online: {0}
-name_too_long=Cannot have username longer than 16 characters
+no_permission=\u00a7cYou don't have permission to use that command!
+no_server=\u00a7cThat server does not exist!
+no_server_permission=\u00a7cYou don't have permission to access this custom server.
+outdated_client=\u00a7cOutdated client! \u00a7aTo play on \u00a7bInfinite\u00a7a please use {0}!
+outdated_server=Outdated server! Please let us know of this error on our discord!
+proxy_full=\u00a7bInfinite\u00a7a is full, check back later!
+restart=\u00a7bInfinite\u00a7a is restarting!
+server_list=\u00a7aYou may connect to these servers right now:
+server_went_down=The server you were previously on went down, you have been connected to a fallback server
+total_players=\u00a7aTotal players on \u00a7bInfinite\u00a7a:\u00a76 {0}
 name_invalid=Username contains invalid characters.
-ping_cannot_connect=\u00a7c[Bungee] Can''t connect to server.
+ping_cannot_connect=Can''t connect to server.
 offline_mode_player=Not authenticated with Minecraft.net
-message_needed=\u00a7cYou must supply a message.
+secure_profile_required=\u00a7cA secure profile is required to join this server.
+secure_profile_expired=\u00a7cSecure profile expired.
+secure_profile_invalid=\u00a7cSecure profile invalid.
+secure_profile_unsupported=\u00a7cOutdated client, secure profile not supported. Please use 1.19 or newer.
+message_needed=\u00a7aYou must supply a message to use this.
 error_occurred_player=\u00a7cAn error occurred while parsing your message. (Hover for details)
 error_occurred_console=\u00a7cAn error occurred while parsing your message: {0}
 click_to_connect=Click to connect to the server
-username_needed=\u00a7cPlease follow this command by a user name.
-user_not_online=\u00a7cThat user is not online.
-user_online_at=\u00a7a{0} \u00a7ris online at {1}
-send_cmd_usage=\u00a7cNot enough arguments, usage: /send <server|player|all|current> <target>
-player_only=\u00a7cOnly in game players can use this command
-successfully_summoned=\u00a7aSuccessfully summoned player(s)
-you_got_summoned=\u00a76Summoned to {0} by {1}
-command_perms_groups=\u00a76You have the following groups: {0}
-command_perms_permission=\u00a79- {0}
-command_ip=\u00a79IP of {0} is {1}
+username_needed=\u00a7aPlease follow this command by a player name.
+user_not_online=\u00a7cThat player is not online.
+user_online_at=\u00a7b{0} \u00a7ais online at {1}
+send_cmd_usage=\u00a7aNot enough arguments, usage: /send [server|player|all|current] [target]
+player_only=\u00a7cOnly in game players can use this command!
+you_got_summoned=\u00a7b\u00a7l» \u00a77Connecting to {0}..
+command_perms_groups=\u00a7aYou have this group: {0}
+command_perms_permission=\u00a7b- {0}
+command_ip=\u00a73IP of {0} is {1}
+illegal_chat_characters=\u00a7cillegal characters in chat
+kick_message=\u00a7cYou have been kicked.
diff --git a/proxy/src/main/resources/yggdrasil_session_pubkey.der b/proxy/src/main/resources/yggdrasil_session_pubkey.der
new file mode 100644
index 0000000000000000000000000000000000000000..9c79a3aa4771da1f15af37a2af0898f878ad816f
GIT binary patch
literal 550
zcmV+>0@?jAf&wBi4F(A+hDe6@4FLfG1potr0uKN%f&vNxf&u{m%20R*skxUv<HENE
z&!JuY`QK6(FP9q=N`7P@ul8tRwF`L+%Y|cy32_&oMNui=#uIG7_~G4{t&ki<09H2U
z?Bpa=a32Lg_GfU7t07#1?MI`kbhXzNT$DV85iI1EsAEC3y*v=!UovsLh*IDXk^wUt
zJqGc2vwy{g;qpAFl}(wKV?~(ZoS3Tm3P<JRX*5qh@N5mP79(r5&lSvgd1!S#<(w?l
zzay9gwae%tU<WIX#m5Qq8P|MYa$|vXY2x(rLUaFrgapyNMD78~8$o}Aa`4nTvem4O
z_mm>>`)yD7%qARQ>bP36CtP}x@~Z9*VkPYUS6pWrZtT#q)8GCbf<y%=Kl9}scMO*I
zu#RDr=*Pn=>0*5+4Pyw;#Tq!Aq{bDO|Iw<43LnG*#4;?Z&LM<E(on|TyupXcARxlP
zx(fh&7Wy-JstTf-Ou!%gP$P$tMJ9OC`?kdSwnSG-uxlMc5`)hqy<Z^+&P&YW)6Srd
zk&z12viIiGJvY-w^ojXZ0px9ncp@#3(di|9vVw@kXW97{c>71zXE@J`@_dMl`?qQ1
z@3qR;mm=XG_-{G#4vhRxmZiQslrTtB_&7&0ECnD9)gZ}j`e&Je+s<w&Z{mU+*|6l^
oy;TO;3<Dz5n;~AJ@er{Uvv!~{@;#%uk6Tk{6LMDH0s{d60Z%FkUH||9

literal 0
HcmV?d00001

diff --git a/proxy/src/test/java/net/md_5/bungee/util/BoundedArrayListTest.java b/proxy/src/test/java/net/md_5/bungee/util/BoundedArrayListTest.java
deleted file mode 100644
index d66305d9..00000000
--- a/proxy/src/test/java/net/md_5/bungee/util/BoundedArrayListTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package net.md_5.bungee.util;
-
-import com.google.common.collect.ImmutableList;
-import org.junit.Test;
-
-public class BoundedArrayListTest
-{
-
-    @Test
-    public void testGoodAdd() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 2 );
-        list.add( new Object() );
-        list.add( new Object() );
-    }
-
-    @Test
-    public void testSizeOneAdd() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 1 );
-        list.add( new Object() );
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void testBadAdd() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 0 );
-        list.add( new Object() );
-    }
-
-    @Test
-    public void testGoodAdd1() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 2 );
-        list.add( new Object() );
-        list.add( 0, new Object() );
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void testBadAdd1() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 1 );
-        list.add( new Object() );
-        list.add( 0, new Object() );
-    }
-
-    @Test
-    public void testGoodAddAll() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 1 );
-        list.addAll( ImmutableList.of( new Object() ) );
-    }
-
-    @Test
-    public void testGoodAddAll1() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 2 );
-        list.add( new Object() );
-        list.addAll( 0, ImmutableList.of( new Object() ) );
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void testBadAddAll() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 0 );
-        list.addAll( ImmutableList.of( new Object() ) );
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void testBadAddAll1() throws Exception
-    {
-        BoundedArrayList<Object> list = new BoundedArrayList<>( 1 );
-        list.add( new Object() );
-        list.addAll( ImmutableList.of( new Object() ) );
-    }
-}
diff --git a/query/pom.xml b/query/pom.xml
index 813696e4..7e7bd6ea 100644
--- a/query/pom.xml
+++ b/query/pom.xml
@@ -4,19 +4,19 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>io.github.waterfallmc</groupId>
-        <artifactId>travertine-parent</artifactId>
-        <version>1.16-R0.5-SNAPSHOT</version>
+        <groupId>io.github.infinitebungee</groupId>
+        <artifactId>infinitebungee-parent</artifactId>
+        <version>1.19-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
-    <groupId>io.github.waterfallmc</groupId>
-    <artifactId>travertine-query</artifactId>
-    <version>1.16-R0.5-SNAPSHOT</version>
+    <groupId>io.github.infinitebungee</groupId>
+    <artifactId>infinitebungee-query</artifactId>
+    <version>1.19-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
-    <name>Travertine-Query</name>
-    <description>Minecraft query implementation based on the Travertine API.</description>
+    <name>InfiniteBungee-Query</name>
+    <description>Minecraft query implementation based on the InfiniteBungee API.</description>
 
     <dependencies>
         <dependency>
@@ -26,8 +26,8 @@
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.github.waterfallmc</groupId>
-            <artifactId>travertine-api</artifactId>
+            <groupId>io.github.infinitebungee</groupId>
+            <artifactId>infinitebungee-api</artifactId>
             <version>${project.version}</version>
             <scope>compile</scope>
         </dependency>
-- 
2.32.1 (Apple Git-133)

